{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":0},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0},{"_id":"source/images/css-skill4.png","path":"images/css-skill4.png","modified":0,"renderable":0},{"_id":"source/images/css-skill3.png","path":"images/css-skill3.png","modified":0,"renderable":0},{"_id":"source/images/webpack-loader-order.png","path":"images/webpack-loader-order.png","modified":0,"renderable":0},{"_id":"source/images/css-skill5.png","path":"images/css-skill5.png","modified":0,"renderable":0},{"_id":"source/images/css-skill2.jpeg","path":"images/css-skill2.jpeg","modified":0,"renderable":0},{"_id":"themes/dakang/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/dakang/source/js/common.js","path":"js/common.js","modified":0,"renderable":1},{"_id":"themes/dakang/source/assets/jquery-3.2.1.min.js","path":"assets/jquery-3.2.1.min.js","modified":0,"renderable":1},{"_id":"source/images/css-skill.png","path":"images/css-skill.png","modified":0,"renderable":0},{"_id":"themes/dakang/source/css/markdown-css-themes/README.md","path":"css/markdown-css-themes/README.md","modified":0,"renderable":1},{"_id":"themes/dakang/source/css/markdown-css-themes/avenir-white.css","path":"css/markdown-css-themes/avenir-white.css","modified":0,"renderable":1},{"_id":"themes/dakang/source/css/markdown-css-themes/foghorn.css","path":"css/markdown-css-themes/foghorn.css","modified":0,"renderable":1},{"_id":"themes/dakang/source/css/markdown-css-themes/markdown-alt.css","path":"css/markdown-css-themes/markdown-alt.css","modified":0,"renderable":1},{"_id":"themes/dakang/source/css/markdown-css-themes/list.md","path":"css/markdown-css-themes/list.md","modified":0,"renderable":1},{"_id":"themes/dakang/source/css/markdown-css-themes/index.html","path":"css/markdown-css-themes/index.html","modified":0,"renderable":1},{"_id":"themes/dakang/source/css/markdown-css-themes/markdown.css","path":"css/markdown-css-themes/markdown.css","modified":0,"renderable":1},{"_id":"themes/dakang/source/css/markdown-css-themes/markdown10.css","path":"css/markdown-css-themes/markdown10.css","modified":0,"renderable":1},{"_id":"themes/dakang/source/css/markdown-css-themes/markdown1.css","path":"css/markdown-css-themes/markdown1.css","modified":0,"renderable":1},{"_id":"themes/dakang/source/css/markdown-css-themes/markdown3.css","path":"css/markdown-css-themes/markdown3.css","modified":0,"renderable":1},{"_id":"themes/dakang/source/css/markdown-css-themes/markdown2.css","path":"css/markdown-css-themes/markdown2.css","modified":0,"renderable":1},{"_id":"themes/dakang/source/css/markdown-css-themes/markdown4.css","path":"css/markdown-css-themes/markdown4.css","modified":0,"renderable":1},{"_id":"themes/dakang/source/css/markdown-css-themes/markdown7.css","path":"css/markdown-css-themes/markdown7.css","modified":0,"renderable":1},{"_id":"themes/dakang/source/css/markdown-css-themes/markdown5.css","path":"css/markdown-css-themes/markdown5.css","modified":0,"renderable":1},{"_id":"themes/dakang/source/css/markdown-css-themes/markdown6.css","path":"css/markdown-css-themes/markdown6.css","modified":0,"renderable":1},{"_id":"themes/dakang/source/css/markdown-css-themes/markdown9.css","path":"css/markdown-css-themes/markdown9.css","modified":0,"renderable":1},{"_id":"themes/dakang/source/css/markdown-css-themes/markdown8.css","path":"css/markdown-css-themes/markdown8.css","modified":0,"renderable":1},{"_id":"themes/dakang/source/css/markdown-css-themes/sample-markdown.md","path":"css/markdown-css-themes/sample-markdown.md","modified":0,"renderable":1},{"_id":"themes/dakang/source/css/markdown-css-themes/sample.md","path":"css/markdown-css-themes/sample.md","modified":0,"renderable":1},{"_id":"themes/dakang/source/css/markdown-css-themes/swiss.css","path":"css/markdown-css-themes/swiss.css","modified":0,"renderable":1},{"_id":"themes/dakang/source/css/markdown-css-themes/screen.css","path":"css/markdown-css-themes/screen.css","modified":0,"renderable":1},{"_id":"themes/dakang/source/css/bootstrap/bootstrap.min.css","path":"css/bootstrap/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/dakang/source/css/font-awesome/css/font-awesome.min.css","path":"css/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/dakang/source/css/font-awesome/css/font-awesome.css","path":"css/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/dakang/source/css/font-awesome/fonts/fontawesome-webfont.woff2","path":"css/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/dakang/source/css/font-awesome/fonts/fontawesome-webfont.woff","path":"css/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/dakang/source/css/font-awesome/fonts/fontawesome-webfont.ttf","path":"css/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/dakang/source/css/font-awesome/fonts/FontAwesome.otf","path":"css/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/dakang/source/css/font-awesome/fonts/fontawesome-webfont.eot","path":"css/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/dakang/source/css/font-awesome/fonts/fontawesome-webfont.svg","path":"css/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/dakang/source/css/font-awesome-4.7.0.zip","path":"css/font-awesome-4.7.0.zip","modified":0,"renderable":1},{"_id":"themes/dakang/source/css/bootstrap-4.0.0-beta.zip","path":"css/bootstrap-4.0.0-beta.zip","modified":0,"renderable":1},{"_id":"source/images/vue-responsive.png","path":"images/vue-responsive.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"7746b35e2562b01a33274bbfd69d7959bb9b2f70","modified":1566132723000},{"_id":"source/CNAME","hash":"adb37563de357d90f9640ffc8c07e77bd1c3c555","modified":1506046746000},{"_id":"themes/dakang/_config.yml","hash":"1fed68c30d2427997ef1f25642385c15c2d93dda","modified":1515927010000},{"_id":"themes/dakang/example/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515927010000},{"_id":"source/_drafts/URI.md","hash":"abe93974f42f7df1ff938fcc83a54d0ce537769c","modified":1506046746000},{"_id":"source/_drafts/blockchain-notes.md","hash":"decd3ddc39a56662da491ffc405d1df1f6e46c5f","modified":1515927059000},{"_id":"source/_drafts/closures.md","hash":"0ec0059f73fd3e0352be2f2517ccecdffa7cc0cc","modified":1506046746000},{"_id":"source/_drafts/blog-layout.md","hash":"0d3cc92a10c9ca59e51dc569dbb93ae7e65900aa","modified":1515927010000},{"_id":"source/_drafts/cors.md","hash":"72331f205cc96bd65609d001fbc2d84f8dd208cd","modified":1506046746000},{"_id":"source/_drafts/cookie.md","hash":"09d5bcbd733cb315a1b0e5098e958ecb4cfe2e7b","modified":1506046746000},{"_id":"source/_drafts/event.md","hash":"84a127828996784bf9176de9135b27c24718867c","modified":1506046746000},{"_id":"source/_drafts/es6.md","hash":"f0d028eea97ce8d37c860dbffe4d670fc6390925","modified":1506046746000},{"_id":"source/_drafts/git-learn.md","hash":"842c878c08a735b2156fb34689d8cce499c3e20a","modified":1506046746000},{"_id":"source/_drafts/git-problem.md","hash":"0920cd2f8663a9335fe7c8c1400e8e14ba8b8d11","modified":1531394900000},{"_id":"source/_drafts/h5-guide.md","hash":"5ffa7bd0c087d00082f44818850b3dafae839b4e","modified":1506046746000},{"_id":"source/_drafts/interview.md","hash":"af146278733869c3e69a15e56bf3b7e1528a930b","modified":1506046746000},{"_id":"source/_drafts/hexo-learn.md","hash":"ddf2da70a1c67afb317466f51e52fbcc2699e975","modified":1506046746000},{"_id":"source/_drafts/how-vue-render.md","hash":"13199118eb7d5fdfdbcbc75f0025726ab03b809c","modified":1506046746000},{"_id":"source/_drafts/http.md","hash":"47270961e30af931a6dd03808ca45d34036fa1ae","modified":1506046746000},{"_id":"source/_drafts/keyboard.md","hash":"6d727ff3fab0babd71243c708ffb1830aeb39eb9","modified":1506046746000},{"_id":"source/_drafts/nginx-start.md","hash":"b60300fb0d3894743245d4659e8629edbe1433a7","modified":1515927059000},{"_id":"source/_drafts/react.md","hash":"91e2da4db2792f19bbdd5be5f201aced5c54beaf","modified":1506046746000},{"_id":"source/_drafts/responsive.md","hash":"d22199e0663f9434b1b93264cabb8c1cf25daeeb","modified":1506046746000},{"_id":"source/_drafts/rollup.md","hash":"f1beffb2f743a97b149f90f21819c6ef6ad97084","modified":1506046746000},{"_id":"source/_drafts/same-origin.md","hash":"42f6523e19189a5cff4016fd24206ed004996558","modified":1506046746000},{"_id":"source/_drafts/screen-fit.md","hash":"2d11b630f9508c11bde5ec42a2cd3c757705d8d2","modified":1506046746000},{"_id":"source/_drafts/tcp.md","hash":"b40d0e4f2c9a6e914ae1934f59206d615d92275c","modified":1506046746000},{"_id":"source/_drafts/template-classify.md","hash":"68979ea0ed8a191140d9e315ac97e04a22a5700f","modified":1506046746000},{"_id":"source/_drafts/visualFormattingModel.md","hash":"1c9adc028aa22bdd85b9b7b5ad323ef08f95168c","modified":1506046746000},{"_id":"source/_drafts/vue-a5e27b1.md","hash":"00078fb421a86efd5ef882c1d19f5dffb05ddc3b","modified":1506046746000},{"_id":"source/_drafts/test.md","hash":"7b6ee93429fb455769b164a99bc83ee99aff0949","modified":1506046746000},{"_id":"source/_drafts/touch.md","hash":"4f8e5aa354a44f6ca1bd63cdd3a640837f08a1cb","modified":1506046746000},{"_id":"source/_drafts/web-native-bridge.md","hash":"57fc68648a4bfa862026519cddb4a145274cb191","modified":1506046746000},{"_id":"source/_drafts/vue-start.md","hash":"5f1db05a69b3b016a588feec6990ea236685d7a9","modified":1506046746000},{"_id":"source/_drafts/vue-tips.md","hash":"27e36a9993264c8ef3c4bcaab525ff19522e4d67","modified":1506046746000},{"_id":"source/_drafts/webpack-learn1.md","hash":"3c956b7a6768d2164faf06d823add02c6bc44b16","modified":1506046746000},{"_id":"source/_drafts/weixin.md","hash":"71fca1d4ea26362558a0eb93a41f9e78bacb40ef","modified":1506046746000},{"_id":"source/_drafts/xss.md","hash":"07ac5e1d9c8c737b8d7be913eaf6fe198ae18f7e","modified":1506046746000},{"_id":"source/_posts/rxjs-start.md","hash":"07e57a6d40cada144ead186bec593380249d1ac5","modified":1564317759000},{"_id":"source/_posts/log4js-email.md","hash":"735c1c793c0e66f3d9938abb2be18157dc45abb8","modified":1519573958000},{"_id":"source/_posts/vuex-responsive.md","hash":"a64699a91ef57358eabad8c75135fed46b744179","modified":1563720499000},{"_id":"source/_posts/async.md","hash":"ba391968e058bd56509c54127290d4e22243c32c","modified":1515927010000},{"_id":"source/_posts/ssh-authorize.md","hash":"751c09c9bb0c9fd5fff7e1a0ec9e24a5545fc9ff","modified":1515927059000},{"_id":"source/_posts/webpack-loader.md","hash":"4e69b3b4b5785ef725ed066aa27e9146ece40b99","modified":1515927010000},{"_id":"source/images/avatar.gif","hash":"8d2530cf82389b55d3a1bac4822d76d4e4424acf","modified":1515927010000},{"_id":"source/images/avatar.png","hash":"416fdee861f0fcbdcc5a776c092abe781aff193d","modified":1515927010000},{"_id":"source/images/css-skill4.png","hash":"9608fd9f458dde16521252e0797309689e4e8c60","modified":1515927059000},{"_id":"source/images/css-skill3.png","hash":"1f9ab51a666c258311c4c3d50e6f57048e7b6dd9","modified":1515927059000},{"_id":"source/images/webpack-loader-order.png","hash":"35b3a540d98bdf3906a007cc750bcaff46271eb0","modified":1515927010000},{"_id":"source/images/css-skill5.png","hash":"b1e5202272e4a534ff0bcc4aa448db1164164486","modified":1515927059000},{"_id":"themes/dakang/layout/index.2.ejs","hash":"789cea6152b6b04f1a15daa6361dfa428341383f","modified":1515927010000},{"_id":"themes/dakang/layout/index.ejs","hash":"d4b78dd434d53b1e9829d4b1c54cc08bc58bddff","modified":1515927010000},{"_id":"themes/dakang/layout/layout.ejs","hash":"d75c00fee8274856b743bb54c369614f741dd8c5","modified":1515927010000},{"_id":"themes/dakang/layout/page.ejs","hash":"e30a221b78dfbadc518f3d21676828de633a3a97","modified":1515927010000},{"_id":"themes/dakang/layout/post.ejs","hash":"12c9db8650eb1c99384b871684cae4d8838c2e7a","modified":1515927010000},{"_id":"source/images/css-skill2.jpeg","hash":"4499cbf7773d6ecb617437193cb6d143b9e0b311","modified":1515927059000},{"_id":"source/_drafts/vue-source/0922.md","hash":"28eb7a44562a6ced9a03d9ee28c4e1f00f6ec889","modified":1537628585000},{"_id":"source/_drafts/vue-source/0825.md","hash":"076b1343648f373097ac7f879818007daa0dd84e","modified":1535336702000},{"_id":"source/_drafts/vue-source/0822.md","hash":"b289d81407f6d106660fdeed0972b48948e0afae","modified":1534991162000},{"_id":"source/_drafts/vue-source/README.md","hash":"1ec2fb709341372559e4a4abc234e5400ebb4cfc","modified":1537616483000},{"_id":"source/_drafts/vue-1.0.28/root.md","hash":"3aacabaf5512912a7f8fdcbfcd5013fc938914c4","modified":1540704036000},{"_id":"source/_drafts/vue-source/1007.md","hash":"968ec35739b8bdec8f8f7e071ac3e21f5fcc486e","modified":1538907709000},{"_id":"source/_drafts/vue-source/0823.md","hash":"69953639fb48d1302e3f87b19aa19ac14dbe1086","modified":1535336705000},{"_id":"source/_posts/css/skill.md","hash":"6f930cb81fc9c8246837b880d492caa9c49a5cad","modified":1515927059000},{"_id":"themes/dakang/layout/_partial/sidebar.ejs","hash":"689011ed00764521ed423add554cae3954d353f6","modified":1515927010000},{"_id":"themes/dakang/layout/_partial/script.ejs","hash":"16d8d9b84555bb09888f46a343054f6b01455423","modified":1515927010000},{"_id":"themes/dakang/layout/_partial/head.ejs","hash":"ec99eaa953eb919a6cb595bd80cdbbe12bf86580","modified":1518351187000},{"_id":"themes/dakang/layout/_partial/header.ejs","hash":"e8faf619a3ae39419ff8a4da6f5862dd92dbd4bb","modified":1515927010000},{"_id":"themes/dakang/source/css/style.scss","hash":"101902641d82eb340b56d6138ac36e99cd199256","modified":1515927059000},{"_id":"themes/dakang/source/js/common.js","hash":"706ff2182adb6d5594f1d7acf46ee6de9934be56","modified":1515927010000},{"_id":"themes/dakang/source/assets/jquery-3.2.1.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1515927010000},{"_id":"themes/dakang/source/css/_partial/markdown.scss","hash":"2d15634f6285697ee133595d7c7dc99958e3e473","modified":1515927010000},{"_id":"themes/dakang/source/css/markdown-css-themes/README.md","hash":"6dbcc84f711e1cc180cd3bda2e26e0dbd7983c26","modified":1506329970000},{"_id":"themes/dakang/source/css/markdown-css-themes/avenir-white.css","hash":"5458eeeefb4c1b3e31523bfcea3e9371214d6c69","modified":1506329970000},{"_id":"themes/dakang/source/css/markdown-css-themes/foghorn.css","hash":"e3fe13a26661415d678749ee72f399ace38e55fc","modified":1506329970000},{"_id":"themes/dakang/source/css/markdown-css-themes/markdown-alt.css","hash":"42cc8451f5d2f22ab4e79eb38404c649c33f6f22","modified":1506329970000},{"_id":"themes/dakang/source/css/markdown-css-themes/list.md","hash":"eee85bee4418383b9654595a148518ca3d6c46f8","modified":1506329970000},{"_id":"themes/dakang/source/css/markdown-css-themes/index.html","hash":"d2eb418e2e3406601a52ea62d40ad44033b34ab4","modified":1506329970000},{"_id":"themes/dakang/source/css/markdown-css-themes/markdown.css","hash":"277bd58416fb8f666ea80094434ed05a2b3d0e32","modified":1506329970000},{"_id":"themes/dakang/source/css/markdown-css-themes/markdown10.css","hash":"ab34c4aa62d0267fe09f074a88e3d8a0a1f75302","modified":1506329970000},{"_id":"themes/dakang/source/css/markdown-css-themes/markdown1.css","hash":"3af58d9f3db207e98e6ceb66c16785982e5b5156","modified":1506329970000},{"_id":"themes/dakang/source/css/markdown-css-themes/markdown3.css","hash":"6a81971134472c6efa63b961df9dfafd39f30a2e","modified":1506329970000},{"_id":"themes/dakang/source/css/markdown-css-themes/markdown2.css","hash":"4dd70e61ae14e0f0eddeb1b3c8540c7fe9eef895","modified":1506329970000},{"_id":"themes/dakang/source/css/markdown-css-themes/markdown4.css","hash":"1965018842735acafebacab40983693c7e5d5ccd","modified":1506329970000},{"_id":"themes/dakang/source/css/markdown-css-themes/markdown7.css","hash":"8e9f0c9fad448f79b553f57e11407dc8151686a1","modified":1506329970000},{"_id":"themes/dakang/source/css/markdown-css-themes/markdown5.css","hash":"939b37c6158b7e7f2550286f5be0e14dfb6b769a","modified":1506329970000},{"_id":"themes/dakang/source/css/markdown-css-themes/markdown6.css","hash":"f7b6593f5476f7e1e20f9652b86aefd3b2abfc23","modified":1506329970000},{"_id":"themes/dakang/source/css/markdown-css-themes/markdown9.css","hash":"f74276d428b2c5b617ffd23a7a63c571a9d076dd","modified":1506329970000},{"_id":"themes/dakang/source/css/markdown-css-themes/markdown8.css","hash":"4ca943c5b44944e40692d1be3c406776c314893c","modified":1506329970000},{"_id":"themes/dakang/source/css/markdown-css-themes/sample-markdown.md","hash":"88594486131bfb42268361d118c25450446b4ce3","modified":1506329970000},{"_id":"themes/dakang/source/css/markdown-css-themes/sample.md","hash":"dd8e5d33b6a509db2f83bdcdc574ec63a022e055","modified":1506329970000},{"_id":"themes/dakang/source/css/markdown-css-themes/swiss.css","hash":"0ef6f8cd1f1331c810b2e20d043ed560faefc670","modified":1506329970000},{"_id":"themes/dakang/source/css/markdown-css-themes/screen.css","hash":"c388de692e6a0bd93bbc1b12703fdecae4a438b7","modified":1506329970000},{"_id":"source/images/css-skill.png","hash":"94d9f99377e9a3d7053e4feefdd0decb01bc3c95","modified":1515927059000},{"_id":"themes/dakang/source/css/bootstrap/bootstrap.min.css","hash":"262e04cab3c1a51024d4f3960c72ebd3968476a7","modified":1515927010000},{"_id":"themes/dakang/source/css/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1515927010000},{"_id":"themes/dakang/source/css/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1515927010000},{"_id":"themes/dakang/source/css/markdown-css-themes/.git/HEAD","hash":"721c06b92afb83eac23ca14d53264a317bb1d490","modified":1506329970000},{"_id":"themes/dakang/source/css/markdown-css-themes/.git/config","hash":"d19d66076f9465aaef1fd4688dd3825da7913dc2","modified":1506329970000},{"_id":"themes/dakang/source/css/markdown-css-themes/.git/index","hash":"7424f2a5de3c01e8120fe89fa98d52ee07667194","modified":1506333047000},{"_id":"themes/dakang/source/css/markdown-css-themes/.git/packed-refs","hash":"7c7c0bd54ccbe9be91350b1523081e05a7c88030","modified":1506329970000},{"_id":"themes/dakang/source/css/markdown-css-themes/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1506329967000},{"_id":"themes/dakang/source/css/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1515927010000},{"_id":"themes/dakang/source/css/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1515927010000},{"_id":"themes/dakang/source/css/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1515927010000},{"_id":"themes/dakang/source/css/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1515927010000},{"_id":"themes/dakang/source/css/markdown-css-themes/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1506329967000},{"_id":"themes/dakang/source/css/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1515927010000},{"_id":"themes/dakang/source/css/markdown-css-themes/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1506329967000},{"_id":"themes/dakang/source/css/markdown-css-themes/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1506329967000},{"_id":"themes/dakang/source/css/markdown-css-themes/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1506329967000},{"_id":"themes/dakang/source/css/markdown-css-themes/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1506329967000},{"_id":"themes/dakang/source/css/markdown-css-themes/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1506329967000},{"_id":"themes/dakang/source/css/markdown-css-themes/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1506329967000},{"_id":"themes/dakang/source/css/markdown-css-themes/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1506329967000},{"_id":"themes/dakang/source/css/markdown-css-themes/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1506329967000},{"_id":"themes/dakang/source/css/markdown-css-themes/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1506329967000},{"_id":"themes/dakang/source/css/markdown-css-themes/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1506329967000},{"_id":"themes/dakang/source/css/markdown-css-themes/.git/logs/HEAD","hash":"8e2564cba3b92ca1f5f166918e5773eefa8df692","modified":1506329970000},{"_id":"themes/dakang/source/css/markdown-css-themes/.git/objects/pack/pack-49e728364b8945abf69f482b237b7d1a64745c0b.idx","hash":"63ea639909f7e0e44db8bcb8caeb71ed0bea7b65","modified":1506329970000},{"_id":"themes/dakang/source/css/markdown-css-themes/.git/refs/heads/gh-pages","hash":"ff1af63602d4befd370dcc9b62d9c1fd8e46fc52","modified":1506329970000},{"_id":"themes/dakang/source/css/markdown-css-themes/.git/objects/pack/pack-49e728364b8945abf69f482b237b7d1a64745c0b.pack","hash":"d76f03d89febc50ef49c50421baef0c7f55498b3","modified":1506329970000},{"_id":"themes/dakang/source/css/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1515927010000},{"_id":"themes/dakang/source/css/markdown-css-themes/.git/logs/refs/heads/gh-pages","hash":"8e2564cba3b92ca1f5f166918e5773eefa8df692","modified":1506329970000},{"_id":"themes/dakang/source/css/markdown-css-themes/.git/refs/remotes/origin/HEAD","hash":"9c1e2598a602849ece6df0f0f76e8d48080a773d","modified":1506329970000},{"_id":"themes/dakang/source/css/font-awesome-4.7.0.zip","hash":"444ff78e8ee3293184f46a23252c1aa51ccc9755","modified":1515927010000},{"_id":"themes/dakang/source/css/markdown-css-themes/.git/logs/refs/remotes/origin/HEAD","hash":"8e2564cba3b92ca1f5f166918e5773eefa8df692","modified":1506329970000},{"_id":"themes/dakang/source/css/bootstrap-4.0.0-beta.zip","hash":"e6d3320b8349ef290b23b6e3f76df625b0f60e7d","modified":1515927010000},{"_id":"public/2019/07/21/vuex-responsive/index.html","hash":"4e1c9242fc90200fbdb25f790a34fac3eb4d3500","modified":1564317773932},{"_id":"public/2018/02/25/log4js-email/index.html","hash":"e8fa70660e1aee3391c2f9599101d38baddc7a08","modified":1564317773932},{"_id":"public/2017/09/15/webpack-loader/index.html","hash":"2bf0b3518a399493d726c882797d93ef59ba7cb2","modified":1564317773933},{"_id":"public/2017/05/10/ssh-authorize/index.html","hash":"5f92eb2dcdc5c9fa6205b61d507a28bdec778cc6","modified":1564317773933},{"_id":"public/archives/index.html","hash":"8161bbab41fe673ac0cb4d04224d7bd57f6c89df","modified":1566142156607},{"_id":"public/archives/2017/index.html","hash":"4b4e4fc8d4138cd3aa1514a99a7adfceb684f24e","modified":1564317773933},{"_id":"public/archives/2017/05/index.html","hash":"0c2d60396568c33150831afa8befc2498f98ca08","modified":1564317773933},{"_id":"public/archives/2017/09/index.html","hash":"a14ef8ee18f8e4e7ed0d3f32c81ef65ff5343995","modified":1564317773933},{"_id":"public/archives/2017/11/index.html","hash":"e2b4c45bce448549cacde33b39bf1b336bb1261e","modified":1564317773933},{"_id":"public/archives/2018/index.html","hash":"5419cf3ca5a2ff99474dec46ff5f2ad16030e47d","modified":1564317773934},{"_id":"public/archives/2018/02/index.html","hash":"5419cf3ca5a2ff99474dec46ff5f2ad16030e47d","modified":1564317773934},{"_id":"public/archives/2019/index.html","hash":"efc6c58becc9c041200f59c595e32a42dad8ba53","modified":1566142156607},{"_id":"public/archives/2019/07/index.html","hash":"694072a2ac1a29bb11e68c4ede0eaed6c6f81063","modified":1564317773934},{"_id":"public/index.html","hash":"14fc6ceb7c404710570bfd96f04bfb6b4d78a546","modified":1566142156607},{"_id":"public/tags/webpack/index.html","hash":"24e184352764c84a721a4993f6484181dfd03d35","modified":1564317773934},{"_id":"public/tags/异步/index.html","hash":"a37b939df292115fc8df8df4e1cc90d7d2932430","modified":1564317773934},{"_id":"public/tags/loader/index.html","hash":"24e184352764c84a721a4993f6484181dfd03d35","modified":1564317773935},{"_id":"public/tags/css/index.html","hash":"e2b4c45bce448549cacde33b39bf1b336bb1261e","modified":1564317773935},{"_id":"public/tags/布局/index.html","hash":"e2b4c45bce448549cacde33b39bf1b336bb1261e","modified":1564317773935},{"_id":"public/2017/11/19/css/skill/index.html","hash":"6e17d7a4a8aa21ce9a6ff43bebd6db00965cf459","modified":1564317773935},{"_id":"public/2017/09/20/async/index.html","hash":"f296081898de1dfcf3f0fba232feaef333aadaed","modified":1564317773935},{"_id":"public/2019/07/28/rxjs-start/index.html","hash":"3bff023202e9ae8861534ec468ccb9a347f58ed9","modified":1566142156606},{"_id":"source/_posts/vue-watch-order.md","hash":"7bf9c23c7b5b2175f10d23a627c09dd955948b54","modified":1566142058000},{"_id":"source/images/vue-responsive.png","hash":"7071337f9071f93ebf85639ede38b0f40fd75d98","modified":1566132686000},{"_id":"public/archives/2019/08/index.html","hash":"80f4927025c905f3a555d9f13194e33ccb3476bf","modified":1566142156608},{"_id":"public/2019/08/18/vue-watch-order/index.html","hash":"d9e4065718791c9632df254e0cd1c887006b034f","modified":1566142156608},{"_id":"public/images/vue-responsive.png","hash":"7071337f9071f93ebf85639ede38b0f40fd75d98","modified":1566142156608}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"URI","date":"2017-01-31T04:57:33.000Z","_content":"## URI\n服务器资源名被称为统一资源标识符（Uniform Resource Identifier,URI）。URI有两种形式，分别是URL和URN，它们是URI的子集。\nHTTP规范将更通用的概念URI作为其资源标识符，但实际上，HTTP应用程序处理的只是URI的URL子集。\n\n### URL\n统一资源定位符，描述服务器上某资源的特殊位置。\n\n语法：\n\n```\n<scheme>://<user>:<password>@<host>:<port>/<path>;<params>?<query>#<frag>\n```\n\n+ scheme:协议\n+ user和password:用户名和密码。不是必需的，除非服务器需要\n+ host:主机\n+ port:端口\n+ path:路径\n+ params:参数。某些协议需要额外的信息才能工作\n+ query:查询字符串。\n+ frag:片段。表示资源内部的片段。HTTP服务器通常只处理整个资源，而不是它的片段，所以客户端不能将片段传送给服务器。\n\n\n### URN\n统一资源名，作为特定内容的唯一名称使用，与当前的资源所在地无关。还未大范围使用。\n\n## 编码\n### 要求\n+ 安全传输，即URL的传输不丢失信息。有些协议，比如邮件传输协议，会剥去一些特定的字符。\n+ 可供人阅读。不可见、不可打印的字符即使能穿过邮件程序，也不能使用。\n+ 完整。URL中能包含除通用的安全字母表之外的二进制数据或字符，所以需要有一种转义进制，把它们编码成安全字符再进行传输。\n\n### 字符集\nUS-ASCII，使用7位二进制码表示英文打印机提供的大多数按键和少数用于文本格式和硬件通知的不可打印控制字符。\n\n### 编码机制\n通过转义来表示不安全的字符，这种转义表示法包含一个百分号（%），后面跟着两个表示字符ASCII码的十六进制数。","source":"_drafts/URI.md","raw":"---\ntitle: URI\ndate: 2017-01-31 12:57:33\ntags: HTTP权威指南\n---\n## URI\n服务器资源名被称为统一资源标识符（Uniform Resource Identifier,URI）。URI有两种形式，分别是URL和URN，它们是URI的子集。\nHTTP规范将更通用的概念URI作为其资源标识符，但实际上，HTTP应用程序处理的只是URI的URL子集。\n\n### URL\n统一资源定位符，描述服务器上某资源的特殊位置。\n\n语法：\n\n```\n<scheme>://<user>:<password>@<host>:<port>/<path>;<params>?<query>#<frag>\n```\n\n+ scheme:协议\n+ user和password:用户名和密码。不是必需的，除非服务器需要\n+ host:主机\n+ port:端口\n+ path:路径\n+ params:参数。某些协议需要额外的信息才能工作\n+ query:查询字符串。\n+ frag:片段。表示资源内部的片段。HTTP服务器通常只处理整个资源，而不是它的片段，所以客户端不能将片段传送给服务器。\n\n\n### URN\n统一资源名，作为特定内容的唯一名称使用，与当前的资源所在地无关。还未大范围使用。\n\n## 编码\n### 要求\n+ 安全传输，即URL的传输不丢失信息。有些协议，比如邮件传输协议，会剥去一些特定的字符。\n+ 可供人阅读。不可见、不可打印的字符即使能穿过邮件程序，也不能使用。\n+ 完整。URL中能包含除通用的安全字母表之外的二进制数据或字符，所以需要有一种转义进制，把它们编码成安全字符再进行传输。\n\n### 字符集\nUS-ASCII，使用7位二进制码表示英文打印机提供的大多数按键和少数用于文本格式和硬件通知的不可打印控制字符。\n\n### 编码机制\n通过转义来表示不安全的字符，这种转义表示法包含一个百分号（%），后面跟着两个表示字符ASCII码的十六进制数。","slug":"URI","published":0,"updated":"2017-09-22T02:19:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymstemb00007nwftyv74qhi","content":"<h2 id=\"URI\"><a href=\"#URI\" class=\"headerlink\" title=\"URI\"></a>URI</h2><p>服务器资源名被称为统一资源标识符（Uniform Resource Identifier,URI）。URI有两种形式，分别是URL和URN，它们是URI的子集。<br>HTTP规范将更通用的概念URI作为其资源标识符，但实际上，HTTP应用程序处理的只是URI的URL子集。</p>\n<h3 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h3><p>统一资源定位符，描述服务器上某资源的特殊位置。</p>\n<p>语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;scheme&gt;://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;path&gt;;&lt;params&gt;?&lt;query&gt;#&lt;frag&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>scheme:协议</li>\n<li>user和password:用户名和密码。不是必需的，除非服务器需要</li>\n<li>host:主机</li>\n<li>port:端口</li>\n<li>path:路径</li>\n<li>params:参数。某些协议需要额外的信息才能工作</li>\n<li>query:查询字符串。</li>\n<li>frag:片段。表示资源内部的片段。HTTP服务器通常只处理整个资源，而不是它的片段，所以客户端不能将片段传送给服务器。</li>\n</ul>\n<h3 id=\"URN\"><a href=\"#URN\" class=\"headerlink\" title=\"URN\"></a>URN</h3><p>统一资源名，作为特定内容的唯一名称使用，与当前的资源所在地无关。还未大范围使用。</p>\n<h2 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h2><h3 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h3><ul>\n<li>安全传输，即URL的传输不丢失信息。有些协议，比如邮件传输协议，会剥去一些特定的字符。</li>\n<li>可供人阅读。不可见、不可打印的字符即使能穿过邮件程序，也不能使用。</li>\n<li>完整。URL中能包含除通用的安全字母表之外的二进制数据或字符，所以需要有一种转义进制，把它们编码成安全字符再进行传输。</li>\n</ul>\n<h3 id=\"字符集\"><a href=\"#字符集\" class=\"headerlink\" title=\"字符集\"></a>字符集</h3><p>US-ASCII，使用7位二进制码表示英文打印机提供的大多数按键和少数用于文本格式和硬件通知的不可打印控制字符。</p>\n<h3 id=\"编码机制\"><a href=\"#编码机制\" class=\"headerlink\" title=\"编码机制\"></a>编码机制</h3><p>通过转义来表示不安全的字符，这种转义表示法包含一个百分号（%），后面跟着两个表示字符ASCII码的十六进制数。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"URI\"><a href=\"#URI\" class=\"headerlink\" title=\"URI\"></a>URI</h2><p>服务器资源名被称为统一资源标识符（Uniform Resource Identifier,URI）。URI有两种形式，分别是URL和URN，它们是URI的子集。<br>HTTP规范将更通用的概念URI作为其资源标识符，但实际上，HTTP应用程序处理的只是URI的URL子集。</p>\n<h3 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h3><p>统一资源定位符，描述服务器上某资源的特殊位置。</p>\n<p>语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;scheme&gt;://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;path&gt;;&lt;params&gt;?&lt;query&gt;#&lt;frag&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>scheme:协议</li>\n<li>user和password:用户名和密码。不是必需的，除非服务器需要</li>\n<li>host:主机</li>\n<li>port:端口</li>\n<li>path:路径</li>\n<li>params:参数。某些协议需要额外的信息才能工作</li>\n<li>query:查询字符串。</li>\n<li>frag:片段。表示资源内部的片段。HTTP服务器通常只处理整个资源，而不是它的片段，所以客户端不能将片段传送给服务器。</li>\n</ul>\n<h3 id=\"URN\"><a href=\"#URN\" class=\"headerlink\" title=\"URN\"></a>URN</h3><p>统一资源名，作为特定内容的唯一名称使用，与当前的资源所在地无关。还未大范围使用。</p>\n<h2 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h2><h3 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h3><ul>\n<li>安全传输，即URL的传输不丢失信息。有些协议，比如邮件传输协议，会剥去一些特定的字符。</li>\n<li>可供人阅读。不可见、不可打印的字符即使能穿过邮件程序，也不能使用。</li>\n<li>完整。URL中能包含除通用的安全字母表之外的二进制数据或字符，所以需要有一种转义进制，把它们编码成安全字符再进行传输。</li>\n</ul>\n<h3 id=\"字符集\"><a href=\"#字符集\" class=\"headerlink\" title=\"字符集\"></a>字符集</h3><p>US-ASCII，使用7位二进制码表示英文打印机提供的大多数按键和少数用于文本格式和硬件通知的不可打印控制字符。</p>\n<h3 id=\"编码机制\"><a href=\"#编码机制\" class=\"headerlink\" title=\"编码机制\"></a>编码机制</h3><p>通过转义来表示不安全的字符，这种转义表示法包含一个百分号（%），后面跟着两个表示字符ASCII码的十六进制数。</p>\n"},{"title":"blockchain-notes","_content":"\n","source":"_drafts/blockchain-notes.md","raw":"---\ntitle: blockchain-notes\ntags: blockchain\n---\n\n","slug":"blockchain-notes","published":0,"date":"2018-01-14T10:50:59.000Z","updated":"2018-01-14T10:50:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymstemf00017nwf299pt0x3","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"博客布局技巧","_content":"\n## 整体内容container\n屏幕分辨率不同，所以屏幕宽度不一。所以不能让container宽度按照屏幕宽度多大就多大\n\n","source":"_drafts/blog-layout.md","raw":"---\ntitle: 博客布局技巧 \ntags:\n---\n\n## 整体内容container\n屏幕分辨率不同，所以屏幕宽度不一。所以不能让container宽度按照屏幕宽度多大就多大\n\n","slug":"blog-layout","published":0,"date":"2018-01-14T10:50:10.000Z","updated":"2018-01-14T10:50:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymstemg00027nwfwqr4p785","content":"<h2 id=\"整体内容container\"><a href=\"#整体内容container\" class=\"headerlink\" title=\"整体内容container\"></a>整体内容container</h2><p>屏幕分辨率不同，所以屏幕宽度不一。所以不能让container宽度按照屏幕宽度多大就多大</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"整体内容container\"><a href=\"#整体内容container\" class=\"headerlink\" title=\"整体内容container\"></a>整体内容container</h2><p>屏幕分辨率不同，所以屏幕宽度不一。所以不能让container宽度按照屏幕宽度多大就多大</p>\n"},{"title":"closures","date":"2017-05-17T15:30:40.000Z","_content":"\n闭包就是将函数内部和函数外部连接起来的一座桥梁。\n通过闭包能访问(间接)其他函数内部的变量。\n\n下面的f2函数，就是闭包\n```\nfunction f1(){\n　　var n=999;\n　　function f2(){\n　　　　alert(n); \n　　}\n　　return f2;\n}\nvar result=f1();\nresult(); // 999\n```\n\n[学习Javascript闭包（Closure）](http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html)\n\n","source":"_drafts/closures.md","raw":"---\ntitle: closures\ndate: 2017-05-17 23:30:40\ntags:\n---\n\n闭包就是将函数内部和函数外部连接起来的一座桥梁。\n通过闭包能访问(间接)其他函数内部的变量。\n\n下面的f2函数，就是闭包\n```\nfunction f1(){\n　　var n=999;\n　　function f2(){\n　　　　alert(n); \n　　}\n　　return f2;\n}\nvar result=f1();\nresult(); // 999\n```\n\n[学习Javascript闭包（Closure）](http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html)\n\n","slug":"closures","published":0,"updated":"2017-09-22T02:19:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymstemh00037nwfbi0ugjrr","content":"<p>闭包就是将函数内部和函数外部连接起来的一座桥梁。<br>通过闭包能访问(间接)其他函数内部的变量。</p>\n<p>下面的f2函数，就是闭包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f1()&#123;</span><br><span class=\"line\">　　var n=999;</span><br><span class=\"line\">　　function f2()&#123;</span><br><span class=\"line\">　　　　alert(n); </span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　　return f2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var result=f1();</span><br><span class=\"line\">result(); // 999</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\" target=\"_blank\" rel=\"noopener\">学习Javascript闭包（Closure）</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>闭包就是将函数内部和函数外部连接起来的一座桥梁。<br>通过闭包能访问(间接)其他函数内部的变量。</p>\n<p>下面的f2函数，就是闭包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f1()&#123;</span><br><span class=\"line\">　　var n=999;</span><br><span class=\"line\">　　function f2()&#123;</span><br><span class=\"line\">　　　　alert(n); </span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　　return f2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var result=f1();</span><br><span class=\"line\">result(); // 999</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\" target=\"_blank\" rel=\"noopener\">学习Javascript闭包（Closure）</a></p>\n"},{"title":"跨域资源共享(cors)","date":"2017-05-17T12:25:43.000Z","_content":"\n+ 发起跨域请求，浏览器会在请求头部加上origin字段\n+ 后台如果允许，响应头会有Access-Control-Allow-Origin字段\n响应头的其他字段：\nAccess-Control-Allow-Credentials 服务器同意请求含有cookie。发请求是同时要加上withCredentials\n\n复杂请求比简单请求都了`预检`的一步，其他一样。预检通过好，有个期限，不用每次都预检。\n","source":"_drafts/cors.md","raw":"---\ntitle: 跨域资源共享(cors)\ndate: 2017-05-17 20:25:43\ntags:\n---\n\n+ 发起跨域请求，浏览器会在请求头部加上origin字段\n+ 后台如果允许，响应头会有Access-Control-Allow-Origin字段\n响应头的其他字段：\nAccess-Control-Allow-Credentials 服务器同意请求含有cookie。发请求是同时要加上withCredentials\n\n复杂请求比简单请求都了`预检`的一步，其他一样。预检通过好，有个期限，不用每次都预检。\n","slug":"cors","published":0,"updated":"2017-09-22T02:19:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymstemi00047nwf20zhpv2x","content":"<ul>\n<li>发起跨域请求，浏览器会在请求头部加上origin字段</li>\n<li>后台如果允许，响应头会有Access-Control-Allow-Origin字段<br>响应头的其他字段：<br>Access-Control-Allow-Credentials 服务器同意请求含有cookie。发请求是同时要加上withCredentials</li>\n</ul>\n<p>复杂请求比简单请求都了<code>预检</code>的一步，其他一样。预检通过好，有个期限，不用每次都预检。</p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>发起跨域请求，浏览器会在请求头部加上origin字段</li>\n<li>后台如果允许，响应头会有Access-Control-Allow-Origin字段<br>响应头的其他字段：<br>Access-Control-Allow-Credentials 服务器同意请求含有cookie。发请求是同时要加上withCredentials</li>\n</ul>\n<p>复杂请求比简单请求都了<code>预检</code>的一步，其他一样。预检通过好，有个期限，不用每次都预检。</p>\n"},{"title":"cookie","date":"2016-10-21T15:13:22.000Z","_content":"\n\n## 属性值\n+ path 如果没有定义，默认为当前文档位置的路径。\n例如，[http://example.com/da/index.html]()中，path的值为*/da*\n+ domain 如果没有定义，默认为当前文档位置的路径的域名部分。\n例如，[http://example.com/da/index.html]()中，domain的值为*example.com*\n+ max-age cookie存活时间（单位是秒）\n例如，max-age为3时，则cookie三秒后过期\n+ expires 过期的时间，cookie会在这个时间后过期。\nUTC时区的字符格式，这种格式可以通过Date.toUTCString()得到。\n例如 \n``` \nnew Date('2016-10-24').toUTCString();//Mon, 24 Oct 2016 00:00:00 GMT\n\n```\n+ secure\n是否只通过https协议传递。\n\n\n## 类型\n+ 会话cookie\n如果没有设置过期时间，就是会话cookie。当用户退出浏览器时，会话cookie就被删除了\n+ 持久cookie\n用户退出浏览器时，依然存在。到了过期时间，就会被删除。\n\n## 操作\n### 后台\n当后台对前端发来的请求进行响应时，可以在响应头部设置Set-Cookie字段添加cookie\n```\nSet-Cookie：key=value;domain=example.com;path=/\n```\n### 前端\n操作document.cookie\n```\ndocument.cookie='key=value;domain=example.com;path=/';\n```\n\n## 共享\n\n### 端口不同\n端口不同，cookie也是共享的。例如：\n在http://example.com:3000 上设置的cookie，能被http://example.com:5000 访问到。\n\n### 同域名，但路径不同\n同域名下，对cookie的path的字段进行设置，则其他页面在此path路径上的才能被访问到。例如：\n在http://example.com:3000/a/b/ 上设置了cookie，该cookie的path为**/a/b**,则http://example.com:3000/a/c/是访问不到的。需要设置cookie时，把path字段改为**/a**或者**/**。\n\n### 父域名和子域名共享\n和设置path类似，可以修改cookie的domain字段，同时也要符合path的要求，则可以共享cookie。例如：\n在http://www.example.com:3000/上设置cookie的domamin为**example.com**,path一般设为**/**,则http://example.com/可以访问到该cookie.\n\n\n\n\n","source":"_drafts/cookie.md","raw":"---\ntitle: cookie\ndate: 2016-10-21 23:13:22\ntags:\n---\n\n\n## 属性值\n+ path 如果没有定义，默认为当前文档位置的路径。\n例如，[http://example.com/da/index.html]()中，path的值为*/da*\n+ domain 如果没有定义，默认为当前文档位置的路径的域名部分。\n例如，[http://example.com/da/index.html]()中，domain的值为*example.com*\n+ max-age cookie存活时间（单位是秒）\n例如，max-age为3时，则cookie三秒后过期\n+ expires 过期的时间，cookie会在这个时间后过期。\nUTC时区的字符格式，这种格式可以通过Date.toUTCString()得到。\n例如 \n``` \nnew Date('2016-10-24').toUTCString();//Mon, 24 Oct 2016 00:00:00 GMT\n\n```\n+ secure\n是否只通过https协议传递。\n\n\n## 类型\n+ 会话cookie\n如果没有设置过期时间，就是会话cookie。当用户退出浏览器时，会话cookie就被删除了\n+ 持久cookie\n用户退出浏览器时，依然存在。到了过期时间，就会被删除。\n\n## 操作\n### 后台\n当后台对前端发来的请求进行响应时，可以在响应头部设置Set-Cookie字段添加cookie\n```\nSet-Cookie：key=value;domain=example.com;path=/\n```\n### 前端\n操作document.cookie\n```\ndocument.cookie='key=value;domain=example.com;path=/';\n```\n\n## 共享\n\n### 端口不同\n端口不同，cookie也是共享的。例如：\n在http://example.com:3000 上设置的cookie，能被http://example.com:5000 访问到。\n\n### 同域名，但路径不同\n同域名下，对cookie的path的字段进行设置，则其他页面在此path路径上的才能被访问到。例如：\n在http://example.com:3000/a/b/ 上设置了cookie，该cookie的path为**/a/b**,则http://example.com:3000/a/c/是访问不到的。需要设置cookie时，把path字段改为**/a**或者**/**。\n\n### 父域名和子域名共享\n和设置path类似，可以修改cookie的domain字段，同时也要符合path的要求，则可以共享cookie。例如：\n在http://www.example.com:3000/上设置cookie的domamin为**example.com**,path一般设为**/**,则http://example.com/可以访问到该cookie.\n\n\n\n\n","slug":"cookie","published":0,"updated":"2017-09-22T02:19:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymstemj00057nwfblkmo78b","content":"<h2 id=\"属性值\"><a href=\"#属性值\" class=\"headerlink\" title=\"属性值\"></a>属性值</h2><ul>\n<li>path 如果没有定义，默认为当前文档位置的路径。<br>例如，<a href=\"\">http://example.com/da/index.html</a>中，path的值为<em>/da</em></li>\n<li>domain 如果没有定义，默认为当前文档位置的路径的域名部分。<br>例如，<a href=\"\">http://example.com/da/index.html</a>中，domain的值为<em>example.com</em></li>\n<li>max-age cookie存活时间（单位是秒）<br>例如，max-age为3时，则cookie三秒后过期</li>\n<li><p>expires 过期的时间，cookie会在这个时间后过期。<br>UTC时区的字符格式，这种格式可以通过Date.toUTCString()得到。<br>例如 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Date(&apos;2016-10-24&apos;).toUTCString();//Mon, 24 Oct 2016 00:00:00 GMT</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>secure<br>是否只通过https协议传递。</p>\n</li>\n</ul>\n<h2 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h2><ul>\n<li>会话cookie<br>如果没有设置过期时间，就是会话cookie。当用户退出浏览器时，会话cookie就被删除了</li>\n<li>持久cookie<br>用户退出浏览器时，依然存在。到了过期时间，就会被删除。</li>\n</ul>\n<h2 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h2><h3 id=\"后台\"><a href=\"#后台\" class=\"headerlink\" title=\"后台\"></a>后台</h3><p>当后台对前端发来的请求进行响应时，可以在响应头部设置Set-Cookie字段添加cookie<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set-Cookie：key=value;domain=example.com;path=/</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h3><p>操作document.cookie<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.cookie=&apos;key=value;domain=example.com;path=/&apos;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"共享\"><a href=\"#共享\" class=\"headerlink\" title=\"共享\"></a>共享</h2><h3 id=\"端口不同\"><a href=\"#端口不同\" class=\"headerlink\" title=\"端口不同\"></a>端口不同</h3><p>端口不同，cookie也是共享的。例如：<br>在<a href=\"http://example.com:3000\" target=\"_blank\" rel=\"noopener\">http://example.com:3000</a> 上设置的cookie，能被<a href=\"http://example.com:5000\" target=\"_blank\" rel=\"noopener\">http://example.com:5000</a> 访问到。</p>\n<h3 id=\"同域名，但路径不同\"><a href=\"#同域名，但路径不同\" class=\"headerlink\" title=\"同域名，但路径不同\"></a>同域名，但路径不同</h3><p>同域名下，对cookie的path的字段进行设置，则其他页面在此path路径上的才能被访问到。例如：<br>在<a href=\"http://example.com:3000/a/b/\" target=\"_blank\" rel=\"noopener\">http://example.com:3000/a/b/</a> 上设置了cookie，该cookie的path为<strong>/a/b</strong>,则<a href=\"http://example.com:3000/a/c/是访问不到的。需要设置cookie时，把path字段改为**/a**或者**/**。\" target=\"_blank\" rel=\"noopener\">http://example.com:3000/a/c/是访问不到的。需要设置cookie时，把path字段改为**/a**或者**/**。</a></p>\n<h3 id=\"父域名和子域名共享\"><a href=\"#父域名和子域名共享\" class=\"headerlink\" title=\"父域名和子域名共享\"></a>父域名和子域名共享</h3><p>和设置path类似，可以修改cookie的domain字段，同时也要符合path的要求，则可以共享cookie。例如：<br>在<a href=\"http://www.example.com:3000/上设置cookie的domamin为**example.com**,path一般设为**/**,则http://example.com/可以访问到该cookie\" target=\"_blank\" rel=\"noopener\">http://www.example.com:3000/上设置cookie的domamin为**example.com**,path一般设为**/**,则http://example.com/可以访问到该cookie</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"属性值\"><a href=\"#属性值\" class=\"headerlink\" title=\"属性值\"></a>属性值</h2><ul>\n<li>path 如果没有定义，默认为当前文档位置的路径。<br>例如，<a href=\"\">http://example.com/da/index.html</a>中，path的值为<em>/da</em></li>\n<li>domain 如果没有定义，默认为当前文档位置的路径的域名部分。<br>例如，<a href=\"\">http://example.com/da/index.html</a>中，domain的值为<em>example.com</em></li>\n<li>max-age cookie存活时间（单位是秒）<br>例如，max-age为3时，则cookie三秒后过期</li>\n<li><p>expires 过期的时间，cookie会在这个时间后过期。<br>UTC时区的字符格式，这种格式可以通过Date.toUTCString()得到。<br>例如 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Date(&apos;2016-10-24&apos;).toUTCString();//Mon, 24 Oct 2016 00:00:00 GMT</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>secure<br>是否只通过https协议传递。</p>\n</li>\n</ul>\n<h2 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h2><ul>\n<li>会话cookie<br>如果没有设置过期时间，就是会话cookie。当用户退出浏览器时，会话cookie就被删除了</li>\n<li>持久cookie<br>用户退出浏览器时，依然存在。到了过期时间，就会被删除。</li>\n</ul>\n<h2 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h2><h3 id=\"后台\"><a href=\"#后台\" class=\"headerlink\" title=\"后台\"></a>后台</h3><p>当后台对前端发来的请求进行响应时，可以在响应头部设置Set-Cookie字段添加cookie<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set-Cookie：key=value;domain=example.com;path=/</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h3><p>操作document.cookie<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.cookie=&apos;key=value;domain=example.com;path=/&apos;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"共享\"><a href=\"#共享\" class=\"headerlink\" title=\"共享\"></a>共享</h2><h3 id=\"端口不同\"><a href=\"#端口不同\" class=\"headerlink\" title=\"端口不同\"></a>端口不同</h3><p>端口不同，cookie也是共享的。例如：<br>在<a href=\"http://example.com:3000\" target=\"_blank\" rel=\"noopener\">http://example.com:3000</a> 上设置的cookie，能被<a href=\"http://example.com:5000\" target=\"_blank\" rel=\"noopener\">http://example.com:5000</a> 访问到。</p>\n<h3 id=\"同域名，但路径不同\"><a href=\"#同域名，但路径不同\" class=\"headerlink\" title=\"同域名，但路径不同\"></a>同域名，但路径不同</h3><p>同域名下，对cookie的path的字段进行设置，则其他页面在此path路径上的才能被访问到。例如：<br>在<a href=\"http://example.com:3000/a/b/\" target=\"_blank\" rel=\"noopener\">http://example.com:3000/a/b/</a> 上设置了cookie，该cookie的path为<strong>/a/b</strong>,则<a href=\"http://example.com:3000/a/c/是访问不到的。需要设置cookie时，把path字段改为**/a**或者**/**。\" target=\"_blank\" rel=\"noopener\">http://example.com:3000/a/c/是访问不到的。需要设置cookie时，把path字段改为**/a**或者**/**。</a></p>\n<h3 id=\"父域名和子域名共享\"><a href=\"#父域名和子域名共享\" class=\"headerlink\" title=\"父域名和子域名共享\"></a>父域名和子域名共享</h3><p>和设置path类似，可以修改cookie的domain字段，同时也要符合path的要求，则可以共享cookie。例如：<br>在<a href=\"http://www.example.com:3000/上设置cookie的domamin为**example.com**,path一般设为**/**,则http://example.com/可以访问到该cookie\" target=\"_blank\" rel=\"noopener\">http://www.example.com:3000/上设置cookie的domamin为**example.com**,path一般设为**/**,则http://example.com/可以访问到该cookie</a>.</p>\n"},{"title":"event","date":"2017-04-12T13:13:58.000Z","_content":"## 事件代理\nelement.on(event,selector,callback)\n\n+ 真实target和element之间存在selector才触发代理\n+ element.addEventListener(event,proxyFn,captureSetting)\n+ proxyFn中创建event对象(newEvent)\npreventDefault()、stopImmediatePropagation()、stopPropagation()方法都会间接调用真实event对象的\n+ proxyFn中触发callback\ncallback.apply(element,newEvent)\n\n## event对象\n+ currentTarget 当前绑定事件的元素\n+ target/srcElement 事件发生的最底层的元素\n\n\n### 注意\n+ // emulate mouseenter, mouseleave\n\n\n","source":"_drafts/event.md","raw":"---\ntitle: event\ndate: 2017-04-12 21:13:58\ntags:\n---\n## 事件代理\nelement.on(event,selector,callback)\n\n+ 真实target和element之间存在selector才触发代理\n+ element.addEventListener(event,proxyFn,captureSetting)\n+ proxyFn中创建event对象(newEvent)\npreventDefault()、stopImmediatePropagation()、stopPropagation()方法都会间接调用真实event对象的\n+ proxyFn中触发callback\ncallback.apply(element,newEvent)\n\n## event对象\n+ currentTarget 当前绑定事件的元素\n+ target/srcElement 事件发生的最底层的元素\n\n\n### 注意\n+ // emulate mouseenter, mouseleave\n\n\n","slug":"event","published":0,"updated":"2017-09-22T02:19:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymstemk00067nwfmfvyfzlz","content":"<h2 id=\"事件代理\"><a href=\"#事件代理\" class=\"headerlink\" title=\"事件代理\"></a>事件代理</h2><p>element.on(event,selector,callback)</p>\n<ul>\n<li>真实target和element之间存在selector才触发代理</li>\n<li>element.addEventListener(event,proxyFn,captureSetting)</li>\n<li>proxyFn中创建event对象(newEvent)<br>preventDefault()、stopImmediatePropagation()、stopPropagation()方法都会间接调用真实event对象的</li>\n<li>proxyFn中触发callback<br>callback.apply(element,newEvent)</li>\n</ul>\n<h2 id=\"event对象\"><a href=\"#event对象\" class=\"headerlink\" title=\"event对象\"></a>event对象</h2><ul>\n<li>currentTarget 当前绑定事件的元素</li>\n<li>target/srcElement 事件发生的最底层的元素</li>\n</ul>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><ul>\n<li>// emulate mouseenter, mouseleave</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"事件代理\"><a href=\"#事件代理\" class=\"headerlink\" title=\"事件代理\"></a>事件代理</h2><p>element.on(event,selector,callback)</p>\n<ul>\n<li>真实target和element之间存在selector才触发代理</li>\n<li>element.addEventListener(event,proxyFn,captureSetting)</li>\n<li>proxyFn中创建event对象(newEvent)<br>preventDefault()、stopImmediatePropagation()、stopPropagation()方法都会间接调用真实event对象的</li>\n<li>proxyFn中触发callback<br>callback.apply(element,newEvent)</li>\n</ul>\n<h2 id=\"event对象\"><a href=\"#event对象\" class=\"headerlink\" title=\"event对象\"></a>event对象</h2><ul>\n<li>currentTarget 当前绑定事件的元素</li>\n<li>target/srcElement 事件发生的最底层的元素</li>\n</ul>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><ul>\n<li>// emulate mouseenter, mouseleave</li>\n</ul>\n"},{"title":"es6","date":"2017-05-17T14:14:02.000Z","_content":"[JS 开发者必须知道的十个 ES6 新特性](http://web.jobbole.com/87140/)\n\n[ES6/ECMAScript2015 Cheatsheet](https://github.com/azat-co/cheatsheets/tree/master/es6)\n\n\n\n\n\n","source":"_drafts/es6.md","raw":"---\ntitle: es6\ndate: 2017-05-17 22:14:02\ntags:\n---\n[JS 开发者必须知道的十个 ES6 新特性](http://web.jobbole.com/87140/)\n\n[ES6/ECMAScript2015 Cheatsheet](https://github.com/azat-co/cheatsheets/tree/master/es6)\n\n\n\n\n\n","slug":"es6","published":0,"updated":"2017-09-22T02:19:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymstemk00077nwfl71uk5e4","content":"<p><a href=\"http://web.jobbole.com/87140/\" target=\"_blank\" rel=\"noopener\">JS 开发者必须知道的十个 ES6 新特性</a></p>\n<p><a href=\"https://github.com/azat-co/cheatsheets/tree/master/es6\" target=\"_blank\" rel=\"noopener\">ES6/ECMAScript2015 Cheatsheet</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://web.jobbole.com/87140/\" target=\"_blank\" rel=\"noopener\">JS 开发者必须知道的十个 ES6 新特性</a></p>\n<p><a href=\"https://github.com/azat-co/cheatsheets/tree/master/es6\" target=\"_blank\" rel=\"noopener\">ES6/ECMAScript2015 Cheatsheet</a></p>\n"},{"title":"git学习","date":"2016-12-02T02:13:45.000Z","_content":"\n## 传统的VCS和git的区别\n\n## 三种状态和对应的三个工作区域\n### 状态\n+ modified\n+ staged\n+ committed\n### 区域\n+ 工作区域\n+ 暂存区域\n+ 本地仓库\n\n## 配置文件的三个位置\n\n+ /etc/gitconfig\n+ ~/.gitconfig或者~/.config/git/config\n+ .git/config\n\n范围小的会覆盖范围大的配置\n\n```\ngit config --list\ngit config user.name \"John Doe\"    //可添加指定修改哪个范围的，目前当前目录下的配置。--system、--global\n```\n## 忽略文件（不纳入git管理）\n在项目目录下，添加.gitignore文件，可指定忽略的文件，内容格式为：\n1、所有空行或者以 # 开头的行都会被 Git 忽略。\n2、可以使用标准的 glob 模式匹配。（ shell 所使用的简化了的正则表达式）。\n3、匹配模式可以以( / )开头防止递归。\n4、匹配模式可以以( / )结尾指定目录。 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号( ! )取反。\n\n\n## 常用命令操作\n\n+ 现有目录或者项目使用git\n```\ngit init\n```\n\n+ 克隆仓库\n```\ngit clone https://github.com/test/test.git\n```\n\n+ 检查当前文件状态\n```\ngit status\n```\n\n+ 跟踪新文件或者暂存已修改文件\n```\ngit add xxx   //xxx可以是文件或者文件夹路径，相对于当前目录\n```\n\n+ 撤销修改\n1、撤销工作区域的修改\n```\ngit reset --hard HEAD\n```\n2、撤销工作区域某个文件的修改\n```\ngit checkout HEAD <file>\n```\n3、撤销暂存区域的某个文件的修改\n\n```\ngit reset HEAD <file>\n```\n4、合并上一次提交\n```\ngit commit --amend\n```\n+ 删除文件\n1、删除工作区域的文件\n```\ngit rm <file>\n```\n2、删除已经在暂存区的文件\n```\ngit rm --cached <file>\n```\n\n+ 移动文件\n```\ngit mv <file> <file>\n```\n\n+ 查看提交历史\n```\ngit log\ngit log -p -<number>\ngit log --stat\ngit log --pretty=<option>\n```\n\n\n","source":"_drafts/git-learn.md","raw":"---\ntitle: git学习 \ndate: 2016-12-02 10:13:45\ntags:\n---\n\n## 传统的VCS和git的区别\n\n## 三种状态和对应的三个工作区域\n### 状态\n+ modified\n+ staged\n+ committed\n### 区域\n+ 工作区域\n+ 暂存区域\n+ 本地仓库\n\n## 配置文件的三个位置\n\n+ /etc/gitconfig\n+ ~/.gitconfig或者~/.config/git/config\n+ .git/config\n\n范围小的会覆盖范围大的配置\n\n```\ngit config --list\ngit config user.name \"John Doe\"    //可添加指定修改哪个范围的，目前当前目录下的配置。--system、--global\n```\n## 忽略文件（不纳入git管理）\n在项目目录下，添加.gitignore文件，可指定忽略的文件，内容格式为：\n1、所有空行或者以 # 开头的行都会被 Git 忽略。\n2、可以使用标准的 glob 模式匹配。（ shell 所使用的简化了的正则表达式）。\n3、匹配模式可以以( / )开头防止递归。\n4、匹配模式可以以( / )结尾指定目录。 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号( ! )取反。\n\n\n## 常用命令操作\n\n+ 现有目录或者项目使用git\n```\ngit init\n```\n\n+ 克隆仓库\n```\ngit clone https://github.com/test/test.git\n```\n\n+ 检查当前文件状态\n```\ngit status\n```\n\n+ 跟踪新文件或者暂存已修改文件\n```\ngit add xxx   //xxx可以是文件或者文件夹路径，相对于当前目录\n```\n\n+ 撤销修改\n1、撤销工作区域的修改\n```\ngit reset --hard HEAD\n```\n2、撤销工作区域某个文件的修改\n```\ngit checkout HEAD <file>\n```\n3、撤销暂存区域的某个文件的修改\n\n```\ngit reset HEAD <file>\n```\n4、合并上一次提交\n```\ngit commit --amend\n```\n+ 删除文件\n1、删除工作区域的文件\n```\ngit rm <file>\n```\n2、删除已经在暂存区的文件\n```\ngit rm --cached <file>\n```\n\n+ 移动文件\n```\ngit mv <file> <file>\n```\n\n+ 查看提交历史\n```\ngit log\ngit log -p -<number>\ngit log --stat\ngit log --pretty=<option>\n```\n\n\n","slug":"git-learn","published":0,"updated":"2017-09-22T02:19:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymsteml00087nwfhrmmh41w","content":"<h2 id=\"传统的VCS和git的区别\"><a href=\"#传统的VCS和git的区别\" class=\"headerlink\" title=\"传统的VCS和git的区别\"></a>传统的VCS和git的区别</h2><h2 id=\"三种状态和对应的三个工作区域\"><a href=\"#三种状态和对应的三个工作区域\" class=\"headerlink\" title=\"三种状态和对应的三个工作区域\"></a>三种状态和对应的三个工作区域</h2><h3 id=\"状态\"><a href=\"#状态\" class=\"headerlink\" title=\"状态\"></a>状态</h3><ul>\n<li>modified</li>\n<li>staged</li>\n<li>committed<h3 id=\"区域\"><a href=\"#区域\" class=\"headerlink\" title=\"区域\"></a>区域</h3></li>\n<li>工作区域</li>\n<li>暂存区域</li>\n<li>本地仓库</li>\n</ul>\n<h2 id=\"配置文件的三个位置\"><a href=\"#配置文件的三个位置\" class=\"headerlink\" title=\"配置文件的三个位置\"></a>配置文件的三个位置</h2><ul>\n<li>/etc/gitconfig</li>\n<li>~/.gitconfig或者~/.config/git/config</li>\n<li>.git/config</li>\n</ul>\n<p>范围小的会覆盖范围大的配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --list</span><br><span class=\"line\">git config user.name &quot;John Doe&quot;    //可添加指定修改哪个范围的，目前当前目录下的配置。--system、--global</span><br></pre></td></tr></table></figure>\n<h2 id=\"忽略文件（不纳入git管理）\"><a href=\"#忽略文件（不纳入git管理）\" class=\"headerlink\" title=\"忽略文件（不纳入git管理）\"></a>忽略文件（不纳入git管理）</h2><p>在项目目录下，添加.gitignore文件，可指定忽略的文件，内容格式为：<br>1、所有空行或者以 # 开头的行都会被 Git 忽略。<br>2、可以使用标准的 glob 模式匹配。（ shell 所使用的简化了的正则表达式）。<br>3、匹配模式可以以( / )开头防止递归。<br>4、匹配模式可以以( / )结尾指定目录。 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号( ! )取反。</p>\n<h2 id=\"常用命令操作\"><a href=\"#常用命令操作\" class=\"headerlink\" title=\"常用命令操作\"></a>常用命令操作</h2><ul>\n<li><p>现有目录或者项目使用git</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>克隆仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/test/test.git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>检查当前文件状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>跟踪新文件或者暂存已修改文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add xxx   //xxx可以是文件或者文件夹路径，相对于当前目录</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>撤销修改<br>1、撤销工作区域的修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>2、撤销工作区域某个文件的修改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure></p>\n<p>3、撤销暂存区域的某个文件的修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure>\n<p>4、合并上一次提交<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit --amend</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>删除文件<br>1、删除工作区域的文件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm &lt;file&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>2、删除已经在暂存区的文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm --cached &lt;file&gt;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>移动文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git mv &lt;file&gt; &lt;file&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看提交历史</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log</span><br><span class=\"line\">git log -p -&lt;number&gt;</span><br><span class=\"line\">git log --stat</span><br><span class=\"line\">git log --pretty=&lt;option&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"传统的VCS和git的区别\"><a href=\"#传统的VCS和git的区别\" class=\"headerlink\" title=\"传统的VCS和git的区别\"></a>传统的VCS和git的区别</h2><h2 id=\"三种状态和对应的三个工作区域\"><a href=\"#三种状态和对应的三个工作区域\" class=\"headerlink\" title=\"三种状态和对应的三个工作区域\"></a>三种状态和对应的三个工作区域</h2><h3 id=\"状态\"><a href=\"#状态\" class=\"headerlink\" title=\"状态\"></a>状态</h3><ul>\n<li>modified</li>\n<li>staged</li>\n<li>committed<h3 id=\"区域\"><a href=\"#区域\" class=\"headerlink\" title=\"区域\"></a>区域</h3></li>\n<li>工作区域</li>\n<li>暂存区域</li>\n<li>本地仓库</li>\n</ul>\n<h2 id=\"配置文件的三个位置\"><a href=\"#配置文件的三个位置\" class=\"headerlink\" title=\"配置文件的三个位置\"></a>配置文件的三个位置</h2><ul>\n<li>/etc/gitconfig</li>\n<li>~/.gitconfig或者~/.config/git/config</li>\n<li>.git/config</li>\n</ul>\n<p>范围小的会覆盖范围大的配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --list</span><br><span class=\"line\">git config user.name &quot;John Doe&quot;    //可添加指定修改哪个范围的，目前当前目录下的配置。--system、--global</span><br></pre></td></tr></table></figure>\n<h2 id=\"忽略文件（不纳入git管理）\"><a href=\"#忽略文件（不纳入git管理）\" class=\"headerlink\" title=\"忽略文件（不纳入git管理）\"></a>忽略文件（不纳入git管理）</h2><p>在项目目录下，添加.gitignore文件，可指定忽略的文件，内容格式为：<br>1、所有空行或者以 # 开头的行都会被 Git 忽略。<br>2、可以使用标准的 glob 模式匹配。（ shell 所使用的简化了的正则表达式）。<br>3、匹配模式可以以( / )开头防止递归。<br>4、匹配模式可以以( / )结尾指定目录。 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号( ! )取反。</p>\n<h2 id=\"常用命令操作\"><a href=\"#常用命令操作\" class=\"headerlink\" title=\"常用命令操作\"></a>常用命令操作</h2><ul>\n<li><p>现有目录或者项目使用git</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>克隆仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/test/test.git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>检查当前文件状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>跟踪新文件或者暂存已修改文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add xxx   //xxx可以是文件或者文件夹路径，相对于当前目录</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>撤销修改<br>1、撤销工作区域的修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>2、撤销工作区域某个文件的修改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure></p>\n<p>3、撤销暂存区域的某个文件的修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure>\n<p>4、合并上一次提交<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit --amend</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>删除文件<br>1、删除工作区域的文件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm &lt;file&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>2、删除已经在暂存区的文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm --cached &lt;file&gt;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>移动文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git mv &lt;file&gt; &lt;file&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看提交历史</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log</span><br><span class=\"line\">git log -p -&lt;number&gt;</span><br><span class=\"line\">git log --stat</span><br><span class=\"line\">git log --pretty=&lt;option&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"git-problem","_content":"\n## 查看状态\n```\ngit status\n```\n## 查看分支\n```\ngit  branch  -a   //展示本地和远程分支\n```\n## 撤销\n```\ngit reset HEAD <file>    //撤销提交到暂存的\n```\n\n| 指令           | 优势        | 缺点                                       | 描述                           | 例子                    |\n| ------------ | --------- | ---------------------------------------- | ---------------------------- | --------------------- |\n| git reset    | 操作简单方便    | 会重写当前分支的历史                               | 同时移动分支末端和HEAD                | git reset  <commit>   |\n| git revert   | 不丢失历史记录   | 容易出现冲突                                   | 创建新commit（把旧内容当成新修改，来达到撤销目的） | git revert <commit>   |\n| git checkout | 便于快速查看旧版本 | 出现分离的 HEAD。 移动HEAD后，最好在此创建新分支再提交。以免提交丢失。 | 移动HEAD                       | Git checkout <commit> |\n\n\n\n## 提交\n\n```\ngit commit -m xxx    //xxx要填写的信息\n```\n## 推送\n```\ngit push --set-upstream origin develop\n```\n\n## 新建分支\n```bash\ngit checkout -b <branch> <start position>  //<branch>是你新分支名称；<start position>是原分支提交的hash值\n```\n\n## 拉远程分支\n```\ngit checkout -t origin/2.0.0\n```\n\n## 删除分支\n```\ngit branch -D xxxx    //删除本地\ngit push origin :xxx  //推送到远程\n```\n## git clone 指定哪个ssh key\n在config文件配置好了,假设name为test\n```\ngit clone git@test:xxxx.git\n```\n\n## 删除在本地有但在远程库中已经不存在的分支\n\nhttps://blog.csdn.net/sgs595595/article/details/72480346\n```\ngit remote prune origin\n```\n\n## 创建SSH key\n```\nssh-keygen -t rsa\n```\nhttp://blog.zdakang.com/2017/05/10/ssh-authorize/\n\n## 配置指令\n```\ngit config --system --list  // 查看\ngit config --system --list  // 查看系统的\ngit config --global  --list  // 查看该用户的\ngit config --local  --list  // 查看当前仓库的\n\ngit config --local xxx.xxx \"xxxx\" // 修复当前仓库的\n```\nhttps://www.cnblogs.com/merray/p/6006411.html","source":"_drafts/git-problem.md","raw":"---\ntitle: git-problem\ntags:\n---\n\n## 查看状态\n```\ngit status\n```\n## 查看分支\n```\ngit  branch  -a   //展示本地和远程分支\n```\n## 撤销\n```\ngit reset HEAD <file>    //撤销提交到暂存的\n```\n\n| 指令           | 优势        | 缺点                                       | 描述                           | 例子                    |\n| ------------ | --------- | ---------------------------------------- | ---------------------------- | --------------------- |\n| git reset    | 操作简单方便    | 会重写当前分支的历史                               | 同时移动分支末端和HEAD                | git reset  <commit>   |\n| git revert   | 不丢失历史记录   | 容易出现冲突                                   | 创建新commit（把旧内容当成新修改，来达到撤销目的） | git revert <commit>   |\n| git checkout | 便于快速查看旧版本 | 出现分离的 HEAD。 移动HEAD后，最好在此创建新分支再提交。以免提交丢失。 | 移动HEAD                       | Git checkout <commit> |\n\n\n\n## 提交\n\n```\ngit commit -m xxx    //xxx要填写的信息\n```\n## 推送\n```\ngit push --set-upstream origin develop\n```\n\n## 新建分支\n```bash\ngit checkout -b <branch> <start position>  //<branch>是你新分支名称；<start position>是原分支提交的hash值\n```\n\n## 拉远程分支\n```\ngit checkout -t origin/2.0.0\n```\n\n## 删除分支\n```\ngit branch -D xxxx    //删除本地\ngit push origin :xxx  //推送到远程\n```\n## git clone 指定哪个ssh key\n在config文件配置好了,假设name为test\n```\ngit clone git@test:xxxx.git\n```\n\n## 删除在本地有但在远程库中已经不存在的分支\n\nhttps://blog.csdn.net/sgs595595/article/details/72480346\n```\ngit remote prune origin\n```\n\n## 创建SSH key\n```\nssh-keygen -t rsa\n```\nhttp://blog.zdakang.com/2017/05/10/ssh-authorize/\n\n## 配置指令\n```\ngit config --system --list  // 查看\ngit config --system --list  // 查看系统的\ngit config --global  --list  // 查看该用户的\ngit config --local  --list  // 查看当前仓库的\n\ngit config --local xxx.xxx \"xxxx\" // 修复当前仓库的\n```\nhttps://www.cnblogs.com/merray/p/6006411.html","slug":"git-problem","published":0,"date":"2018-01-14T10:52:35.000Z","updated":"2018-07-12T11:28:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymstemm00097nwf4cdnz9do","content":"<h2 id=\"查看状态\"><a href=\"#查看状态\" class=\"headerlink\" title=\"查看状态\"></a>查看状态</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看分支\"><a href=\"#查看分支\" class=\"headerlink\" title=\"查看分支\"></a>查看分支</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git  branch  -a   //展示本地和远程分支</span><br></pre></td></tr></table></figure>\n<h2 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset HEAD &lt;file&gt;    //撤销提交到暂存的</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>优势</th>\n<th>缺点</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>git reset</td>\n<td>操作简单方便</td>\n<td>会重写当前分支的历史</td>\n<td>同时移动分支末端和HEAD</td>\n<td>git reset  <commit></commit></td>\n</tr>\n<tr>\n<td>git revert</td>\n<td>不丢失历史记录</td>\n<td>容易出现冲突</td>\n<td>创建新commit（把旧内容当成新修改，来达到撤销目的）</td>\n<td>git revert <commit></commit></td>\n</tr>\n<tr>\n<td>git checkout</td>\n<td>便于快速查看旧版本</td>\n<td>出现分离的 HEAD。 移动HEAD后，最好在此创建新分支再提交。以免提交丢失。</td>\n<td>移动HEAD</td>\n<td>Git checkout <commit></commit></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m xxx    //xxx要填写的信息</span><br></pre></td></tr></table></figure>\n<h2 id=\"推送\"><a href=\"#推送\" class=\"headerlink\" title=\"推送\"></a>推送</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push --set-upstream origin develop</span><br></pre></td></tr></table></figure>\n<h2 id=\"新建分支\"><a href=\"#新建分支\" class=\"headerlink\" title=\"新建分支\"></a>新建分支</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b &lt;branch&gt; &lt;start position&gt;  //&lt;branch&gt;是你新分支名称；&lt;start position&gt;是原分支提交的<span class=\"built_in\">hash</span>值</span><br></pre></td></tr></table></figure>\n<h2 id=\"拉远程分支\"><a href=\"#拉远程分支\" class=\"headerlink\" title=\"拉远程分支\"></a>拉远程分支</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -t origin/2.0.0</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -D xxxx    //删除本地</span><br><span class=\"line\">git push origin :xxx  //推送到远程</span><br></pre></td></tr></table></figure>\n<h2 id=\"git-clone-指定哪个ssh-key\"><a href=\"#git-clone-指定哪个ssh-key\" class=\"headerlink\" title=\"git clone 指定哪个ssh key\"></a>git clone 指定哪个ssh key</h2><p>在config文件配置好了,假设name为test<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@test:xxxx.git</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"删除在本地有但在远程库中已经不存在的分支\"><a href=\"#删除在本地有但在远程库中已经不存在的分支\" class=\"headerlink\" title=\"删除在本地有但在远程库中已经不存在的分支\"></a>删除在本地有但在远程库中已经不存在的分支</h2><p><a href=\"https://blog.csdn.net/sgs595595/article/details/72480346\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/sgs595595/article/details/72480346</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote prune origin</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"创建SSH-key\"><a href=\"#创建SSH-key\" class=\"headerlink\" title=\"创建SSH key\"></a>创建SSH key</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://blog.zdakang.com/2017/05/10/ssh-authorize/\" target=\"_blank\" rel=\"noopener\">http://blog.zdakang.com/2017/05/10/ssh-authorize/</a></p>\n<h2 id=\"配置指令\"><a href=\"#配置指令\" class=\"headerlink\" title=\"配置指令\"></a>配置指令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --system --list  // 查看</span><br><span class=\"line\">git config --system --list  // 查看系统的</span><br><span class=\"line\">git config --global  --list  // 查看该用户的</span><br><span class=\"line\">git config --local  --list  // 查看当前仓库的</span><br><span class=\"line\"></span><br><span class=\"line\">git config --local xxx.xxx &quot;xxxx&quot; // 修复当前仓库的</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.cnblogs.com/merray/p/6006411.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/merray/p/6006411.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"查看状态\"><a href=\"#查看状态\" class=\"headerlink\" title=\"查看状态\"></a>查看状态</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看分支\"><a href=\"#查看分支\" class=\"headerlink\" title=\"查看分支\"></a>查看分支</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git  branch  -a   //展示本地和远程分支</span><br></pre></td></tr></table></figure>\n<h2 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset HEAD &lt;file&gt;    //撤销提交到暂存的</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>优势</th>\n<th>缺点</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>git reset</td>\n<td>操作简单方便</td>\n<td>会重写当前分支的历史</td>\n<td>同时移动分支末端和HEAD</td>\n<td>git reset  <commit></commit></td>\n</tr>\n<tr>\n<td>git revert</td>\n<td>不丢失历史记录</td>\n<td>容易出现冲突</td>\n<td>创建新commit（把旧内容当成新修改，来达到撤销目的）</td>\n<td>git revert <commit></commit></td>\n</tr>\n<tr>\n<td>git checkout</td>\n<td>便于快速查看旧版本</td>\n<td>出现分离的 HEAD。 移动HEAD后，最好在此创建新分支再提交。以免提交丢失。</td>\n<td>移动HEAD</td>\n<td>Git checkout <commit></commit></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m xxx    //xxx要填写的信息</span><br></pre></td></tr></table></figure>\n<h2 id=\"推送\"><a href=\"#推送\" class=\"headerlink\" title=\"推送\"></a>推送</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push --set-upstream origin develop</span><br></pre></td></tr></table></figure>\n<h2 id=\"新建分支\"><a href=\"#新建分支\" class=\"headerlink\" title=\"新建分支\"></a>新建分支</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b &lt;branch&gt; &lt;start position&gt;  //&lt;branch&gt;是你新分支名称；&lt;start position&gt;是原分支提交的<span class=\"built_in\">hash</span>值</span><br></pre></td></tr></table></figure>\n<h2 id=\"拉远程分支\"><a href=\"#拉远程分支\" class=\"headerlink\" title=\"拉远程分支\"></a>拉远程分支</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -t origin/2.0.0</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -D xxxx    //删除本地</span><br><span class=\"line\">git push origin :xxx  //推送到远程</span><br></pre></td></tr></table></figure>\n<h2 id=\"git-clone-指定哪个ssh-key\"><a href=\"#git-clone-指定哪个ssh-key\" class=\"headerlink\" title=\"git clone 指定哪个ssh key\"></a>git clone 指定哪个ssh key</h2><p>在config文件配置好了,假设name为test<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@test:xxxx.git</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"删除在本地有但在远程库中已经不存在的分支\"><a href=\"#删除在本地有但在远程库中已经不存在的分支\" class=\"headerlink\" title=\"删除在本地有但在远程库中已经不存在的分支\"></a>删除在本地有但在远程库中已经不存在的分支</h2><p><a href=\"https://blog.csdn.net/sgs595595/article/details/72480346\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/sgs595595/article/details/72480346</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote prune origin</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"创建SSH-key\"><a href=\"#创建SSH-key\" class=\"headerlink\" title=\"创建SSH key\"></a>创建SSH key</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://blog.zdakang.com/2017/05/10/ssh-authorize/\" target=\"_blank\" rel=\"noopener\">http://blog.zdakang.com/2017/05/10/ssh-authorize/</a></p>\n<h2 id=\"配置指令\"><a href=\"#配置指令\" class=\"headerlink\" title=\"配置指令\"></a>配置指令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --system --list  // 查看</span><br><span class=\"line\">git config --system --list  // 查看系统的</span><br><span class=\"line\">git config --global  --list  // 查看该用户的</span><br><span class=\"line\">git config --local  --list  // 查看当前仓库的</span><br><span class=\"line\"></span><br><span class=\"line\">git config --local xxx.xxx &quot;xxxx&quot; // 修复当前仓库的</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.cnblogs.com/merray/p/6006411.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/merray/p/6006411.html</a></p>\n"},{"title":"h5-guide","date":"2017-09-03T03:26:09.000Z","_content":"\n## CSS\n\n+ 盒子模型\n+ 定位（static、\brelative、fixed）和文档流\n+ \b清除浮动\n+ 选择器的权重\n+ em和rem\n+ css3动画\n+ 了解fle\bx布局\n+ 了解响应式布局\n+ 了解css预处理器（stylusStylus、Sass、less）\n\n## HTML\n+ 大概过一遍有哪些标签\n+ 了解下\b页面元素（img、script、link等）加载过程\n\n## JavaScript\n+ 基本数据类型\n+ this\n+ 闭包\n+ 数组的常用方法\n+ 事件的几个阶段（捕获、目标、冒泡\b）和常见的几个事件类型\n+ cookie\n+ sessionStorage和localStorage\n+ setTimeout 和 setInternal\n+ 正则表达式\n+ ES6新特性和语法（let，解构赋值、promise等）\n+ 了解和使用过vue、react、angular等\b主流库或框架中的\b一种（比较多关注的\b还是vue和react）\n+ 了解下\b构建打包（gulp、rollup、webpack）\n\n## 网络\n+ http协议\n数据报文结构；常见状态码（200、301、302、304、403、404、500等）,尤其304\n+ tcp三次握手大概过程\n+ 缓存。expires、etag,\bcache-control等头部字段。\n\n\n## 实战\n+ \b\b水平和垂直居中\n+ 获取浏览器URL中查询字符串参数\n例如：https://www.baidu.com?word=hello,写一方法，传入word返回hello\n\n## 其他\n+ 跨域(很重要)\n+ 前端性能优化有哪些（\bgzip、css sprites等）\n+ 安全相关（XSS和CSRF）\n\n\n\n\n\n\n","source":"_drafts/h5-guide.md","raw":"---\ntitle: h5-guide\ndate: 2017-09-03 11:26:09\ntags:\n---\n\n## CSS\n\n+ 盒子模型\n+ 定位（static、\brelative、fixed）和文档流\n+ \b清除浮动\n+ 选择器的权重\n+ em和rem\n+ css3动画\n+ 了解fle\bx布局\n+ 了解响应式布局\n+ 了解css预处理器（stylusStylus、Sass、less）\n\n## HTML\n+ 大概过一遍有哪些标签\n+ 了解下\b页面元素（img、script、link等）加载过程\n\n## JavaScript\n+ 基本数据类型\n+ this\n+ 闭包\n+ 数组的常用方法\n+ 事件的几个阶段（捕获、目标、冒泡\b）和常见的几个事件类型\n+ cookie\n+ sessionStorage和localStorage\n+ setTimeout 和 setInternal\n+ 正则表达式\n+ ES6新特性和语法（let，解构赋值、promise等）\n+ 了解和使用过vue、react、angular等\b主流库或框架中的\b一种（比较多关注的\b还是vue和react）\n+ 了解下\b构建打包（gulp、rollup、webpack）\n\n## 网络\n+ http协议\n数据报文结构；常见状态码（200、301、302、304、403、404、500等）,尤其304\n+ tcp三次握手大概过程\n+ 缓存。expires、etag,\bcache-control等头部字段。\n\n\n## 实战\n+ \b\b水平和垂直居中\n+ 获取浏览器URL中查询字符串参数\n例如：https://www.baidu.com?word=hello,写一方法，传入word返回hello\n\n## 其他\n+ 跨域(很重要)\n+ 前端性能优化有哪些（\bgzip、css sprites等）\n+ 安全相关（XSS和CSRF）\n\n\n\n\n\n\n","slug":"h5-guide","published":0,"updated":"2017-09-22T02:19:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymstemn000a7nwfq8ezmmq3","content":"<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><ul>\n<li>盒子模型</li>\n<li>定位（static、\brelative、fixed）和文档流</li>\n<li>\b清除浮动</li>\n<li>选择器的权重</li>\n<li>em和rem</li>\n<li>css3动画</li>\n<li>了解fle\bx布局</li>\n<li>了解响应式布局</li>\n<li>了解css预处理器（stylusStylus、Sass、less）</li>\n</ul>\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><ul>\n<li>大概过一遍有哪些标签</li>\n<li>了解下\b页面元素（img、script、link等）加载过程</li>\n</ul>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><ul>\n<li>基本数据类型</li>\n<li>this</li>\n<li>闭包</li>\n<li>数组的常用方法</li>\n<li>事件的几个阶段（捕获、目标、冒泡\b）和常见的几个事件类型</li>\n<li>cookie</li>\n<li>sessionStorage和localStorage</li>\n<li>setTimeout 和 setInternal</li>\n<li>正则表达式</li>\n<li>ES6新特性和语法（let，解构赋值、promise等）</li>\n<li>了解和使用过vue、react、angular等\b主流库或框架中的\b一种（比较多关注的\b还是vue和react）</li>\n<li>了解下\b构建打包（gulp、rollup、webpack）</li>\n</ul>\n<h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2><ul>\n<li>http协议<br>数据报文结构；常见状态码（200、301、302、304、403、404、500等）,尤其304</li>\n<li>tcp三次握手大概过程</li>\n<li>缓存。expires、etag,\bcache-control等头部字段。</li>\n</ul>\n<h2 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h2><ul>\n<li>\b\b水平和垂直居中</li>\n<li>获取浏览器URL中查询字符串参数<br>例如：<a href=\"https://www.baidu.com?word=hello,写一方法，传入word返回hello\" target=\"_blank\" rel=\"noopener\">https://www.baidu.com?word=hello,写一方法，传入word返回hello</a></li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>跨域(很重要)</li>\n<li>前端性能优化有哪些（\bgzip、css sprites等）</li>\n<li>安全相关（XSS和CSRF）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><ul>\n<li>盒子模型</li>\n<li>定位（static、\brelative、fixed）和文档流</li>\n<li>\b清除浮动</li>\n<li>选择器的权重</li>\n<li>em和rem</li>\n<li>css3动画</li>\n<li>了解fle\bx布局</li>\n<li>了解响应式布局</li>\n<li>了解css预处理器（stylusStylus、Sass、less）</li>\n</ul>\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><ul>\n<li>大概过一遍有哪些标签</li>\n<li>了解下\b页面元素（img、script、link等）加载过程</li>\n</ul>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><ul>\n<li>基本数据类型</li>\n<li>this</li>\n<li>闭包</li>\n<li>数组的常用方法</li>\n<li>事件的几个阶段（捕获、目标、冒泡\b）和常见的几个事件类型</li>\n<li>cookie</li>\n<li>sessionStorage和localStorage</li>\n<li>setTimeout 和 setInternal</li>\n<li>正则表达式</li>\n<li>ES6新特性和语法（let，解构赋值、promise等）</li>\n<li>了解和使用过vue、react、angular等\b主流库或框架中的\b一种（比较多关注的\b还是vue和react）</li>\n<li>了解下\b构建打包（gulp、rollup、webpack）</li>\n</ul>\n<h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2><ul>\n<li>http协议<br>数据报文结构；常见状态码（200、301、302、304、403、404、500等）,尤其304</li>\n<li>tcp三次握手大概过程</li>\n<li>缓存。expires、etag,\bcache-control等头部字段。</li>\n</ul>\n<h2 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h2><ul>\n<li>\b\b水平和垂直居中</li>\n<li>获取浏览器URL中查询字符串参数<br>例如：<a href=\"https://www.baidu.com?word=hello,写一方法，传入word返回hello\" target=\"_blank\" rel=\"noopener\">https://www.baidu.com?word=hello,写一方法，传入word返回hello</a></li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>跨域(很重要)</li>\n<li>前端性能优化有哪些（\bgzip、css sprites等）</li>\n<li>安全相关（XSS和CSRF）</li>\n</ul>\n"},{"title":"hexo-learn","date":"2017-05-30T07:00:04.000Z","_content":"\n## 问题\n+ url绝对路径处理\n使用在_config.yml文件中设置relative_link为true\n使用path或者url变量，把url转为相对路径\n不用css辅助方法\n+ css样式\npackage.json使用hexo-renderer-stylus\n疑惑：是否自动检查文件后缀进行解析\n\n\n","source":"_drafts/hexo-learn.md","raw":"---\ntitle: hexo-learn\ndate: 2017-05-30 15:00:04\ntags:\n---\n\n## 问题\n+ url绝对路径处理\n使用在_config.yml文件中设置relative_link为true\n使用path或者url变量，把url转为相对路径\n不用css辅助方法\n+ css样式\npackage.json使用hexo-renderer-stylus\n疑惑：是否自动检查文件后缀进行解析\n\n\n","slug":"hexo-learn","published":0,"updated":"2017-09-22T02:19:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymstemp000b7nwfplb45c7r","content":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><ul>\n<li>url绝对路径处理<br>使用在_config.yml文件中设置relative_link为true<br>使用path或者url变量，把url转为相对路径<br>不用css辅助方法</li>\n<li>css样式<br>package.json使用hexo-renderer-stylus<br>疑惑：是否自动检查文件后缀进行解析</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><ul>\n<li>url绝对路径处理<br>使用在_config.yml文件中设置relative_link为true<br>使用path或者url变量，把url转为相对路径<br>不用css辅助方法</li>\n<li>css样式<br>package.json使用hexo-renderer-stylus<br>疑惑：是否自动检查文件后缀进行解析</li>\n</ul>\n"},{"title":"interview","date":"2017-04-11T15:06:55.000Z","_content":"## 笔试\n+ 基本类型\n+ 考查作用域\n+ 考查this\n```\nvar a=1;\nvar obj={a:2,t:function(){var a=3;return this.a}};\nalert(obj.t());\nalert((obj.t)())\nvar t=obj.t;\nalert(t())\n```\n+ 画出盒模型，标出属性名和可见width\n+ 创建对象，继承mobile和apple的属性\n```\nfunction mobile(){this.type='手机';}\nfunction apple(){this.model='苹果';}\n```\n+ 写一正则，要求：由大小字母下划线组成的12~20个字符，且大小字母开头\n+ 給一数组unique(Array arr),去重\n+ 写一方法convert(Number nb)，12345可以转为一万两千三百四十五。\n+ 请求头的内容，具体作用\n+ 列出内联标签和块标签\n+ 列出前端优化的方式\n+ 什么是js跨域，原因，如果解决\n+ 赛马\n+ a、b、c单独干分别要8、12、15小时，如果每人轮流干一小时。最后b干了多长时间。\n\n","source":"_drafts/interview.md","raw":"---\ntitle: interview\ndate: 2017-04-11 23:06:55\ntags:\n---\n## 笔试\n+ 基本类型\n+ 考查作用域\n+ 考查this\n```\nvar a=1;\nvar obj={a:2,t:function(){var a=3;return this.a}};\nalert(obj.t());\nalert((obj.t)())\nvar t=obj.t;\nalert(t())\n```\n+ 画出盒模型，标出属性名和可见width\n+ 创建对象，继承mobile和apple的属性\n```\nfunction mobile(){this.type='手机';}\nfunction apple(){this.model='苹果';}\n```\n+ 写一正则，要求：由大小字母下划线组成的12~20个字符，且大小字母开头\n+ 給一数组unique(Array arr),去重\n+ 写一方法convert(Number nb)，12345可以转为一万两千三百四十五。\n+ 请求头的内容，具体作用\n+ 列出内联标签和块标签\n+ 列出前端优化的方式\n+ 什么是js跨域，原因，如果解决\n+ 赛马\n+ a、b、c单独干分别要8、12、15小时，如果每人轮流干一小时。最后b干了多长时间。\n\n","slug":"interview","published":0,"updated":"2017-09-22T02:19:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymstemq000c7nwfaisskkdi","content":"<h2 id=\"笔试\"><a href=\"#笔试\" class=\"headerlink\" title=\"笔试\"></a>笔试</h2><ul>\n<li>基本类型</li>\n<li>考查作用域</li>\n<li><p>考查this</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a=1;</span><br><span class=\"line\">var obj=&#123;a:2,t:function()&#123;var a=3;return this.a&#125;&#125;;</span><br><span class=\"line\">alert(obj.t());</span><br><span class=\"line\">alert((obj.t)())</span><br><span class=\"line\">var t=obj.t;</span><br><span class=\"line\">alert(t())</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>画出盒模型，标出属性名和可见width</p>\n</li>\n<li><p>创建对象，继承mobile和apple的属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function mobile()&#123;this.type=&apos;手机&apos;;&#125;</span><br><span class=\"line\">function apple()&#123;this.model=&apos;苹果&apos;;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>写一正则，要求：由大小字母下划线组成的12~20个字符，且大小字母开头</p>\n</li>\n<li>給一数组unique(Array arr),去重</li>\n<li>写一方法convert(Number nb)，12345可以转为一万两千三百四十五。</li>\n<li>请求头的内容，具体作用</li>\n<li>列出内联标签和块标签</li>\n<li>列出前端优化的方式</li>\n<li>什么是js跨域，原因，如果解决</li>\n<li>赛马</li>\n<li>a、b、c单独干分别要8、12、15小时，如果每人轮流干一小时。最后b干了多长时间。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"笔试\"><a href=\"#笔试\" class=\"headerlink\" title=\"笔试\"></a>笔试</h2><ul>\n<li>基本类型</li>\n<li>考查作用域</li>\n<li><p>考查this</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a=1;</span><br><span class=\"line\">var obj=&#123;a:2,t:function()&#123;var a=3;return this.a&#125;&#125;;</span><br><span class=\"line\">alert(obj.t());</span><br><span class=\"line\">alert((obj.t)())</span><br><span class=\"line\">var t=obj.t;</span><br><span class=\"line\">alert(t())</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>画出盒模型，标出属性名和可见width</p>\n</li>\n<li><p>创建对象，继承mobile和apple的属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function mobile()&#123;this.type=&apos;手机&apos;;&#125;</span><br><span class=\"line\">function apple()&#123;this.model=&apos;苹果&apos;;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>写一正则，要求：由大小字母下划线组成的12~20个字符，且大小字母开头</p>\n</li>\n<li>給一数组unique(Array arr),去重</li>\n<li>写一方法convert(Number nb)，12345可以转为一万两千三百四十五。</li>\n<li>请求头的内容，具体作用</li>\n<li>列出内联标签和块标签</li>\n<li>列出前端优化的方式</li>\n<li>什么是js跨域，原因，如果解决</li>\n<li>赛马</li>\n<li>a、b、c单独干分别要8、12、15小时，如果每人轮流干一小时。最后b干了多长时间。</li>\n</ul>\n"},{"title":"how-vue-render","date":"2017-05-03T14:07:30.000Z","_content":"## vue渲染原理\n+ 模板把model和view关联起来   \n+ 追踪model的变化，更新view   \n追踪变化，通过ES5才支持的Object.defineProperty\n+ 异步更新view   \n异步更新队列缓冲同一事件循环中的数据的变化，在下一次事件循环中更新view.\n\n详细请看：[深入响应式原理](https://cn.vuejs.org/v2/guide/reactivity.html)\n\n","source":"_drafts/how-vue-render.md","raw":"---\ntitle: how-vue-render\ndate: 2017-05-03 22:07:30\ntags:\n---\n## vue渲染原理\n+ 模板把model和view关联起来   \n+ 追踪model的变化，更新view   \n追踪变化，通过ES5才支持的Object.defineProperty\n+ 异步更新view   \n异步更新队列缓冲同一事件循环中的数据的变化，在下一次事件循环中更新view.\n\n详细请看：[深入响应式原理](https://cn.vuejs.org/v2/guide/reactivity.html)\n\n","slug":"how-vue-render","published":0,"updated":"2017-09-22T02:19:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymstemq000d7nwfiu3ogntu","content":"<h2 id=\"vue渲染原理\"><a href=\"#vue渲染原理\" class=\"headerlink\" title=\"vue渲染原理\"></a>vue渲染原理</h2><ul>\n<li>模板把model和view关联起来   </li>\n<li>追踪model的变化，更新view<br>追踪变化，通过ES5才支持的Object.defineProperty</li>\n<li>异步更新view<br>异步更新队列缓冲同一事件循环中的数据的变化，在下一次事件循环中更新view.</li>\n</ul>\n<p>详细请看：<a href=\"https://cn.vuejs.org/v2/guide/reactivity.html\" target=\"_blank\" rel=\"noopener\">深入响应式原理</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"vue渲染原理\"><a href=\"#vue渲染原理\" class=\"headerlink\" title=\"vue渲染原理\"></a>vue渲染原理</h2><ul>\n<li>模板把model和view关联起来   </li>\n<li>追踪model的变化，更新view<br>追踪变化，通过ES5才支持的Object.defineProperty</li>\n<li>异步更新view<br>异步更新队列缓冲同一事件循环中的数据的变化，在下一次事件循环中更新view.</li>\n</ul>\n<p>详细请看：<a href=\"https://cn.vuejs.org/v2/guide/reactivity.html\" target=\"_blank\" rel=\"noopener\">深入响应式原理</a></p>\n"},{"title":"http","date":"2017-05-17T13:44:47.000Z","_content":"## 并行连接\n并行连接对同一域名有限制连接数(一般4个)\n如果客户端带宽不足，并行对性能提升就很小\n\n## 持久连接\nHTTP/1.1（以及HTTP/1.0的各种增强版本）允许http事务处理结束后将TCP连接保持打开状态，为未来http请求重用现存的连接。\n客户端对任何服务器或代理最多维护两条持久连接\n\n### 两种类型\n+ HTTP/1.0+ \"keep-alive\" 连接,默认关闭\n+ HTTP/1.1 \"persistent\"连接,默认打开\n\n## 管道化连接\nHTTP/1.1允许持久连接可选的使用请求管道。在响应到达之前，可以将多条请求放入队列。   \n第一请求发送后，后面的请求也可以发送了。但服务器必须与请求相同的顺序回送HTTP响应。\n\n","source":"_drafts/http.md","raw":"---\ntitle: http\ndate: 2017-05-17 21:44:47\ntags:\n---\n## 并行连接\n并行连接对同一域名有限制连接数(一般4个)\n如果客户端带宽不足，并行对性能提升就很小\n\n## 持久连接\nHTTP/1.1（以及HTTP/1.0的各种增强版本）允许http事务处理结束后将TCP连接保持打开状态，为未来http请求重用现存的连接。\n客户端对任何服务器或代理最多维护两条持久连接\n\n### 两种类型\n+ HTTP/1.0+ \"keep-alive\" 连接,默认关闭\n+ HTTP/1.1 \"persistent\"连接,默认打开\n\n## 管道化连接\nHTTP/1.1允许持久连接可选的使用请求管道。在响应到达之前，可以将多条请求放入队列。   \n第一请求发送后，后面的请求也可以发送了。但服务器必须与请求相同的顺序回送HTTP响应。\n\n","slug":"http","published":0,"updated":"2017-09-22T02:19:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymstemr000e7nwf0i9wx3v8","content":"<h2 id=\"并行连接\"><a href=\"#并行连接\" class=\"headerlink\" title=\"并行连接\"></a>并行连接</h2><p>并行连接对同一域名有限制连接数(一般4个)<br>如果客户端带宽不足，并行对性能提升就很小</p>\n<h2 id=\"持久连接\"><a href=\"#持久连接\" class=\"headerlink\" title=\"持久连接\"></a>持久连接</h2><p>HTTP/1.1（以及HTTP/1.0的各种增强版本）允许http事务处理结束后将TCP连接保持打开状态，为未来http请求重用现存的连接。<br>客户端对任何服务器或代理最多维护两条持久连接</p>\n<h3 id=\"两种类型\"><a href=\"#两种类型\" class=\"headerlink\" title=\"两种类型\"></a>两种类型</h3><ul>\n<li>HTTP/1.0+ “keep-alive” 连接,默认关闭</li>\n<li>HTTP/1.1 “persistent”连接,默认打开</li>\n</ul>\n<h2 id=\"管道化连接\"><a href=\"#管道化连接\" class=\"headerlink\" title=\"管道化连接\"></a>管道化连接</h2><p>HTTP/1.1允许持久连接可选的使用请求管道。在响应到达之前，可以将多条请求放入队列。<br>第一请求发送后，后面的请求也可以发送了。但服务器必须与请求相同的顺序回送HTTP响应。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"并行连接\"><a href=\"#并行连接\" class=\"headerlink\" title=\"并行连接\"></a>并行连接</h2><p>并行连接对同一域名有限制连接数(一般4个)<br>如果客户端带宽不足，并行对性能提升就很小</p>\n<h2 id=\"持久连接\"><a href=\"#持久连接\" class=\"headerlink\" title=\"持久连接\"></a>持久连接</h2><p>HTTP/1.1（以及HTTP/1.0的各种增强版本）允许http事务处理结束后将TCP连接保持打开状态，为未来http请求重用现存的连接。<br>客户端对任何服务器或代理最多维护两条持久连接</p>\n<h3 id=\"两种类型\"><a href=\"#两种类型\" class=\"headerlink\" title=\"两种类型\"></a>两种类型</h3><ul>\n<li>HTTP/1.0+ “keep-alive” 连接,默认关闭</li>\n<li>HTTP/1.1 “persistent”连接,默认打开</li>\n</ul>\n<h2 id=\"管道化连接\"><a href=\"#管道化连接\" class=\"headerlink\" title=\"管道化连接\"></a>管道化连接</h2><p>HTTP/1.1允许持久连接可选的使用请求管道。在响应到达之前，可以将多条请求放入队列。<br>第一请求发送后，后面的请求也可以发送了。但服务器必须与请求相同的顺序回送HTTP响应。</p>\n"},{"title":"keyboard","date":"2017-04-11T17:07:55.000Z","_content":"## 问题\n### 程序上修改value，如果监听\n目前没有找到会触发哪个事件\n#### 解决\nfocus时，计时器(或者刷新函数)检测值是否更改\nblur时，去掉计时器\n\n","source":"_drafts/keyboard.md","raw":"---\ntitle: keyboard\ndate: 2017-04-12 01:07:55\ntags:\n---\n## 问题\n### 程序上修改value，如果监听\n目前没有找到会触发哪个事件\n#### 解决\nfocus时，计时器(或者刷新函数)检测值是否更改\nblur时，去掉计时器\n\n","slug":"keyboard","published":0,"updated":"2017-09-22T02:19:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymstems000f7nwfjjpjz3ip","content":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><h3 id=\"程序上修改value，如果监听\"><a href=\"#程序上修改value，如果监听\" class=\"headerlink\" title=\"程序上修改value，如果监听\"></a>程序上修改value，如果监听</h3><p>目前没有找到会触发哪个事件</p>\n<h4 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h4><p>focus时，计时器(或者刷新函数)检测值是否更改<br>blur时，去掉计时器</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><h3 id=\"程序上修改value，如果监听\"><a href=\"#程序上修改value，如果监听\" class=\"headerlink\" title=\"程序上修改value，如果监听\"></a>程序上修改value，如果监听</h3><p>目前没有找到会触发哪个事件</p>\n<h4 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h4><p>focus时，计时器(或者刷新函数)检测值是否更改<br>blur时，去掉计时器</p>\n"},{"title":"nginx-start","date":"2016-10-24T01:30:32.000Z","_content":"\n\n{\n    \"server\":\"188.166.26.83\",\n    \"server_port\":8388,\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\":1080,\n    \"password\":\"654321\",\n    \"timeout\":300,\n    \"method\":\"aes-256-cfb\",\n    \"fast_open\": false\n}","source":"_drafts/nginx-start.md","raw":"---\ntitle: nginx-start\ndate: 2016-10-24 09:30:32\ntags:\n---\n\n\n{\n    \"server\":\"188.166.26.83\",\n    \"server_port\":8388,\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\":1080,\n    \"password\":\"654321\",\n    \"timeout\":300,\n    \"method\":\"aes-256-cfb\",\n    \"fast_open\": false\n}","slug":"nginx-start","published":0,"updated":"2018-01-14T10:50:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymstemt000g7nwfzihjmc7n","content":"<p>{<br>    “server”:”188.166.26.83”,<br>    “server_port”:8388,<br>    “local_address”: “127.0.0.1”,<br>    “local_port”:1080,<br>    “password”:”654321”,<br>    “timeout”:300,<br>    “method”:”aes-256-cfb”,<br>    “fast_open”: false<br>}</p>\n","site":{"data":{}},"excerpt":"","more":"<p>{<br>    “server”:”188.166.26.83”,<br>    “server_port”:8388,<br>    “local_address”: “127.0.0.1”,<br>    “local_port”:1080,<br>    “password”:”654321”,<br>    “timeout”:300,<br>    “method”:”aes-256-cfb”,<br>    “fast_open”: false<br>}</p>\n"},{"title":"react","date":"2017-04-15T07:57:35.000Z","_content":"## 学习记录\n\n###  webpack2.0 配置加载器的结构改了\n\n+ 多了rules字段\n+ 加载器必须加`-loader`，不能省略了\n\n```javascript\n module: {\n    rules: [{\n      test: /\\.js$/,\n      exclude: /node_modules/,\n      loader: \"babel-loader\"\n    },{\n      test: /\\.css$/, // Only .css files\n      loader: 'style-loader!css-loader' // Run both loaders\n    }]\n  }\n```\n\n## bable加载器配置文件.babelrc\n+ 使用env就好，会判断兼容性，选择合适的语法转换\n+ react有jsx语法，所以也要加上react\n```javascript\n{\n  \"presets\": [\"env\", \"react\"]\n}\n```\n\n","source":"_drafts/react.md","raw":"---\ntitle: react\ndate: 2017-04-15 15:57:35\ntags:\n---\n## 学习记录\n\n###  webpack2.0 配置加载器的结构改了\n\n+ 多了rules字段\n+ 加载器必须加`-loader`，不能省略了\n\n```javascript\n module: {\n    rules: [{\n      test: /\\.js$/,\n      exclude: /node_modules/,\n      loader: \"babel-loader\"\n    },{\n      test: /\\.css$/, // Only .css files\n      loader: 'style-loader!css-loader' // Run both loaders\n    }]\n  }\n```\n\n## bable加载器配置文件.babelrc\n+ 使用env就好，会判断兼容性，选择合适的语法转换\n+ react有jsx语法，所以也要加上react\n```javascript\n{\n  \"presets\": [\"env\", \"react\"]\n}\n```\n\n","slug":"react","published":0,"updated":"2017-09-22T02:19:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymstemu000h7nwfamwp9a5g","content":"<h2 id=\"学习记录\"><a href=\"#学习记录\" class=\"headerlink\" title=\"学习记录\"></a>学习记录</h2><h3 id=\"webpack2-0-配置加载器的结构改了\"><a href=\"#webpack2-0-配置加载器的结构改了\" class=\"headerlink\" title=\"webpack2.0 配置加载器的结构改了\"></a>webpack2.0 配置加载器的结构改了</h3><ul>\n<li>多了rules字段</li>\n<li>加载器必须加<code>-loader</code>，不能省略了</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">   rules: [&#123;</span><br><span class=\"line\">     test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">     exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">     loader: <span class=\"string\">\"babel-loader\"</span></span><br><span class=\"line\">   &#125;,&#123;</span><br><span class=\"line\">     test: <span class=\"regexp\">/\\.css$/</span>, <span class=\"comment\">// Only .css files</span></span><br><span class=\"line\">     loader: <span class=\"string\">'style-loader!css-loader'</span> <span class=\"comment\">// Run both loaders</span></span><br><span class=\"line\">   &#125;]</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"bable加载器配置文件-babelrc\"><a href=\"#bable加载器配置文件-babelrc\" class=\"headerlink\" title=\"bable加载器配置文件.babelrc\"></a>bable加载器配置文件.babelrc</h2><ul>\n<li>使用env就好，会判断兼容性，选择合适的语法转换</li>\n<li>react有jsx语法，所以也要加上react<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"presets\"</span>: [<span class=\"string\">\"env\"</span>, <span class=\"string\">\"react\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"学习记录\"><a href=\"#学习记录\" class=\"headerlink\" title=\"学习记录\"></a>学习记录</h2><h3 id=\"webpack2-0-配置加载器的结构改了\"><a href=\"#webpack2-0-配置加载器的结构改了\" class=\"headerlink\" title=\"webpack2.0 配置加载器的结构改了\"></a>webpack2.0 配置加载器的结构改了</h3><ul>\n<li>多了rules字段</li>\n<li>加载器必须加<code>-loader</code>，不能省略了</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">   rules: [&#123;</span><br><span class=\"line\">     test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">     exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">     loader: <span class=\"string\">\"babel-loader\"</span></span><br><span class=\"line\">   &#125;,&#123;</span><br><span class=\"line\">     test: <span class=\"regexp\">/\\.css$/</span>, <span class=\"comment\">// Only .css files</span></span><br><span class=\"line\">     loader: <span class=\"string\">'style-loader!css-loader'</span> <span class=\"comment\">// Run both loaders</span></span><br><span class=\"line\">   &#125;]</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"bable加载器配置文件-babelrc\"><a href=\"#bable加载器配置文件-babelrc\" class=\"headerlink\" title=\"bable加载器配置文件.babelrc\"></a>bable加载器配置文件.babelrc</h2><ul>\n<li>使用env就好，会判断兼容性，选择合适的语法转换</li>\n<li>react有jsx语法，所以也要加上react<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"presets\"</span>: [<span class=\"string\">\"env\"</span>, <span class=\"string\">\"react\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"响应式","date":"2017-06-06T14:35:09.000Z","_content":"## 处理方式\n+ css兼容性(流式布局)\n+ 媒体查询\n+ js监听窗口大小改变，做调整\n\n## 方案\n\n### 容器设置最小宽度（min-width）\n最简单的方式就是限制页面宽度的最小值，这样即使设备屏幕比较宽，页面也能正常显示。  \n同时当\b\u001b屏幕过大时，让内容居中（margin-left:auto;margin-right:auto;）  \n\n目前主流屏幕分辨率是1024×768（有可能不是了，参考[这里](http://www.jianshu.com/p/406aac2f2707)）  \n所以可以把body元素的min-width的值设置为1024或者更低，具体的值按照实际情况的来。   \n如果设置太大，正常的浏览器\b会出现水平滚动条；设置太小,内容两边留白比较多。\n\n+ 缺点：但显示效果不太好，需要滑动滚动条才能看到内容。\n+ 优点：简单，无需太\b过考虑窄屏。\n\n## 根据不同屏幕宽度设置不同样式\n需要确定边界，为了在不同边界范围内使用不同\b样式。  \n三种设备宽度递增：移动手机<Pad<PC\n\b\n+ PC\nPad以iPad为\b参考，普遍为768。则大于768认为是PC。\b[宽度情况](http://www.jianshu.com/p/ab979770b618)\n```\n// PC的样式\n@media screen and (min-width: 768px){\n    \n}\n```\n+ Pad\n目前iPhone6 plus\b宽度（414）已经算比较大的了。则大于414,小于等于768认为是Pad。\n```\n// PC的样式\n@media screen and (min-width: 414px) and (max-width:768px){\n    \n}\n```\n+ Phone\n```\n// PC的样式\n@media screen and (max-width: 414px){\n    \n}\n```\n\n\n\n\n@media screen and (min-width: 767px) and (max-width:1199px)\n\n@media screen and (max-width: 1199px)\n\n\n@media screen and (min-width: 769px) and (max-width:1199px)\n\n@media screen and (max-width: 768px)\n\n@media screen and (max-width: 414px)\n\n@media screen and (max-width: 1199px)\n\n@media screen and (max-width: 768px)\n\n@media screen and (max-width: 660px)\n\n@media screen and (max-width: 560px)\n\n@media screen and (max-width: 374px)\n\n@media screen and (min-width: 768px) and (max-width:1040px)\n\n\n\n\n\n## hexo官网的主题列表\n+ width<480px\ndisplay:block\n+ 480px<=width<769px\n显示两列\n```\n-webkit-box-flex: 1;\nbox-flex: 1;\n-ms-flex: 0 0 50%;\nflex: 0 0 50%;\n```\n+ width>=769px\n显示三列\n```\n-webkit-box-flex: 1;\nbox-flex: 1;\n-ms-flex: 0 0 33.333333333333336%;\nflex: 0 0 33.333333333333336%;\n```\n","source":"_drafts/responsive.md","raw":"---\ntitle: 响应式 \ndate: 2017-06-06 22:35:09\ntags:\n---\n## 处理方式\n+ css兼容性(流式布局)\n+ 媒体查询\n+ js监听窗口大小改变，做调整\n\n## 方案\n\n### 容器设置最小宽度（min-width）\n最简单的方式就是限制页面宽度的最小值，这样即使设备屏幕比较宽，页面也能正常显示。  \n同时当\b\u001b屏幕过大时，让内容居中（margin-left:auto;margin-right:auto;）  \n\n目前主流屏幕分辨率是1024×768（有可能不是了，参考[这里](http://www.jianshu.com/p/406aac2f2707)）  \n所以可以把body元素的min-width的值设置为1024或者更低，具体的值按照实际情况的来。   \n如果设置太大，正常的浏览器\b会出现水平滚动条；设置太小,内容两边留白比较多。\n\n+ 缺点：但显示效果不太好，需要滑动滚动条才能看到内容。\n+ 优点：简单，无需太\b过考虑窄屏。\n\n## 根据不同屏幕宽度设置不同样式\n需要确定边界，为了在不同边界范围内使用不同\b样式。  \n三种设备宽度递增：移动手机<Pad<PC\n\b\n+ PC\nPad以iPad为\b参考，普遍为768。则大于768认为是PC。\b[宽度情况](http://www.jianshu.com/p/ab979770b618)\n```\n// PC的样式\n@media screen and (min-width: 768px){\n    \n}\n```\n+ Pad\n目前iPhone6 plus\b宽度（414）已经算比较大的了。则大于414,小于等于768认为是Pad。\n```\n// PC的样式\n@media screen and (min-width: 414px) and (max-width:768px){\n    \n}\n```\n+ Phone\n```\n// PC的样式\n@media screen and (max-width: 414px){\n    \n}\n```\n\n\n\n\n@media screen and (min-width: 767px) and (max-width:1199px)\n\n@media screen and (max-width: 1199px)\n\n\n@media screen and (min-width: 769px) and (max-width:1199px)\n\n@media screen and (max-width: 768px)\n\n@media screen and (max-width: 414px)\n\n@media screen and (max-width: 1199px)\n\n@media screen and (max-width: 768px)\n\n@media screen and (max-width: 660px)\n\n@media screen and (max-width: 560px)\n\n@media screen and (max-width: 374px)\n\n@media screen and (min-width: 768px) and (max-width:1040px)\n\n\n\n\n\n## hexo官网的主题列表\n+ width<480px\ndisplay:block\n+ 480px<=width<769px\n显示两列\n```\n-webkit-box-flex: 1;\nbox-flex: 1;\n-ms-flex: 0 0 50%;\nflex: 0 0 50%;\n```\n+ width>=769px\n显示三列\n```\n-webkit-box-flex: 1;\nbox-flex: 1;\n-ms-flex: 0 0 33.333333333333336%;\nflex: 0 0 33.333333333333336%;\n```\n","slug":"responsive","published":0,"updated":"2017-09-22T02:19:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymstemu000i7nwfc7jy65kp","content":"<h2 id=\"处理方式\"><a href=\"#处理方式\" class=\"headerlink\" title=\"处理方式\"></a>处理方式</h2><ul>\n<li>css兼容性(流式布局)</li>\n<li>媒体查询</li>\n<li>js监听窗口大小改变，做调整</li>\n</ul>\n<h2 id=\"方案\"><a href=\"#方案\" class=\"headerlink\" title=\"方案\"></a>方案</h2><h3 id=\"容器设置最小宽度（min-width）\"><a href=\"#容器设置最小宽度（min-width）\" class=\"headerlink\" title=\"容器设置最小宽度（min-width）\"></a>容器设置最小宽度（min-width）</h3><p>最简单的方式就是限制页面宽度的最小值，这样即使设备屏幕比较宽，页面也能正常显示。<br>同时当\b\u001b屏幕过大时，让内容居中（margin-left:auto;margin-right:auto;）  </p>\n<p>目前主流屏幕分辨率是1024×768（有可能不是了，参考<a href=\"http://www.jianshu.com/p/406aac2f2707\" target=\"_blank\" rel=\"noopener\">这里</a>）<br>所以可以把body元素的min-width的值设置为1024或者更低，具体的值按照实际情况的来。<br>如果设置太大，正常的浏览器\b会出现水平滚动条；设置太小,内容两边留白比较多。</p>\n<ul>\n<li>缺点：但显示效果不太好，需要滑动滚动条才能看到内容。</li>\n<li>优点：简单，无需太\b过考虑窄屏。</li>\n</ul>\n<h2 id=\"根据不同屏幕宽度设置不同样式\"><a href=\"#根据不同屏幕宽度设置不同样式\" class=\"headerlink\" title=\"根据不同屏幕宽度设置不同样式\"></a>根据不同屏幕宽度设置不同样式</h2><p>需要确定边界，为了在不同边界范围内使用不同\b样式。<br>三种设备宽度递增：移动手机&lt;Pad&lt;PC<br>\b</p>\n<ul>\n<li><p>PC<br>Pad以iPad为\b参考，普遍为768。则大于768认为是PC。\b<a href=\"http://www.jianshu.com/p/ab979770b618\" target=\"_blank\" rel=\"noopener\">宽度情况</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// PC的样式</span><br><span class=\"line\">@media screen and (min-width: 768px)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Pad<br>目前iPhone6 plus\b宽度（414）已经算比较大的了。则大于414,小于等于768认为是Pad。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// PC的样式</span><br><span class=\"line\">@media screen and (min-width: 414px) and (max-width:768px)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Phone</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// PC的样式</span><br><span class=\"line\">@media screen and (max-width: 414px)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>@media screen and (min-width: 767px) and (max-width:1199px)</p>\n<p>@media screen and (max-width: 1199px)</p>\n<p>@media screen and (min-width: 769px) and (max-width:1199px)</p>\n<p>@media screen and (max-width: 768px)</p>\n<p>@media screen and (max-width: 414px)</p>\n<p>@media screen and (max-width: 1199px)</p>\n<p>@media screen and (max-width: 768px)</p>\n<p>@media screen and (max-width: 660px)</p>\n<p>@media screen and (max-width: 560px)</p>\n<p>@media screen and (max-width: 374px)</p>\n<p>@media screen and (min-width: 768px) and (max-width:1040px)</p>\n<h2 id=\"hexo官网的主题列表\"><a href=\"#hexo官网的主题列表\" class=\"headerlink\" title=\"hexo官网的主题列表\"></a>hexo官网的主题列表</h2><ul>\n<li>width&lt;480px<br>display:block</li>\n<li><p>480px&lt;=width&lt;769px<br>显示两列</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-webkit-box-flex: 1;</span><br><span class=\"line\">box-flex: 1;</span><br><span class=\"line\">-ms-flex: 0 0 50%;</span><br><span class=\"line\">flex: 0 0 50%;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>width&gt;=769px<br>显示三列</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-webkit-box-flex: 1;</span><br><span class=\"line\">box-flex: 1;</span><br><span class=\"line\">-ms-flex: 0 0 33.333333333333336%;</span><br><span class=\"line\">flex: 0 0 33.333333333333336%;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"处理方式\"><a href=\"#处理方式\" class=\"headerlink\" title=\"处理方式\"></a>处理方式</h2><ul>\n<li>css兼容性(流式布局)</li>\n<li>媒体查询</li>\n<li>js监听窗口大小改变，做调整</li>\n</ul>\n<h2 id=\"方案\"><a href=\"#方案\" class=\"headerlink\" title=\"方案\"></a>方案</h2><h3 id=\"容器设置最小宽度（min-width）\"><a href=\"#容器设置最小宽度（min-width）\" class=\"headerlink\" title=\"容器设置最小宽度（min-width）\"></a>容器设置最小宽度（min-width）</h3><p>最简单的方式就是限制页面宽度的最小值，这样即使设备屏幕比较宽，页面也能正常显示。<br>同时当\b\u001b屏幕过大时，让内容居中（margin-left:auto;margin-right:auto;）  </p>\n<p>目前主流屏幕分辨率是1024×768（有可能不是了，参考<a href=\"http://www.jianshu.com/p/406aac2f2707\" target=\"_blank\" rel=\"noopener\">这里</a>）<br>所以可以把body元素的min-width的值设置为1024或者更低，具体的值按照实际情况的来。<br>如果设置太大，正常的浏览器\b会出现水平滚动条；设置太小,内容两边留白比较多。</p>\n<ul>\n<li>缺点：但显示效果不太好，需要滑动滚动条才能看到内容。</li>\n<li>优点：简单，无需太\b过考虑窄屏。</li>\n</ul>\n<h2 id=\"根据不同屏幕宽度设置不同样式\"><a href=\"#根据不同屏幕宽度设置不同样式\" class=\"headerlink\" title=\"根据不同屏幕宽度设置不同样式\"></a>根据不同屏幕宽度设置不同样式</h2><p>需要确定边界，为了在不同边界范围内使用不同\b样式。<br>三种设备宽度递增：移动手机&lt;Pad&lt;PC<br>\b</p>\n<ul>\n<li><p>PC<br>Pad以iPad为\b参考，普遍为768。则大于768认为是PC。\b<a href=\"http://www.jianshu.com/p/ab979770b618\" target=\"_blank\" rel=\"noopener\">宽度情况</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// PC的样式</span><br><span class=\"line\">@media screen and (min-width: 768px)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Pad<br>目前iPhone6 plus\b宽度（414）已经算比较大的了。则大于414,小于等于768认为是Pad。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// PC的样式</span><br><span class=\"line\">@media screen and (min-width: 414px) and (max-width:768px)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Phone</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// PC的样式</span><br><span class=\"line\">@media screen and (max-width: 414px)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>@media screen and (min-width: 767px) and (max-width:1199px)</p>\n<p>@media screen and (max-width: 1199px)</p>\n<p>@media screen and (min-width: 769px) and (max-width:1199px)</p>\n<p>@media screen and (max-width: 768px)</p>\n<p>@media screen and (max-width: 414px)</p>\n<p>@media screen and (max-width: 1199px)</p>\n<p>@media screen and (max-width: 768px)</p>\n<p>@media screen and (max-width: 660px)</p>\n<p>@media screen and (max-width: 560px)</p>\n<p>@media screen and (max-width: 374px)</p>\n<p>@media screen and (min-width: 768px) and (max-width:1040px)</p>\n<h2 id=\"hexo官网的主题列表\"><a href=\"#hexo官网的主题列表\" class=\"headerlink\" title=\"hexo官网的主题列表\"></a>hexo官网的主题列表</h2><ul>\n<li>width&lt;480px<br>display:block</li>\n<li><p>480px&lt;=width&lt;769px<br>显示两列</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-webkit-box-flex: 1;</span><br><span class=\"line\">box-flex: 1;</span><br><span class=\"line\">-ms-flex: 0 0 50%;</span><br><span class=\"line\">flex: 0 0 50%;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>width&gt;=769px<br>显示三列</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-webkit-box-flex: 1;</span><br><span class=\"line\">box-flex: 1;</span><br><span class=\"line\">-ms-flex: 0 0 33.333333333333336%;</span><br><span class=\"line\">flex: 0 0 33.333333333333336%;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"rollup","date":"2017-03-24T03:43:14.000Z","_content":"","source":"_drafts/rollup.md","raw":"---\ntitle: rollup\ndate: 2017-03-24 11:43:14\ntags:\n---\n","slug":"rollup","published":0,"updated":"2017-09-22T02:19:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymstemv000j7nwf11iwpjml","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"同源策略","date":"2016-10-09T14:52:02.000Z","_content":"## 对非同源资源的访问进行了限制\n\n### 因素\n+ 协议\n+ 域名\n+ 端口\n\n下面给出了相对于[http://store.company.com/dir/page.html]()同源检测的示例：\n\n| URL        | 结果           | 原因  |\n| ------------- |:-------------:| -----:|\n| http://store.company.com/dir2/other.html          | 成功 | |\n| http://store.company.com/dir/inner/another.html   | 成功 | |\n| https://store.company.com/secure.html             | 失败 |协议不同 |\n| http://store.company.com:81/dir/etc.html          | 失败 |端口不同 |\n| http://news.company.com/dir/other.html            | 失败 |主机名不同 |\n\n### 资源\n+ Cookie、LocalStorage和IndexDB无法读取\n+ Dom无法获得\n+ AJAX请求不能发送\n\n### 规避\n#### 更改域\n**可以设置document.domain的值为当前域的一个后缀，如果这样做的话，短的域将作为后续同源检测的依据。**\n假设在[http://store.company.com/dir/other.html]()中执行了下列脚本，则该页面将被认为和[http://company.com/dir/page.html]()页面同源。\n```\ndocument.domain = \"company.com\";\n```\n#### 跨域资源共享\n**CORS是一个W3C标准，全称是\"跨域资源共享\"（Cross-origin resource sharing）。**\nCORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。\n整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。\n因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。\n\n#### 其他方式\n- JSONP发送请求\n- iframe直接使用window.name或者window.postMessage\n- 等等\n\n### 参考\n+ [https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy](https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy)\n+ [http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html](http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html)","source":"_drafts/same-origin.md","raw":"---\ntitle: 同源策略\ndate: 2016-10-09 22:52:02\ntags: 同源策略\n\n---\n## 对非同源资源的访问进行了限制\n\n### 因素\n+ 协议\n+ 域名\n+ 端口\n\n下面给出了相对于[http://store.company.com/dir/page.html]()同源检测的示例：\n\n| URL        | 结果           | 原因  |\n| ------------- |:-------------:| -----:|\n| http://store.company.com/dir2/other.html          | 成功 | |\n| http://store.company.com/dir/inner/another.html   | 成功 | |\n| https://store.company.com/secure.html             | 失败 |协议不同 |\n| http://store.company.com:81/dir/etc.html          | 失败 |端口不同 |\n| http://news.company.com/dir/other.html            | 失败 |主机名不同 |\n\n### 资源\n+ Cookie、LocalStorage和IndexDB无法读取\n+ Dom无法获得\n+ AJAX请求不能发送\n\n### 规避\n#### 更改域\n**可以设置document.domain的值为当前域的一个后缀，如果这样做的话，短的域将作为后续同源检测的依据。**\n假设在[http://store.company.com/dir/other.html]()中执行了下列脚本，则该页面将被认为和[http://company.com/dir/page.html]()页面同源。\n```\ndocument.domain = \"company.com\";\n```\n#### 跨域资源共享\n**CORS是一个W3C标准，全称是\"跨域资源共享\"（Cross-origin resource sharing）。**\nCORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。\n整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。\n因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。\n\n#### 其他方式\n- JSONP发送请求\n- iframe直接使用window.name或者window.postMessage\n- 等等\n\n### 参考\n+ [https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy](https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy)\n+ [http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html](http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html)","slug":"same-origin","published":0,"updated":"2017-09-22T02:19:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymstemv000k7nwfbkfxyqud","content":"<h2 id=\"对非同源资源的访问进行了限制\"><a href=\"#对非同源资源的访问进行了限制\" class=\"headerlink\" title=\"对非同源资源的访问进行了限制\"></a>对非同源资源的访问进行了限制</h2><h3 id=\"因素\"><a href=\"#因素\" class=\"headerlink\" title=\"因素\"></a>因素</h3><ul>\n<li>协议</li>\n<li>域名</li>\n<li>端口</li>\n</ul>\n<p>下面给出了相对于<a href=\"\">http://store.company.com/dir/page.html</a>同源检测的示例：</p>\n<table>\n<thead>\n<tr>\n<th>URL</th>\n<th style=\"text-align:center\">结果</th>\n<th style=\"text-align:right\">原因</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://store.company.com/dir2/other.html\" target=\"_blank\" rel=\"noopener\">http://store.company.com/dir2/other.html</a></td>\n<td style=\"text-align:center\">成功</td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td><a href=\"http://store.company.com/dir/inner/another.html\" target=\"_blank\" rel=\"noopener\">http://store.company.com/dir/inner/another.html</a></td>\n<td style=\"text-align:center\">成功</td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td><a href=\"https://store.company.com/secure.html\" target=\"_blank\" rel=\"noopener\">https://store.company.com/secure.html</a></td>\n<td style=\"text-align:center\">失败</td>\n<td style=\"text-align:right\">协议不同</td>\n</tr>\n<tr>\n<td><a href=\"http://store.company.com:81/dir/etc.html\" target=\"_blank\" rel=\"noopener\">http://store.company.com:81/dir/etc.html</a></td>\n<td style=\"text-align:center\">失败</td>\n<td style=\"text-align:right\">端口不同</td>\n</tr>\n<tr>\n<td><a href=\"http://news.company.com/dir/other.html\" target=\"_blank\" rel=\"noopener\">http://news.company.com/dir/other.html</a></td>\n<td style=\"text-align:center\">失败</td>\n<td style=\"text-align:right\">主机名不同</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h3><ul>\n<li>Cookie、LocalStorage和IndexDB无法读取</li>\n<li>Dom无法获得</li>\n<li>AJAX请求不能发送</li>\n</ul>\n<h3 id=\"规避\"><a href=\"#规避\" class=\"headerlink\" title=\"规避\"></a>规避</h3><h4 id=\"更改域\"><a href=\"#更改域\" class=\"headerlink\" title=\"更改域\"></a>更改域</h4><p><strong>可以设置document.domain的值为当前域的一个后缀，如果这样做的话，短的域将作为后续同源检测的依据。</strong><br>假设在<a href=\"\">http://store.company.com/dir/other.html</a>中执行了下列脚本，则该页面将被认为和<a href=\"\">http://company.com/dir/page.html</a>页面同源。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.domain = &quot;company.com&quot;;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"跨域资源共享\"><a href=\"#跨域资源共享\" class=\"headerlink\" title=\"跨域资源共享\"></a>跨域资源共享</h4><p><strong>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。</strong><br>CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。<br>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。<br>因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。</p>\n<h4 id=\"其他方式\"><a href=\"#其他方式\" class=\"headerlink\" title=\"其他方式\"></a>其他方式</h4><ul>\n<li>JSONP发送请求</li>\n<li>iframe直接使用window.name或者window.postMessage</li>\n<li>等等</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"对非同源资源的访问进行了限制\"><a href=\"#对非同源资源的访问进行了限制\" class=\"headerlink\" title=\"对非同源资源的访问进行了限制\"></a>对非同源资源的访问进行了限制</h2><h3 id=\"因素\"><a href=\"#因素\" class=\"headerlink\" title=\"因素\"></a>因素</h3><ul>\n<li>协议</li>\n<li>域名</li>\n<li>端口</li>\n</ul>\n<p>下面给出了相对于<a href=\"\">http://store.company.com/dir/page.html</a>同源检测的示例：</p>\n<table>\n<thead>\n<tr>\n<th>URL</th>\n<th style=\"text-align:center\">结果</th>\n<th style=\"text-align:right\">原因</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://store.company.com/dir2/other.html\" target=\"_blank\" rel=\"noopener\">http://store.company.com/dir2/other.html</a></td>\n<td style=\"text-align:center\">成功</td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td><a href=\"http://store.company.com/dir/inner/another.html\" target=\"_blank\" rel=\"noopener\">http://store.company.com/dir/inner/another.html</a></td>\n<td style=\"text-align:center\">成功</td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td><a href=\"https://store.company.com/secure.html\" target=\"_blank\" rel=\"noopener\">https://store.company.com/secure.html</a></td>\n<td style=\"text-align:center\">失败</td>\n<td style=\"text-align:right\">协议不同</td>\n</tr>\n<tr>\n<td><a href=\"http://store.company.com:81/dir/etc.html\" target=\"_blank\" rel=\"noopener\">http://store.company.com:81/dir/etc.html</a></td>\n<td style=\"text-align:center\">失败</td>\n<td style=\"text-align:right\">端口不同</td>\n</tr>\n<tr>\n<td><a href=\"http://news.company.com/dir/other.html\" target=\"_blank\" rel=\"noopener\">http://news.company.com/dir/other.html</a></td>\n<td style=\"text-align:center\">失败</td>\n<td style=\"text-align:right\">主机名不同</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h3><ul>\n<li>Cookie、LocalStorage和IndexDB无法读取</li>\n<li>Dom无法获得</li>\n<li>AJAX请求不能发送</li>\n</ul>\n<h3 id=\"规避\"><a href=\"#规避\" class=\"headerlink\" title=\"规避\"></a>规避</h3><h4 id=\"更改域\"><a href=\"#更改域\" class=\"headerlink\" title=\"更改域\"></a>更改域</h4><p><strong>可以设置document.domain的值为当前域的一个后缀，如果这样做的话，短的域将作为后续同源检测的依据。</strong><br>假设在<a href=\"\">http://store.company.com/dir/other.html</a>中执行了下列脚本，则该页面将被认为和<a href=\"\">http://company.com/dir/page.html</a>页面同源。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.domain = &quot;company.com&quot;;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"跨域资源共享\"><a href=\"#跨域资源共享\" class=\"headerlink\" title=\"跨域资源共享\"></a>跨域资源共享</h4><p><strong>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。</strong><br>CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。<br>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。<br>因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。</p>\n<h4 id=\"其他方式\"><a href=\"#其他方式\" class=\"headerlink\" title=\"其他方式\"></a>其他方式</h4><ul>\n<li>JSONP发送请求</li>\n<li>iframe直接使用window.name或者window.postMessage</li>\n<li>等等</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html</a></li>\n</ul>\n"},{"title":"tcp","date":"2017-05-17T12:53:42.000Z","_content":"## 三次握手(并不一定准确)\n1.客户端发送:\nsyn=1,seq=client_isn\n2.服务器发送:\nsyn=1、seq=server_isn、ack=client_isn+1\n3.客户端发送:\nsyn=0、seq=client_isn+1、ack=server_isn+1\n","source":"_drafts/tcp.md","raw":"---\ntitle: tcp\ndate: 2017-05-17 20:53:42\ntags:\n---\n## 三次握手(并不一定准确)\n1.客户端发送:\nsyn=1,seq=client_isn\n2.服务器发送:\nsyn=1、seq=server_isn、ack=client_isn+1\n3.客户端发送:\nsyn=0、seq=client_isn+1、ack=server_isn+1\n","slug":"tcp","published":0,"updated":"2017-09-22T02:19:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymstemw000l7nwfum36vegp","content":"<h2 id=\"三次握手-并不一定准确\"><a href=\"#三次握手-并不一定准确\" class=\"headerlink\" title=\"三次握手(并不一定准确)\"></a>三次握手(并不一定准确)</h2><p>1.客户端发送:<br>syn=1,seq=client_isn<br>2.服务器发送:<br>syn=1、seq=server_isn、ack=client_isn+1<br>3.客户端发送:<br>syn=0、seq=client_isn+1、ack=server_isn+1</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"三次握手-并不一定准确\"><a href=\"#三次握手-并不一定准确\" class=\"headerlink\" title=\"三次握手(并不一定准确)\"></a>三次握手(并不一定准确)</h2><p>1.客户端发送:<br>syn=1,seq=client_isn<br>2.服务器发送:<br>syn=1、seq=server_isn、ack=client_isn+1<br>3.客户端发送:<br>syn=0、seq=client_isn+1、ack=server_isn+1</p>\n"},{"title":"屏幕适配（移动设备）","date":"2017-02-04T09:23:54.000Z","_content":"## 为什么要适配\n机型比较多，各种屏幕分辨率不一，导致在某种机型上正常显示的页面，换了机型后就变样了，和之前差异比较大。\n\n## 为什么会出现不适配\n我们需要显示一块内容，它占满屏幕宽度。不考虑适配，可能会这样写\n在head添加\n```\n<meta name=\"viewport\" content=\"initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no\">\n<style>\n  *{margin:0;padding:0;}\n</style>\n```\n在body添加\n```\n<div style=\"height:60px;width:320px;background-color:red\"></div>\n```\n宽度设置为320，在大部分手机上,是可以占满屏幕的。因为大部分机型的window.screen.width（分辨率的宽度/设备像素比）都为320。\n但是部分手机会存在差异，例如iphone6的是375。\n\n## 适配的方式有哪些\n当显示的内容，需要考虑到在各种机型上可以适配，可以使用：百分比、em、rem或者媒体查询。\n### 百分比\n基于父元素的宽高\n### em\n基于父元素的font-size\n### rem\n基于html的font-size\n### 媒体查询\n让特定设备使用特定的样式\n\n## 有哪些方案\n> 参考 [这里]( https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&mid=2651551707&idx=1&sn=5ae9e04e7483a52a86cbf506a1a5e164&chksm=8025a01ab752290c3a97b07eb41d57fac67b7860d498b6e0a25a998ba28e1b3f1a13faa308a5&mpshare=1&scene=1&srcid=0204XgklNuIRUhPGa6sKCztK&key=6be9550aed890fdfb09241a2888f9e903aa1d9b721d6096ae40959c45b40daa6537aaf98caff276ebb33829a080d0ad4d91c6bb0f5cba582bf5cb41b0a818a0f9dac2dbf9882bbe3d1e97e187790cf35&ascene=0&uin=NTA4NzQzOTYw )\n\n### 手机淘宝\n获取手机dpr(window.devicePixelRatio)，动态生成viewport。\n换取手机宽度，分成10份，每一份的宽度即是rem的尺寸。\n根据设计稿尺寸(px)通过计算，转换成rem去布局。\nps:海外淘宝并没有这样做，而是scale1.0并且图片大概都是2倍图。\n\n### 天猫\n采用scale=1.0 写死viewport。\nflex布局，笃定认为布局尺寸是375 (iPhone6)\nrem 确定非flex的元素\n\n### 手机携程\n采用scale=1.0 写死viewport\npx + 百分比布局","source":"_drafts/screen-fit.md","raw":"---\ntitle: 屏幕适配（移动设备）\ndate: 2017-02-04 17:23:54\ntags:\n---\n## 为什么要适配\n机型比较多，各种屏幕分辨率不一，导致在某种机型上正常显示的页面，换了机型后就变样了，和之前差异比较大。\n\n## 为什么会出现不适配\n我们需要显示一块内容，它占满屏幕宽度。不考虑适配，可能会这样写\n在head添加\n```\n<meta name=\"viewport\" content=\"initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no\">\n<style>\n  *{margin:0;padding:0;}\n</style>\n```\n在body添加\n```\n<div style=\"height:60px;width:320px;background-color:red\"></div>\n```\n宽度设置为320，在大部分手机上,是可以占满屏幕的。因为大部分机型的window.screen.width（分辨率的宽度/设备像素比）都为320。\n但是部分手机会存在差异，例如iphone6的是375。\n\n## 适配的方式有哪些\n当显示的内容，需要考虑到在各种机型上可以适配，可以使用：百分比、em、rem或者媒体查询。\n### 百分比\n基于父元素的宽高\n### em\n基于父元素的font-size\n### rem\n基于html的font-size\n### 媒体查询\n让特定设备使用特定的样式\n\n## 有哪些方案\n> 参考 [这里]( https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&mid=2651551707&idx=1&sn=5ae9e04e7483a52a86cbf506a1a5e164&chksm=8025a01ab752290c3a97b07eb41d57fac67b7860d498b6e0a25a998ba28e1b3f1a13faa308a5&mpshare=1&scene=1&srcid=0204XgklNuIRUhPGa6sKCztK&key=6be9550aed890fdfb09241a2888f9e903aa1d9b721d6096ae40959c45b40daa6537aaf98caff276ebb33829a080d0ad4d91c6bb0f5cba582bf5cb41b0a818a0f9dac2dbf9882bbe3d1e97e187790cf35&ascene=0&uin=NTA4NzQzOTYw )\n\n### 手机淘宝\n获取手机dpr(window.devicePixelRatio)，动态生成viewport。\n换取手机宽度，分成10份，每一份的宽度即是rem的尺寸。\n根据设计稿尺寸(px)通过计算，转换成rem去布局。\nps:海外淘宝并没有这样做，而是scale1.0并且图片大概都是2倍图。\n\n### 天猫\n采用scale=1.0 写死viewport。\nflex布局，笃定认为布局尺寸是375 (iPhone6)\nrem 确定非flex的元素\n\n### 手机携程\n采用scale=1.0 写死viewport\npx + 百分比布局","slug":"screen-fit","published":0,"updated":"2017-09-22T02:19:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymstemx000m7nwfxobg26rn","content":"<h2 id=\"为什么要适配\"><a href=\"#为什么要适配\" class=\"headerlink\" title=\"为什么要适配\"></a>为什么要适配</h2><p>机型比较多，各种屏幕分辨率不一，导致在某种机型上正常显示的页面，换了机型后就变样了，和之前差异比较大。</p>\n<h2 id=\"为什么会出现不适配\"><a href=\"#为什么会出现不适配\" class=\"headerlink\" title=\"为什么会出现不适配\"></a>为什么会出现不适配</h2><p>我们需要显示一块内容，它占满屏幕宽度。不考虑适配，可能会这样写<br>在head添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no&quot;&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  *&#123;margin:0;padding:0;&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>\n<p>在body添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div style=&quot;height:60px;width:320px;background-color:red&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>宽度设置为320，在大部分手机上,是可以占满屏幕的。因为大部分机型的window.screen.width（分辨率的宽度/设备像素比）都为320。<br>但是部分手机会存在差异，例如iphone6的是375。</p>\n<h2 id=\"适配的方式有哪些\"><a href=\"#适配的方式有哪些\" class=\"headerlink\" title=\"适配的方式有哪些\"></a>适配的方式有哪些</h2><p>当显示的内容，需要考虑到在各种机型上可以适配，可以使用：百分比、em、rem或者媒体查询。</p>\n<h3 id=\"百分比\"><a href=\"#百分比\" class=\"headerlink\" title=\"百分比\"></a>百分比</h3><p>基于父元素的宽高</p>\n<h3 id=\"em\"><a href=\"#em\" class=\"headerlink\" title=\"em\"></a>em</h3><p>基于父元素的font-size</p>\n<h3 id=\"rem\"><a href=\"#rem\" class=\"headerlink\" title=\"rem\"></a>rem</h3><p>基于html的font-size</p>\n<h3 id=\"媒体查询\"><a href=\"#媒体查询\" class=\"headerlink\" title=\"媒体查询\"></a>媒体查询</h3><p>让特定设备使用特定的样式</p>\n<h2 id=\"有哪些方案\"><a href=\"#有哪些方案\" class=\"headerlink\" title=\"有哪些方案\"></a>有哪些方案</h2><blockquote>\n<p>参考 <a href=\"https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651551707&amp;idx=1&amp;sn=5ae9e04e7483a52a86cbf506a1a5e164&amp;chksm=8025a01ab752290c3a97b07eb41d57fac67b7860d498b6e0a25a998ba28e1b3f1a13faa308a5&amp;mpshare=1&amp;scene=1&amp;srcid=0204XgklNuIRUhPGa6sKCztK&amp;key=6be9550aed890fdfb09241a2888f9e903aa1d9b721d6096ae40959c45b40daa6537aaf98caff276ebb33829a080d0ad4d91c6bb0f5cba582bf5cb41b0a818a0f9dac2dbf9882bbe3d1e97e187790cf35&amp;ascene=0&amp;uin=NTA4NzQzOTYw\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n</blockquote>\n<h3 id=\"手机淘宝\"><a href=\"#手机淘宝\" class=\"headerlink\" title=\"手机淘宝\"></a>手机淘宝</h3><p>获取手机dpr(window.devicePixelRatio)，动态生成viewport。<br>换取手机宽度，分成10份，每一份的宽度即是rem的尺寸。<br>根据设计稿尺寸(px)通过计算，转换成rem去布局。<br>ps:海外淘宝并没有这样做，而是scale1.0并且图片大概都是2倍图。</p>\n<h3 id=\"天猫\"><a href=\"#天猫\" class=\"headerlink\" title=\"天猫\"></a>天猫</h3><p>采用scale=1.0 写死viewport。<br>flex布局，笃定认为布局尺寸是375 (iPhone6)<br>rem 确定非flex的元素</p>\n<h3 id=\"手机携程\"><a href=\"#手机携程\" class=\"headerlink\" title=\"手机携程\"></a>手机携程</h3><p>采用scale=1.0 写死viewport<br>px + 百分比布局</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"为什么要适配\"><a href=\"#为什么要适配\" class=\"headerlink\" title=\"为什么要适配\"></a>为什么要适配</h2><p>机型比较多，各种屏幕分辨率不一，导致在某种机型上正常显示的页面，换了机型后就变样了，和之前差异比较大。</p>\n<h2 id=\"为什么会出现不适配\"><a href=\"#为什么会出现不适配\" class=\"headerlink\" title=\"为什么会出现不适配\"></a>为什么会出现不适配</h2><p>我们需要显示一块内容，它占满屏幕宽度。不考虑适配，可能会这样写<br>在head添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no&quot;&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  *&#123;margin:0;padding:0;&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>\n<p>在body添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div style=&quot;height:60px;width:320px;background-color:red&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>宽度设置为320，在大部分手机上,是可以占满屏幕的。因为大部分机型的window.screen.width（分辨率的宽度/设备像素比）都为320。<br>但是部分手机会存在差异，例如iphone6的是375。</p>\n<h2 id=\"适配的方式有哪些\"><a href=\"#适配的方式有哪些\" class=\"headerlink\" title=\"适配的方式有哪些\"></a>适配的方式有哪些</h2><p>当显示的内容，需要考虑到在各种机型上可以适配，可以使用：百分比、em、rem或者媒体查询。</p>\n<h3 id=\"百分比\"><a href=\"#百分比\" class=\"headerlink\" title=\"百分比\"></a>百分比</h3><p>基于父元素的宽高</p>\n<h3 id=\"em\"><a href=\"#em\" class=\"headerlink\" title=\"em\"></a>em</h3><p>基于父元素的font-size</p>\n<h3 id=\"rem\"><a href=\"#rem\" class=\"headerlink\" title=\"rem\"></a>rem</h3><p>基于html的font-size</p>\n<h3 id=\"媒体查询\"><a href=\"#媒体查询\" class=\"headerlink\" title=\"媒体查询\"></a>媒体查询</h3><p>让特定设备使用特定的样式</p>\n<h2 id=\"有哪些方案\"><a href=\"#有哪些方案\" class=\"headerlink\" title=\"有哪些方案\"></a>有哪些方案</h2><blockquote>\n<p>参考 <a href=\"https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651551707&amp;idx=1&amp;sn=5ae9e04e7483a52a86cbf506a1a5e164&amp;chksm=8025a01ab752290c3a97b07eb41d57fac67b7860d498b6e0a25a998ba28e1b3f1a13faa308a5&amp;mpshare=1&amp;scene=1&amp;srcid=0204XgklNuIRUhPGa6sKCztK&amp;key=6be9550aed890fdfb09241a2888f9e903aa1d9b721d6096ae40959c45b40daa6537aaf98caff276ebb33829a080d0ad4d91c6bb0f5cba582bf5cb41b0a818a0f9dac2dbf9882bbe3d1e97e187790cf35&amp;ascene=0&amp;uin=NTA4NzQzOTYw\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n</blockquote>\n<h3 id=\"手机淘宝\"><a href=\"#手机淘宝\" class=\"headerlink\" title=\"手机淘宝\"></a>手机淘宝</h3><p>获取手机dpr(window.devicePixelRatio)，动态生成viewport。<br>换取手机宽度，分成10份，每一份的宽度即是rem的尺寸。<br>根据设计稿尺寸(px)通过计算，转换成rem去布局。<br>ps:海外淘宝并没有这样做，而是scale1.0并且图片大概都是2倍图。</p>\n<h3 id=\"天猫\"><a href=\"#天猫\" class=\"headerlink\" title=\"天猫\"></a>天猫</h3><p>采用scale=1.0 写死viewport。<br>flex布局，笃定认为布局尺寸是375 (iPhone6)<br>rem 确定非flex的元素</p>\n<h3 id=\"手机携程\"><a href=\"#手机携程\" class=\"headerlink\" title=\"手机携程\"></a>手机携程</h3><p>采用scale=1.0 写死viewport<br>px + 百分比布局</p>\n"},{"title":"前端模板","date":"2017-05-03T15:50:47.000Z","_content":"[介绍](http://www.html-js.com/article/Regularjs-Chinese-guidelines-for-a-comprehensive-summary-of-the-front-template-technology)\n\n\nhttp://garann.github.io/template-chooser/","source":"_drafts/template-classify.md","raw":"---\ntitle: 前端模板\ndate: 2017-05-03 23:50:47\ntags:\n---\n[介绍](http://www.html-js.com/article/Regularjs-Chinese-guidelines-for-a-comprehensive-summary-of-the-front-template-technology)\n\n\nhttp://garann.github.io/template-chooser/","slug":"template-classify","published":0,"updated":"2017-09-22T02:19:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymstemx000n7nwflbp25s3o","content":"<p><a href=\"http://www.html-js.com/article/Regularjs-Chinese-guidelines-for-a-comprehensive-summary-of-the-front-template-technology\" target=\"_blank\" rel=\"noopener\">介绍</a></p>\n<p><a href=\"http://garann.github.io/template-chooser/\" target=\"_blank\" rel=\"noopener\">http://garann.github.io/template-chooser/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.html-js.com/article/Regularjs-Chinese-guidelines-for-a-comprehensive-summary-of-the-front-template-technology\" target=\"_blank\" rel=\"noopener\">介绍</a></p>\n<p><a href=\"http://garann.github.io/template-chooser/\" target=\"_blank\" rel=\"noopener\">http://garann.github.io/template-chooser/</a></p>\n"},{"title":"visualFormattingModel","date":"2017-06-22T16:28:23.000Z","_content":"\n## Containing blocks 包含块\n多个盒模型的定位和大小的计算是基于一个矩形的盒子的边界。这个矩形盒子就是包含块。\n\n## Block-level elements and block boxes 块级元素和块盒子\n### 块级元素\n那些被格式化看成一块的，例如一个段落。这些元素会生成块级盒子。   \n块级元素包括：display属性值为block、list-item和table的元素。\n这些块级盒子可以组成块级上下文。\n\n### 块容器盒子\n+ 一类是只包含块级盒子\n+ 另一类只包含行内级别盒子\n块容器盒子包括：display属性值为block、list-item和inline-block的元素。\n\n\n## 内联\n### 行内级元素\n+ 不会给内容生成块\n+ 内容分布在行上\n+ display值为inline、inline-table和inline-block的\n\n### 行内级别的盒子\n行内级元素生成的\n\n### 行内盒子\ndisplay值为inline的非替换元素\n\n### 原子行内级别盒子\n除了行内盒子之外的行内级别盒子\n\n### 匿名行内盒子\n如果文本直接被放在块容器元素中，会被处理成匿名行内元素。则也有行内盒子。\n\n## 匿名块盒子\n### 块容器盒子含有块级别盒子，则强制要求块容器盒子中只有块级盒子。\n```\n<div>\n Some text\n <p>>More text</p>\n</div>\n```\n可认为Some text被一个匿名的块级盒子包含。\n\n## 块格式上下文\n同一块格式上下文里，相邻两个块级盒子垂直方向的margin会折叠\n\n\n\n\n\n\n\n\n","source":"_drafts/visualFormattingModel.md","raw":"---\ntitle: visualFormattingModel\ndate: 2017-06-23 00:28:23\ntags:\n---\n\n## Containing blocks 包含块\n多个盒模型的定位和大小的计算是基于一个矩形的盒子的边界。这个矩形盒子就是包含块。\n\n## Block-level elements and block boxes 块级元素和块盒子\n### 块级元素\n那些被格式化看成一块的，例如一个段落。这些元素会生成块级盒子。   \n块级元素包括：display属性值为block、list-item和table的元素。\n这些块级盒子可以组成块级上下文。\n\n### 块容器盒子\n+ 一类是只包含块级盒子\n+ 另一类只包含行内级别盒子\n块容器盒子包括：display属性值为block、list-item和inline-block的元素。\n\n\n## 内联\n### 行内级元素\n+ 不会给内容生成块\n+ 内容分布在行上\n+ display值为inline、inline-table和inline-block的\n\n### 行内级别的盒子\n行内级元素生成的\n\n### 行内盒子\ndisplay值为inline的非替换元素\n\n### 原子行内级别盒子\n除了行内盒子之外的行内级别盒子\n\n### 匿名行内盒子\n如果文本直接被放在块容器元素中，会被处理成匿名行内元素。则也有行内盒子。\n\n## 匿名块盒子\n### 块容器盒子含有块级别盒子，则强制要求块容器盒子中只有块级盒子。\n```\n<div>\n Some text\n <p>>More text</p>\n</div>\n```\n可认为Some text被一个匿名的块级盒子包含。\n\n## 块格式上下文\n同一块格式上下文里，相邻两个块级盒子垂直方向的margin会折叠\n\n\n\n\n\n\n\n\n","slug":"visualFormattingModel","published":0,"updated":"2017-09-22T02:19:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymstemy000o7nwfvhe66l08","content":"<h2 id=\"Containing-blocks-包含块\"><a href=\"#Containing-blocks-包含块\" class=\"headerlink\" title=\"Containing blocks 包含块\"></a>Containing blocks 包含块</h2><p>多个盒模型的定位和大小的计算是基于一个矩形的盒子的边界。这个矩形盒子就是包含块。</p>\n<h2 id=\"Block-level-elements-and-block-boxes-块级元素和块盒子\"><a href=\"#Block-level-elements-and-block-boxes-块级元素和块盒子\" class=\"headerlink\" title=\"Block-level elements and block boxes 块级元素和块盒子\"></a>Block-level elements and block boxes 块级元素和块盒子</h2><h3 id=\"块级元素\"><a href=\"#块级元素\" class=\"headerlink\" title=\"块级元素\"></a>块级元素</h3><p>那些被格式化看成一块的，例如一个段落。这些元素会生成块级盒子。<br>块级元素包括：display属性值为block、list-item和table的元素。<br>这些块级盒子可以组成块级上下文。</p>\n<h3 id=\"块容器盒子\"><a href=\"#块容器盒子\" class=\"headerlink\" title=\"块容器盒子\"></a>块容器盒子</h3><ul>\n<li>一类是只包含块级盒子</li>\n<li>另一类只包含行内级别盒子<br>块容器盒子包括：display属性值为block、list-item和inline-block的元素。</li>\n</ul>\n<h2 id=\"内联\"><a href=\"#内联\" class=\"headerlink\" title=\"内联\"></a>内联</h2><h3 id=\"行内级元素\"><a href=\"#行内级元素\" class=\"headerlink\" title=\"行内级元素\"></a>行内级元素</h3><ul>\n<li>不会给内容生成块</li>\n<li>内容分布在行上</li>\n<li>display值为inline、inline-table和inline-block的</li>\n</ul>\n<h3 id=\"行内级别的盒子\"><a href=\"#行内级别的盒子\" class=\"headerlink\" title=\"行内级别的盒子\"></a>行内级别的盒子</h3><p>行内级元素生成的</p>\n<h3 id=\"行内盒子\"><a href=\"#行内盒子\" class=\"headerlink\" title=\"行内盒子\"></a>行内盒子</h3><p>display值为inline的非替换元素</p>\n<h3 id=\"原子行内级别盒子\"><a href=\"#原子行内级别盒子\" class=\"headerlink\" title=\"原子行内级别盒子\"></a>原子行内级别盒子</h3><p>除了行内盒子之外的行内级别盒子</p>\n<h3 id=\"匿名行内盒子\"><a href=\"#匿名行内盒子\" class=\"headerlink\" title=\"匿名行内盒子\"></a>匿名行内盒子</h3><p>如果文本直接被放在块容器元素中，会被处理成匿名行内元素。则也有行内盒子。</p>\n<h2 id=\"匿名块盒子\"><a href=\"#匿名块盒子\" class=\"headerlink\" title=\"匿名块盒子\"></a>匿名块盒子</h2><h3 id=\"块容器盒子含有块级别盒子，则强制要求块容器盒子中只有块级盒子。\"><a href=\"#块容器盒子含有块级别盒子，则强制要求块容器盒子中只有块级盒子。\" class=\"headerlink\" title=\"块容器盒子含有块级别盒子，则强制要求块容器盒子中只有块级盒子。\"></a>块容器盒子含有块级别盒子，则强制要求块容器盒子中只有块级盒子。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\"> Some text</span><br><span class=\"line\"> &lt;p&gt;&gt;More text&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>可认为Some text被一个匿名的块级盒子包含。</p>\n<h2 id=\"块格式上下文\"><a href=\"#块格式上下文\" class=\"headerlink\" title=\"块格式上下文\"></a>块格式上下文</h2><p>同一块格式上下文里，相邻两个块级盒子垂直方向的margin会折叠</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Containing-blocks-包含块\"><a href=\"#Containing-blocks-包含块\" class=\"headerlink\" title=\"Containing blocks 包含块\"></a>Containing blocks 包含块</h2><p>多个盒模型的定位和大小的计算是基于一个矩形的盒子的边界。这个矩形盒子就是包含块。</p>\n<h2 id=\"Block-level-elements-and-block-boxes-块级元素和块盒子\"><a href=\"#Block-level-elements-and-block-boxes-块级元素和块盒子\" class=\"headerlink\" title=\"Block-level elements and block boxes 块级元素和块盒子\"></a>Block-level elements and block boxes 块级元素和块盒子</h2><h3 id=\"块级元素\"><a href=\"#块级元素\" class=\"headerlink\" title=\"块级元素\"></a>块级元素</h3><p>那些被格式化看成一块的，例如一个段落。这些元素会生成块级盒子。<br>块级元素包括：display属性值为block、list-item和table的元素。<br>这些块级盒子可以组成块级上下文。</p>\n<h3 id=\"块容器盒子\"><a href=\"#块容器盒子\" class=\"headerlink\" title=\"块容器盒子\"></a>块容器盒子</h3><ul>\n<li>一类是只包含块级盒子</li>\n<li>另一类只包含行内级别盒子<br>块容器盒子包括：display属性值为block、list-item和inline-block的元素。</li>\n</ul>\n<h2 id=\"内联\"><a href=\"#内联\" class=\"headerlink\" title=\"内联\"></a>内联</h2><h3 id=\"行内级元素\"><a href=\"#行内级元素\" class=\"headerlink\" title=\"行内级元素\"></a>行内级元素</h3><ul>\n<li>不会给内容生成块</li>\n<li>内容分布在行上</li>\n<li>display值为inline、inline-table和inline-block的</li>\n</ul>\n<h3 id=\"行内级别的盒子\"><a href=\"#行内级别的盒子\" class=\"headerlink\" title=\"行内级别的盒子\"></a>行内级别的盒子</h3><p>行内级元素生成的</p>\n<h3 id=\"行内盒子\"><a href=\"#行内盒子\" class=\"headerlink\" title=\"行内盒子\"></a>行内盒子</h3><p>display值为inline的非替换元素</p>\n<h3 id=\"原子行内级别盒子\"><a href=\"#原子行内级别盒子\" class=\"headerlink\" title=\"原子行内级别盒子\"></a>原子行内级别盒子</h3><p>除了行内盒子之外的行内级别盒子</p>\n<h3 id=\"匿名行内盒子\"><a href=\"#匿名行内盒子\" class=\"headerlink\" title=\"匿名行内盒子\"></a>匿名行内盒子</h3><p>如果文本直接被放在块容器元素中，会被处理成匿名行内元素。则也有行内盒子。</p>\n<h2 id=\"匿名块盒子\"><a href=\"#匿名块盒子\" class=\"headerlink\" title=\"匿名块盒子\"></a>匿名块盒子</h2><h3 id=\"块容器盒子含有块级别盒子，则强制要求块容器盒子中只有块级盒子。\"><a href=\"#块容器盒子含有块级别盒子，则强制要求块容器盒子中只有块级盒子。\" class=\"headerlink\" title=\"块容器盒子含有块级别盒子，则强制要求块容器盒子中只有块级盒子。\"></a>块容器盒子含有块级别盒子，则强制要求块容器盒子中只有块级盒子。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\"> Some text</span><br><span class=\"line\"> &lt;p&gt;&gt;More text&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>可认为Some text被一个匿名的块级盒子包含。</p>\n<h2 id=\"块格式上下文\"><a href=\"#块格式上下文\" class=\"headerlink\" title=\"块格式上下文\"></a>块格式上下文</h2><p>同一块格式上下文里，相邻两个块级盒子垂直方向的margin会折叠</p>\n"},{"title":"vue源码学习笔记-a5e27b1","date":"2017-01-08T15:05:13.000Z","_content":"\n## 获取含有特定前缀属性的元素集合els\n属性名的结构\n\n```\nprefix-dirname\n```\nprefix为sd\ndirname分别为text、show、class、on\n\n\n## 解析成指令directive\n\n元素的属性可看成此结构\n\n```\nprefix-dirname-arg=\"key | filter1 | filter2..\"\n```\n解析后得到directive\n\n```\n{\n  attr:当前属性,\n  key:key,//认为是数据的索引key\n  filters:filter的数组,\n  definition:指令,//dirname对应的指令，\n  argument:arg,\n  update:definition或者definition.update //主要看definition是否为方法\n}\n```\n\n## 绑定指令\n### 绑定\n修改数据会自动同步更新到页面元素上，更新页面的操作(指令)都应该对应到某个数据下的。所以绑定的关系，要以数据分类。\n\n### 处理元素和数据和指令的关系\n\n+ 在某数据名下建立绑定关系\n\n```\nbindings[key] = binding = {\n    value: undefined,\n    directives: []\n}\n```\n+ 指明指令针对哪个元素\n\n```\ndirective.el=el;\n```\n\n+ 添加指令\n\n```\nbinding.directives.push(directive)\n```\n\n+ 操作数据触发指令\n所有的数据都以key-value的形式存放在scope中。通过Object.defineProperty,当改动scope的数据时，可以触发指令。\n该数据名下的每条指令就会针对自己的元素进行操作。\n\n```\nfunction bindAccessors (seed, key, binding) {\n    Object.defineProperty(seed.scope, key, {\n        get: function () {\n            return binding.value\n        },\n        set: function (value) {\n            binding.value = value\n            binding.directives.forEach(function (directive) {\n                if (value && directive.filters) {\n                    value = applyFilters(value, directive)\n                }\n                directive.update(\n                    directive.el,\n                    value,\n                    directive.argument,\n                    directive,\n                    seed\n                )\n            })\n        }\n    })\n}\n\n```\n\n","source":"_drafts/vue-a5e27b1.md","raw":"---\ntitle: vue源码学习笔记-a5e27b1\ndate: 2017-01-08 23:05:13\ntags: vue源码学习笔记\n---\n\n## 获取含有特定前缀属性的元素集合els\n属性名的结构\n\n```\nprefix-dirname\n```\nprefix为sd\ndirname分别为text、show、class、on\n\n\n## 解析成指令directive\n\n元素的属性可看成此结构\n\n```\nprefix-dirname-arg=\"key | filter1 | filter2..\"\n```\n解析后得到directive\n\n```\n{\n  attr:当前属性,\n  key:key,//认为是数据的索引key\n  filters:filter的数组,\n  definition:指令,//dirname对应的指令，\n  argument:arg,\n  update:definition或者definition.update //主要看definition是否为方法\n}\n```\n\n## 绑定指令\n### 绑定\n修改数据会自动同步更新到页面元素上，更新页面的操作(指令)都应该对应到某个数据下的。所以绑定的关系，要以数据分类。\n\n### 处理元素和数据和指令的关系\n\n+ 在某数据名下建立绑定关系\n\n```\nbindings[key] = binding = {\n    value: undefined,\n    directives: []\n}\n```\n+ 指明指令针对哪个元素\n\n```\ndirective.el=el;\n```\n\n+ 添加指令\n\n```\nbinding.directives.push(directive)\n```\n\n+ 操作数据触发指令\n所有的数据都以key-value的形式存放在scope中。通过Object.defineProperty,当改动scope的数据时，可以触发指令。\n该数据名下的每条指令就会针对自己的元素进行操作。\n\n```\nfunction bindAccessors (seed, key, binding) {\n    Object.defineProperty(seed.scope, key, {\n        get: function () {\n            return binding.value\n        },\n        set: function (value) {\n            binding.value = value\n            binding.directives.forEach(function (directive) {\n                if (value && directive.filters) {\n                    value = applyFilters(value, directive)\n                }\n                directive.update(\n                    directive.el,\n                    value,\n                    directive.argument,\n                    directive,\n                    seed\n                )\n            })\n        }\n    })\n}\n\n```\n\n","slug":"vue-a5e27b1","published":0,"updated":"2017-09-22T02:19:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymstemy000p7nwf3uto5kec","content":"<h2 id=\"获取含有特定前缀属性的元素集合els\"><a href=\"#获取含有特定前缀属性的元素集合els\" class=\"headerlink\" title=\"获取含有特定前缀属性的元素集合els\"></a>获取含有特定前缀属性的元素集合els</h2><p>属性名的结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">prefix-dirname</span><br></pre></td></tr></table></figure>\n<p>prefix为sd<br>dirname分别为text、show、class、on</p>\n<h2 id=\"解析成指令directive\"><a href=\"#解析成指令directive\" class=\"headerlink\" title=\"解析成指令directive\"></a>解析成指令directive</h2><p>元素的属性可看成此结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">prefix-dirname-arg=&quot;key | filter1 | filter2..&quot;</span><br></pre></td></tr></table></figure>\n<p>解析后得到directive</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  attr:当前属性,</span><br><span class=\"line\">  key:key,//认为是数据的索引key</span><br><span class=\"line\">  filters:filter的数组,</span><br><span class=\"line\">  definition:指令,//dirname对应的指令，</span><br><span class=\"line\">  argument:arg,</span><br><span class=\"line\">  update:definition或者definition.update //主要看definition是否为方法</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"绑定指令\"><a href=\"#绑定指令\" class=\"headerlink\" title=\"绑定指令\"></a>绑定指令</h2><h3 id=\"绑定\"><a href=\"#绑定\" class=\"headerlink\" title=\"绑定\"></a>绑定</h3><p>修改数据会自动同步更新到页面元素上，更新页面的操作(指令)都应该对应到某个数据下的。所以绑定的关系，要以数据分类。</p>\n<h3 id=\"处理元素和数据和指令的关系\"><a href=\"#处理元素和数据和指令的关系\" class=\"headerlink\" title=\"处理元素和数据和指令的关系\"></a>处理元素和数据和指令的关系</h3><ul>\n<li>在某数据名下建立绑定关系</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bindings[key] = binding = &#123;</span><br><span class=\"line\">    value: undefined,</span><br><span class=\"line\">    directives: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>指明指令针对哪个元素</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">directive.el=el;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>添加指令</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">binding.directives.push(directive)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>操作数据触发指令<br>所有的数据都以key-value的形式存放在scope中。通过Object.defineProperty,当改动scope的数据时，可以触发指令。<br>该数据名下的每条指令就会针对自己的元素进行操作。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function bindAccessors (seed, key, binding) &#123;</span><br><span class=\"line\">    Object.defineProperty(seed.scope, key, &#123;</span><br><span class=\"line\">        get: function () &#123;</span><br><span class=\"line\">            return binding.value</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        set: function (value) &#123;</span><br><span class=\"line\">            binding.value = value</span><br><span class=\"line\">            binding.directives.forEach(function (directive) &#123;</span><br><span class=\"line\">                if (value &amp;&amp; directive.filters) &#123;</span><br><span class=\"line\">                    value = applyFilters(value, directive)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                directive.update(</span><br><span class=\"line\">                    directive.el,</span><br><span class=\"line\">                    value,</span><br><span class=\"line\">                    directive.argument,</span><br><span class=\"line\">                    directive,</span><br><span class=\"line\">                    seed</span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"获取含有特定前缀属性的元素集合els\"><a href=\"#获取含有特定前缀属性的元素集合els\" class=\"headerlink\" title=\"获取含有特定前缀属性的元素集合els\"></a>获取含有特定前缀属性的元素集合els</h2><p>属性名的结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">prefix-dirname</span><br></pre></td></tr></table></figure>\n<p>prefix为sd<br>dirname分别为text、show、class、on</p>\n<h2 id=\"解析成指令directive\"><a href=\"#解析成指令directive\" class=\"headerlink\" title=\"解析成指令directive\"></a>解析成指令directive</h2><p>元素的属性可看成此结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">prefix-dirname-arg=&quot;key | filter1 | filter2..&quot;</span><br></pre></td></tr></table></figure>\n<p>解析后得到directive</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  attr:当前属性,</span><br><span class=\"line\">  key:key,//认为是数据的索引key</span><br><span class=\"line\">  filters:filter的数组,</span><br><span class=\"line\">  definition:指令,//dirname对应的指令，</span><br><span class=\"line\">  argument:arg,</span><br><span class=\"line\">  update:definition或者definition.update //主要看definition是否为方法</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"绑定指令\"><a href=\"#绑定指令\" class=\"headerlink\" title=\"绑定指令\"></a>绑定指令</h2><h3 id=\"绑定\"><a href=\"#绑定\" class=\"headerlink\" title=\"绑定\"></a>绑定</h3><p>修改数据会自动同步更新到页面元素上，更新页面的操作(指令)都应该对应到某个数据下的。所以绑定的关系，要以数据分类。</p>\n<h3 id=\"处理元素和数据和指令的关系\"><a href=\"#处理元素和数据和指令的关系\" class=\"headerlink\" title=\"处理元素和数据和指令的关系\"></a>处理元素和数据和指令的关系</h3><ul>\n<li>在某数据名下建立绑定关系</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bindings[key] = binding = &#123;</span><br><span class=\"line\">    value: undefined,</span><br><span class=\"line\">    directives: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>指明指令针对哪个元素</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">directive.el=el;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>添加指令</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">binding.directives.push(directive)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>操作数据触发指令<br>所有的数据都以key-value的形式存放在scope中。通过Object.defineProperty,当改动scope的数据时，可以触发指令。<br>该数据名下的每条指令就会针对自己的元素进行操作。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function bindAccessors (seed, key, binding) &#123;</span><br><span class=\"line\">    Object.defineProperty(seed.scope, key, &#123;</span><br><span class=\"line\">        get: function () &#123;</span><br><span class=\"line\">            return binding.value</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        set: function (value) &#123;</span><br><span class=\"line\">            binding.value = value</span><br><span class=\"line\">            binding.directives.forEach(function (directive) &#123;</span><br><span class=\"line\">                if (value &amp;&amp; directive.filters) &#123;</span><br><span class=\"line\">                    value = applyFilters(value, directive)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                directive.update(</span><br><span class=\"line\">                    directive.el,</span><br><span class=\"line\">                    value,</span><br><span class=\"line\">                    directive.argument,</span><br><span class=\"line\">                    directive,</span><br><span class=\"line\">                    seed</span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"test","_content":"","source":"_drafts/test.md","raw":"---\ntitle: test\ntags:\n---\n","slug":"test","published":0,"date":"2017-09-22T02:19:06.000Z","updated":"2017-09-22T02:19:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymstemz000q7nwfns6tmso7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"touch","date":"2017-03-01T17:20:46.000Z","_content":"","source":"_drafts/touch.md","raw":"---\ntitle: touch\ndate: 2017-03-02 01:20:46\ntags:\n---\n","slug":"touch","published":0,"updated":"2017-09-22T02:19:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymsten0000r7nwfqn3x4d0d","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"web-native-bridge","date":"2017-05-17T16:17:05.000Z","_content":"[H5与Native交互之JSBridge技术](http://tech.youzan.com/jsbridge/)  \n[JS与WebView交互存在的一些问题](http://www.jianshu.com/p/93cea79a2443)\n\n\n## iOS\n### native调js\nstringByEvaluatingJavaScriptFromString,该方法返回js脚本的执行结果。\n### js调用native\n#### 伪协议schema\n+ location.href  缺点:连续多次修改，native只接受到最后一次请求。\n+ iframe\n\n## android\n### native调js\nwebview的loadUrl\n\n### js调用native\n#### 伪协议schema\n和ios一样\n#### 通过在webview页面里直接注入原生js代码方式，使用addJavascriptInterface方法来实现\n向window注入了某个对象，调用对象的方法就会执行native代码\n#### 使用prompt,console.log,alert方式\n\n\n\n\n\n","source":"_drafts/web-native-bridge.md","raw":"---\ntitle: web-native-bridge\ndate: 2017-05-18 00:17:05\ntags:\n---\n[H5与Native交互之JSBridge技术](http://tech.youzan.com/jsbridge/)  \n[JS与WebView交互存在的一些问题](http://www.jianshu.com/p/93cea79a2443)\n\n\n## iOS\n### native调js\nstringByEvaluatingJavaScriptFromString,该方法返回js脚本的执行结果。\n### js调用native\n#### 伪协议schema\n+ location.href  缺点:连续多次修改，native只接受到最后一次请求。\n+ iframe\n\n## android\n### native调js\nwebview的loadUrl\n\n### js调用native\n#### 伪协议schema\n和ios一样\n#### 通过在webview页面里直接注入原生js代码方式，使用addJavascriptInterface方法来实现\n向window注入了某个对象，调用对象的方法就会执行native代码\n#### 使用prompt,console.log,alert方式\n\n\n\n\n\n","slug":"web-native-bridge","published":0,"updated":"2017-09-22T02:19:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymsten0000s7nwfv8zrfwxm","content":"<p><a href=\"http://tech.youzan.com/jsbridge/\" target=\"_blank\" rel=\"noopener\">H5与Native交互之JSBridge技术</a><br><a href=\"http://www.jianshu.com/p/93cea79a2443\" target=\"_blank\" rel=\"noopener\">JS与WebView交互存在的一些问题</a></p>\n<h2 id=\"iOS\"><a href=\"#iOS\" class=\"headerlink\" title=\"iOS\"></a>iOS</h2><h3 id=\"native调js\"><a href=\"#native调js\" class=\"headerlink\" title=\"native调js\"></a>native调js</h3><p>stringByEvaluatingJavaScriptFromString,该方法返回js脚本的执行结果。</p>\n<h3 id=\"js调用native\"><a href=\"#js调用native\" class=\"headerlink\" title=\"js调用native\"></a>js调用native</h3><h4 id=\"伪协议schema\"><a href=\"#伪协议schema\" class=\"headerlink\" title=\"伪协议schema\"></a>伪协议schema</h4><ul>\n<li>location.href  缺点:连续多次修改，native只接受到最后一次请求。</li>\n<li>iframe</li>\n</ul>\n<h2 id=\"android\"><a href=\"#android\" class=\"headerlink\" title=\"android\"></a>android</h2><h3 id=\"native调js-1\"><a href=\"#native调js-1\" class=\"headerlink\" title=\"native调js\"></a>native调js</h3><p>webview的loadUrl</p>\n<h3 id=\"js调用native-1\"><a href=\"#js调用native-1\" class=\"headerlink\" title=\"js调用native\"></a>js调用native</h3><h4 id=\"伪协议schema-1\"><a href=\"#伪协议schema-1\" class=\"headerlink\" title=\"伪协议schema\"></a>伪协议schema</h4><p>和ios一样</p>\n<h4 id=\"通过在webview页面里直接注入原生js代码方式，使用addJavascriptInterface方法来实现\"><a href=\"#通过在webview页面里直接注入原生js代码方式，使用addJavascriptInterface方法来实现\" class=\"headerlink\" title=\"通过在webview页面里直接注入原生js代码方式，使用addJavascriptInterface方法来实现\"></a>通过在webview页面里直接注入原生js代码方式，使用addJavascriptInterface方法来实现</h4><p>向window注入了某个对象，调用对象的方法就会执行native代码</p>\n<h4 id=\"使用prompt-console-log-alert方式\"><a href=\"#使用prompt-console-log-alert方式\" class=\"headerlink\" title=\"使用prompt,console.log,alert方式\"></a>使用prompt,console.log,alert方式</h4>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://tech.youzan.com/jsbridge/\" target=\"_blank\" rel=\"noopener\">H5与Native交互之JSBridge技术</a><br><a href=\"http://www.jianshu.com/p/93cea79a2443\" target=\"_blank\" rel=\"noopener\">JS与WebView交互存在的一些问题</a></p>\n<h2 id=\"iOS\"><a href=\"#iOS\" class=\"headerlink\" title=\"iOS\"></a>iOS</h2><h3 id=\"native调js\"><a href=\"#native调js\" class=\"headerlink\" title=\"native调js\"></a>native调js</h3><p>stringByEvaluatingJavaScriptFromString,该方法返回js脚本的执行结果。</p>\n<h3 id=\"js调用native\"><a href=\"#js调用native\" class=\"headerlink\" title=\"js调用native\"></a>js调用native</h3><h4 id=\"伪协议schema\"><a href=\"#伪协议schema\" class=\"headerlink\" title=\"伪协议schema\"></a>伪协议schema</h4><ul>\n<li>location.href  缺点:连续多次修改，native只接受到最后一次请求。</li>\n<li>iframe</li>\n</ul>\n<h2 id=\"android\"><a href=\"#android\" class=\"headerlink\" title=\"android\"></a>android</h2><h3 id=\"native调js-1\"><a href=\"#native调js-1\" class=\"headerlink\" title=\"native调js\"></a>native调js</h3><p>webview的loadUrl</p>\n<h3 id=\"js调用native-1\"><a href=\"#js调用native-1\" class=\"headerlink\" title=\"js调用native\"></a>js调用native</h3><h4 id=\"伪协议schema-1\"><a href=\"#伪协议schema-1\" class=\"headerlink\" title=\"伪协议schema\"></a>伪协议schema</h4><p>和ios一样</p>\n<h4 id=\"通过在webview页面里直接注入原生js代码方式，使用addJavascriptInterface方法来实现\"><a href=\"#通过在webview页面里直接注入原生js代码方式，使用addJavascriptInterface方法来实现\" class=\"headerlink\" title=\"通过在webview页面里直接注入原生js代码方式，使用addJavascriptInterface方法来实现\"></a>通过在webview页面里直接注入原生js代码方式，使用addJavascriptInterface方法来实现</h4><p>向window注入了某个对象，调用对象的方法就会执行native代码</p>\n<h4 id=\"使用prompt-console-log-alert方式\"><a href=\"#使用prompt-console-log-alert方式\" class=\"headerlink\" title=\"使用prompt,console.log,alert方式\"></a>使用prompt,console.log,alert方式</h4>"},{"title":"vue开发环境搭建","date":"2017-05-06T15:17:51.000Z","_content":"\n## npm依赖\n```json\n\"devDependencies\": {\n    \"vue-loader\": \"^12.0.3\",\n    \"vue-template-compiler\": \"^2.3.2\",\n    \"webpack\": \"^2.5.0\"\n},\n\"dependencies\": {\n  \"vue\": \"^2.3.2\"\n}\n```\n+ webpack2已经可以识别ES6的语法了，可以不使用babel-loader。\n+ vue-loader10以后不再内置vue-template-compiler了，要单独\b安装。\n\n## webpack配置文件(webpack.confg.js)\n\n```\nvar path = require('path');\nvar webpack = require('webpack');\n\nmodule.exports = {\n  entry: './src/main.js',\n  output: {\n    path: path.resolve(__dirname, './dist'),\n    publicPath: '/dist/',\n    filename: 'build.js'\n  },\n  module: {\n    rules: [{\n      test: /\\.vue$/,\n      use: 'vue-loader'\n    }]\n  }\n}\n\n```\n\n## 代码\n+ ./src/main.js\n```javascript\nimport Vue from 'vue'\nimport App from './App.vue'\n\nnew Vue({\n  el: '#app',\n  render: createElement => createElement(App)\n});\n```\n+ ./src/App.vue\n\n```html\n<template>\n  <h2 id=\"container\">\n   {{msg}} \n  </h2>\n</template>\n\n<script>\nexport default {\n  name: 'app',\n  data() {\n    return {\n      msg: 'hello'\n    }\n  }\n}\n</script>\n\n<style>\n#container {\n  background-color: red;\n}\n</style>\n\n```\n\n+ ./index.html\n```html\n<!DOCTYPE html>\n<html>\n<head></head>\n<body>\n  <div id=\"app\"></div>\n  <script src=\"./dist/build.js\"></script>\n</body>\n</html>\n```","source":"_drafts/vue-start.md","raw":"---\ntitle: vue开发环境搭建\ndate: 2017-05-06 23:17:51\ntags:\n---\n\n## npm依赖\n```json\n\"devDependencies\": {\n    \"vue-loader\": \"^12.0.3\",\n    \"vue-template-compiler\": \"^2.3.2\",\n    \"webpack\": \"^2.5.0\"\n},\n\"dependencies\": {\n  \"vue\": \"^2.3.2\"\n}\n```\n+ webpack2已经可以识别ES6的语法了，可以不使用babel-loader。\n+ vue-loader10以后不再内置vue-template-compiler了，要单独\b安装。\n\n## webpack配置文件(webpack.confg.js)\n\n```\nvar path = require('path');\nvar webpack = require('webpack');\n\nmodule.exports = {\n  entry: './src/main.js',\n  output: {\n    path: path.resolve(__dirname, './dist'),\n    publicPath: '/dist/',\n    filename: 'build.js'\n  },\n  module: {\n    rules: [{\n      test: /\\.vue$/,\n      use: 'vue-loader'\n    }]\n  }\n}\n\n```\n\n## 代码\n+ ./src/main.js\n```javascript\nimport Vue from 'vue'\nimport App from './App.vue'\n\nnew Vue({\n  el: '#app',\n  render: createElement => createElement(App)\n});\n```\n+ ./src/App.vue\n\n```html\n<template>\n  <h2 id=\"container\">\n   {{msg}} \n  </h2>\n</template>\n\n<script>\nexport default {\n  name: 'app',\n  data() {\n    return {\n      msg: 'hello'\n    }\n  }\n}\n</script>\n\n<style>\n#container {\n  background-color: red;\n}\n</style>\n\n```\n\n+ ./index.html\n```html\n<!DOCTYPE html>\n<html>\n<head></head>\n<body>\n  <div id=\"app\"></div>\n  <script src=\"./dist/build.js\"></script>\n</body>\n</html>\n```","slug":"vue-start","published":0,"updated":"2017-09-22T02:19:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymsten1000t7nwfb0847453","content":"<h2 id=\"npm依赖\"><a href=\"#npm依赖\" class=\"headerlink\" title=\"npm依赖\"></a>npm依赖</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"devDependencies\": &#123;</span><br><span class=\"line\">    \"vue-loader\": \"^12.0.3\",</span><br><span class=\"line\">    \"vue-template-compiler\": \"^2.3.2\",</span><br><span class=\"line\">    \"webpack\": \"^2.5.0\"</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\"dependencies\": &#123;</span><br><span class=\"line\">  \"vue\": \"^2.3.2\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>webpack2已经可以识别ES6的语法了，可以不使用babel-loader。</li>\n<li>vue-loader10以后不再内置vue-template-compiler了，要单独\b安装。</li>\n</ul>\n<h2 id=\"webpack配置文件-webpack-confg-js\"><a href=\"#webpack配置文件-webpack-confg-js\" class=\"headerlink\" title=\"webpack配置文件(webpack.confg.js)\"></a>webpack配置文件(webpack.confg.js)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var path = require(&apos;path&apos;);</span><br><span class=\"line\">var webpack = require(&apos;webpack&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  entry: &apos;./src/main.js&apos;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, &apos;./dist&apos;),</span><br><span class=\"line\">    publicPath: &apos;/dist/&apos;,</span><br><span class=\"line\">    filename: &apos;build.js&apos;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [&#123;</span><br><span class=\"line\">      test: /\\.vue$/,</span><br><span class=\"line\">      use: &apos;vue-loader&apos;</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><ul>\n<li><p>./src/main.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App.vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">createElement</span> =&gt;</span> createElement(App)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>./src/App.vue</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">   &#123;&#123;msg&#125;&#125; </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  name: <span class=\"string\">'app'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">  data() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      msg: <span class=\"string\">'hello'</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">#container &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  background-color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>./index.html<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./dist/build.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"npm依赖\"><a href=\"#npm依赖\" class=\"headerlink\" title=\"npm依赖\"></a>npm依赖</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"devDependencies\": &#123;</span><br><span class=\"line\">    \"vue-loader\": \"^12.0.3\",</span><br><span class=\"line\">    \"vue-template-compiler\": \"^2.3.2\",</span><br><span class=\"line\">    \"webpack\": \"^2.5.0\"</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\"dependencies\": &#123;</span><br><span class=\"line\">  \"vue\": \"^2.3.2\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>webpack2已经可以识别ES6的语法了，可以不使用babel-loader。</li>\n<li>vue-loader10以后不再内置vue-template-compiler了，要单独\b安装。</li>\n</ul>\n<h2 id=\"webpack配置文件-webpack-confg-js\"><a href=\"#webpack配置文件-webpack-confg-js\" class=\"headerlink\" title=\"webpack配置文件(webpack.confg.js)\"></a>webpack配置文件(webpack.confg.js)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var path = require(&apos;path&apos;);</span><br><span class=\"line\">var webpack = require(&apos;webpack&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  entry: &apos;./src/main.js&apos;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, &apos;./dist&apos;),</span><br><span class=\"line\">    publicPath: &apos;/dist/&apos;,</span><br><span class=\"line\">    filename: &apos;build.js&apos;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [&#123;</span><br><span class=\"line\">      test: /\\.vue$/,</span><br><span class=\"line\">      use: &apos;vue-loader&apos;</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><ul>\n<li><p>./src/main.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App.vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">createElement</span> =&gt;</span> createElement(App)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>./src/App.vue</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">   &#123;&#123;msg&#125;&#125; </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  name: <span class=\"string\">'app'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">  data() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      msg: <span class=\"string\">'hello'</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">#container &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  background-color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>./index.html<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./dist/build.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"vue-tips","date":"2017-05-04T07:11:49.000Z","_content":"\n## 新增自定义事件\n父子组件，可以通过事件通信。是vue自身实现的事件机制和原生dom事件不同。[详情](http://v1-cn.vuejs.org/guide/components.html#自定义事件)\n+ $on\n+ $emit\n+ $dispatch()\n+ $broadcast()\n\n## 父子组件通信\n props down, events up\n\n## 非父子组件通信\n+ 使用一个空的 Vue 实例作为中央事件总线\n```\nvar bus = new Vue();\n\n// 触发组件 A 中的事件\nbus.$emit('id-selected', 1);\n\n\n// 在组件 B 创建的钩子中监听事件\nbus.$on('id-selected', function (id) {\n  // ...\n})\n\n```\n+ [状态管理模式](https://cn.vuejs.org/v2/guide/state-management.html)\n\n\n","source":"_drafts/vue-tips.md","raw":"---\ntitle: vue-tips\ndate: 2017-05-04 15:11:49\ntags:\n---\n\n## 新增自定义事件\n父子组件，可以通过事件通信。是vue自身实现的事件机制和原生dom事件不同。[详情](http://v1-cn.vuejs.org/guide/components.html#自定义事件)\n+ $on\n+ $emit\n+ $dispatch()\n+ $broadcast()\n\n## 父子组件通信\n props down, events up\n\n## 非父子组件通信\n+ 使用一个空的 Vue 实例作为中央事件总线\n```\nvar bus = new Vue();\n\n// 触发组件 A 中的事件\nbus.$emit('id-selected', 1);\n\n\n// 在组件 B 创建的钩子中监听事件\nbus.$on('id-selected', function (id) {\n  // ...\n})\n\n```\n+ [状态管理模式](https://cn.vuejs.org/v2/guide/state-management.html)\n\n\n","slug":"vue-tips","published":0,"updated":"2017-09-22T02:19:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymsten2000u7nwft9h2vwer","content":"<h2 id=\"新增自定义事件\"><a href=\"#新增自定义事件\" class=\"headerlink\" title=\"新增自定义事件\"></a>新增自定义事件</h2><p>父子组件，可以通过事件通信。是vue自身实现的事件机制和原生dom事件不同。<a href=\"http://v1-cn.vuejs.org/guide/components.html#自定义事件\" target=\"_blank\" rel=\"noopener\">详情</a></p>\n<ul>\n<li>$on</li>\n<li>$emit</li>\n<li>$dispatch()</li>\n<li>$broadcast()</li>\n</ul>\n<h2 id=\"父子组件通信\"><a href=\"#父子组件通信\" class=\"headerlink\" title=\"父子组件通信\"></a>父子组件通信</h2><p> props down, events up</p>\n<h2 id=\"非父子组件通信\"><a href=\"#非父子组件通信\" class=\"headerlink\" title=\"非父子组件通信\"></a>非父子组件通信</h2><ul>\n<li><p>使用一个空的 Vue 实例作为中央事件总线</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bus = new Vue();</span><br><span class=\"line\"></span><br><span class=\"line\">// 触发组件 A 中的事件</span><br><span class=\"line\">bus.$emit(&apos;id-selected&apos;, 1);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 在组件 B 创建的钩子中监听事件</span><br><span class=\"line\">bus.$on(&apos;id-selected&apos;, function (id) &#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"https://cn.vuejs.org/v2/guide/state-management.html\" target=\"_blank\" rel=\"noopener\">状态管理模式</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"新增自定义事件\"><a href=\"#新增自定义事件\" class=\"headerlink\" title=\"新增自定义事件\"></a>新增自定义事件</h2><p>父子组件，可以通过事件通信。是vue自身实现的事件机制和原生dom事件不同。<a href=\"http://v1-cn.vuejs.org/guide/components.html#自定义事件\" target=\"_blank\" rel=\"noopener\">详情</a></p>\n<ul>\n<li>$on</li>\n<li>$emit</li>\n<li>$dispatch()</li>\n<li>$broadcast()</li>\n</ul>\n<h2 id=\"父子组件通信\"><a href=\"#父子组件通信\" class=\"headerlink\" title=\"父子组件通信\"></a>父子组件通信</h2><p> props down, events up</p>\n<h2 id=\"非父子组件通信\"><a href=\"#非父子组件通信\" class=\"headerlink\" title=\"非父子组件通信\"></a>非父子组件通信</h2><ul>\n<li><p>使用一个空的 Vue 实例作为中央事件总线</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bus = new Vue();</span><br><span class=\"line\"></span><br><span class=\"line\">// 触发组件 A 中的事件</span><br><span class=\"line\">bus.$emit(&apos;id-selected&apos;, 1);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 在组件 B 创建的钩子中监听事件</span><br><span class=\"line\">bus.$on(&apos;id-selected&apos;, function (id) &#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"https://cn.vuejs.org/v2/guide/state-management.html\" target=\"_blank\" rel=\"noopener\">状态管理模式</a></p>\n</li>\n</ul>\n"},{"title":"webpack学习笔记","date":"2017-01-15T15:37:54.000Z","_content":"\n\n## 打包各种资源的原因\n通过webpack加装器，可以把各种资源（图片、css等）转化为JavaScript\n\n## 引入加装器\n\n+ 代码中引入资源时指定\n```\nrequire(\"!style!css!./style.css\") //载入style.css\n```\n\n+ 打包构建命令中指定\n```\nwebpack entry.js  bundle.js --module-bind 'css=style!css'\n```\n\n+ 配置文件中指定\n\n```\nmodule.exports = {\n  entry: './entry.js',\n  output: {\n    path: __dirname,\n    filename: 'bundle.js'\n  },\n  module: {\n    loaders: [\n      {test: /\\.css$/, loader: 'style!css'}\n    ]\n  } \n}\n```\n\n## 打包进度\n```\nwebpack --progress --colors\n```\n\n## 自动打包\n当文件有变化时，会自动打包\n```\nwebpack --watch\n```\n\n## 开发的服务器\n+ 安装\n```\nnpm install webpack-dev-server -g\n```\n+ 使用\n```\nwebpack-dev-server\n```","source":"_drafts/webpack-learn1.md","raw":"---\ntitle: webpack学习笔记\ndate: 2017-01-15 23:37:54\ntags: webpack\n---\n\n\n## 打包各种资源的原因\n通过webpack加装器，可以把各种资源（图片、css等）转化为JavaScript\n\n## 引入加装器\n\n+ 代码中引入资源时指定\n```\nrequire(\"!style!css!./style.css\") //载入style.css\n```\n\n+ 打包构建命令中指定\n```\nwebpack entry.js  bundle.js --module-bind 'css=style!css'\n```\n\n+ 配置文件中指定\n\n```\nmodule.exports = {\n  entry: './entry.js',\n  output: {\n    path: __dirname,\n    filename: 'bundle.js'\n  },\n  module: {\n    loaders: [\n      {test: /\\.css$/, loader: 'style!css'}\n    ]\n  } \n}\n```\n\n## 打包进度\n```\nwebpack --progress --colors\n```\n\n## 自动打包\n当文件有变化时，会自动打包\n```\nwebpack --watch\n```\n\n## 开发的服务器\n+ 安装\n```\nnpm install webpack-dev-server -g\n```\n+ 使用\n```\nwebpack-dev-server\n```","slug":"webpack-learn1","published":0,"updated":"2017-09-22T02:19:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymsten2000v7nwffn3uzsnl","content":"<h2 id=\"打包各种资源的原因\"><a href=\"#打包各种资源的原因\" class=\"headerlink\" title=\"打包各种资源的原因\"></a>打包各种资源的原因</h2><p>通过webpack加装器，可以把各种资源（图片、css等）转化为JavaScript</p>\n<h2 id=\"引入加装器\"><a href=\"#引入加装器\" class=\"headerlink\" title=\"引入加装器\"></a>引入加装器</h2><ul>\n<li><p>代码中引入资源时指定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require(&quot;!style!css!./style.css&quot;) //载入style.css</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打包构建命令中指定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack entry.js  bundle.js --module-bind &apos;css=style!css&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置文件中指定</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  entry: &apos;./entry.js&apos;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: __dirname,</span><br><span class=\"line\">    filename: &apos;bundle.js&apos;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    loaders: [</span><br><span class=\"line\">      &#123;test: /\\.css$/, loader: &apos;style!css&apos;&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"打包进度\"><a href=\"#打包进度\" class=\"headerlink\" title=\"打包进度\"></a>打包进度</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack --progress --colors</span><br></pre></td></tr></table></figure>\n<h2 id=\"自动打包\"><a href=\"#自动打包\" class=\"headerlink\" title=\"自动打包\"></a>自动打包</h2><p>当文件有变化时，会自动打包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack --watch</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"开发的服务器\"><a href=\"#开发的服务器\" class=\"headerlink\" title=\"开发的服务器\"></a>开发的服务器</h2><ul>\n<li><p>安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack-dev-server -g</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack-dev-server</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"打包各种资源的原因\"><a href=\"#打包各种资源的原因\" class=\"headerlink\" title=\"打包各种资源的原因\"></a>打包各种资源的原因</h2><p>通过webpack加装器，可以把各种资源（图片、css等）转化为JavaScript</p>\n<h2 id=\"引入加装器\"><a href=\"#引入加装器\" class=\"headerlink\" title=\"引入加装器\"></a>引入加装器</h2><ul>\n<li><p>代码中引入资源时指定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require(&quot;!style!css!./style.css&quot;) //载入style.css</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打包构建命令中指定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack entry.js  bundle.js --module-bind &apos;css=style!css&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置文件中指定</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  entry: &apos;./entry.js&apos;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: __dirname,</span><br><span class=\"line\">    filename: &apos;bundle.js&apos;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    loaders: [</span><br><span class=\"line\">      &#123;test: /\\.css$/, loader: &apos;style!css&apos;&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"打包进度\"><a href=\"#打包进度\" class=\"headerlink\" title=\"打包进度\"></a>打包进度</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack --progress --colors</span><br></pre></td></tr></table></figure>\n<h2 id=\"自动打包\"><a href=\"#自动打包\" class=\"headerlink\" title=\"自动打包\"></a>自动打包</h2><p>当文件有变化时，会自动打包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack --watch</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"开发的服务器\"><a href=\"#开发的服务器\" class=\"headerlink\" title=\"开发的服务器\"></a>开发的服务器</h2><ul>\n<li><p>安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack-dev-server -g</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack-dev-server</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"weixin","date":"2017-05-04T16:59:35.000Z","_content":"微信网页授权步骤\n+ 在开发者中心页面配置授权的域名\n+ 引导用户打开授权的链接\n链接包含：用户授权成功后重定向的网页地址和可以自定义的state值。\n可以这样引导：当用户访问任意一页面，如果之前没有授权过的，则重定向到授权链接页面。\n+ 用户同意授权后，通过code获取access_token\ncode是重定向时链接上添加的参数。后台可以拿到code值与公众号的appsecret等信息访问微信后台获取access_token、refresh_token、openid(用户唯一标识)等信息\n+ 获取用户信息\n后台通过access_token、openid（用户唯一标识）拿到用户信息。\n\nps:access_token有时间期限，可通过refresh_token和openid重新获取。\n\n\njsSDK授权\n## 后台的工作\n+ grant_type、appid（公众号的）和secret（公众号的）请求接口获取access_token。\naccess_token一般两小时后失效，需要定时刷新\n+ 通过access_token获取jsapi_ticket\n+ jsapi_ticket、noncestr（随机字符串）、timestamp（时间戳）, url（当前网页的URL，不包含#及其后面部分）生成签名signature\n\n## 前端的工作\n```\nwx.config({\n    debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。\n    appId: '', // 必填，公众号的唯一标识\n    timestamp: , // 必填，生成签名的时间戳\n    nonceStr: '', // 必填，生成签名的随机串\n    signature: '',// 必填，签名，见附录1\n    jsApiList: [] // 必填，需要使用的JS接口列表，所有JS接口列表见附录2\n});\n```","source":"_drafts/weixin.md","raw":"---\ntitle: weixin\ndate: 2017-05-05 00:59:35\ntags:\n---\n微信网页授权步骤\n+ 在开发者中心页面配置授权的域名\n+ 引导用户打开授权的链接\n链接包含：用户授权成功后重定向的网页地址和可以自定义的state值。\n可以这样引导：当用户访问任意一页面，如果之前没有授权过的，则重定向到授权链接页面。\n+ 用户同意授权后，通过code获取access_token\ncode是重定向时链接上添加的参数。后台可以拿到code值与公众号的appsecret等信息访问微信后台获取access_token、refresh_token、openid(用户唯一标识)等信息\n+ 获取用户信息\n后台通过access_token、openid（用户唯一标识）拿到用户信息。\n\nps:access_token有时间期限，可通过refresh_token和openid重新获取。\n\n\njsSDK授权\n## 后台的工作\n+ grant_type、appid（公众号的）和secret（公众号的）请求接口获取access_token。\naccess_token一般两小时后失效，需要定时刷新\n+ 通过access_token获取jsapi_ticket\n+ jsapi_ticket、noncestr（随机字符串）、timestamp（时间戳）, url（当前网页的URL，不包含#及其后面部分）生成签名signature\n\n## 前端的工作\n```\nwx.config({\n    debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。\n    appId: '', // 必填，公众号的唯一标识\n    timestamp: , // 必填，生成签名的时间戳\n    nonceStr: '', // 必填，生成签名的随机串\n    signature: '',// 必填，签名，见附录1\n    jsApiList: [] // 必填，需要使用的JS接口列表，所有JS接口列表见附录2\n});\n```","slug":"weixin","published":0,"updated":"2017-09-22T02:19:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymsten3000w7nwfjja63dfv","content":"<p>微信网页授权步骤</p>\n<ul>\n<li>在开发者中心页面配置授权的域名</li>\n<li>引导用户打开授权的链接<br>链接包含：用户授权成功后重定向的网页地址和可以自定义的state值。<br>可以这样引导：当用户访问任意一页面，如果之前没有授权过的，则重定向到授权链接页面。</li>\n<li>用户同意授权后，通过code获取access_token<br>code是重定向时链接上添加的参数。后台可以拿到code值与公众号的appsecret等信息访问微信后台获取access_token、refresh_token、openid(用户唯一标识)等信息</li>\n<li>获取用户信息<br>后台通过access_token、openid（用户唯一标识）拿到用户信息。</li>\n</ul>\n<p>ps:access_token有时间期限，可通过refresh_token和openid重新获取。</p>\n<p>jsSDK授权</p>\n<h2 id=\"后台的工作\"><a href=\"#后台的工作\" class=\"headerlink\" title=\"后台的工作\"></a>后台的工作</h2><ul>\n<li>grant_type、appid（公众号的）和secret（公众号的）请求接口获取access_token。<br>access_token一般两小时后失效，需要定时刷新</li>\n<li>通过access_token获取jsapi_ticket</li>\n<li>jsapi_ticket、noncestr（随机字符串）、timestamp（时间戳）, url（当前网页的URL，不包含#及其后面部分）生成签名signature</li>\n</ul>\n<h2 id=\"前端的工作\"><a href=\"#前端的工作\" class=\"headerlink\" title=\"前端的工作\"></a>前端的工作</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.config(&#123;</span><br><span class=\"line\">    debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span><br><span class=\"line\">    appId: &apos;&apos;, // 必填，公众号的唯一标识</span><br><span class=\"line\">    timestamp: , // 必填，生成签名的时间戳</span><br><span class=\"line\">    nonceStr: &apos;&apos;, // 必填，生成签名的随机串</span><br><span class=\"line\">    signature: &apos;&apos;,// 必填，签名，见附录1</span><br><span class=\"line\">    jsApiList: [] // 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>微信网页授权步骤</p>\n<ul>\n<li>在开发者中心页面配置授权的域名</li>\n<li>引导用户打开授权的链接<br>链接包含：用户授权成功后重定向的网页地址和可以自定义的state值。<br>可以这样引导：当用户访问任意一页面，如果之前没有授权过的，则重定向到授权链接页面。</li>\n<li>用户同意授权后，通过code获取access_token<br>code是重定向时链接上添加的参数。后台可以拿到code值与公众号的appsecret等信息访问微信后台获取access_token、refresh_token、openid(用户唯一标识)等信息</li>\n<li>获取用户信息<br>后台通过access_token、openid（用户唯一标识）拿到用户信息。</li>\n</ul>\n<p>ps:access_token有时间期限，可通过refresh_token和openid重新获取。</p>\n<p>jsSDK授权</p>\n<h2 id=\"后台的工作\"><a href=\"#后台的工作\" class=\"headerlink\" title=\"后台的工作\"></a>后台的工作</h2><ul>\n<li>grant_type、appid（公众号的）和secret（公众号的）请求接口获取access_token。<br>access_token一般两小时后失效，需要定时刷新</li>\n<li>通过access_token获取jsapi_ticket</li>\n<li>jsapi_ticket、noncestr（随机字符串）、timestamp（时间戳）, url（当前网页的URL，不包含#及其后面部分）生成签名signature</li>\n</ul>\n<h2 id=\"前端的工作\"><a href=\"#前端的工作\" class=\"headerlink\" title=\"前端的工作\"></a>前端的工作</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.config(&#123;</span><br><span class=\"line\">    debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span><br><span class=\"line\">    appId: &apos;&apos;, // 必填，公众号的唯一标识</span><br><span class=\"line\">    timestamp: , // 必填，生成签名的时间戳</span><br><span class=\"line\">    nonceStr: &apos;&apos;, // 必填，生成签名的随机串</span><br><span class=\"line\">    signature: &apos;&apos;,// 必填，签名，见附录1</span><br><span class=\"line\">    jsApiList: [] // 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>"},{"title":"跨站脚本攻击","date":"2017-05-16T13:15:42.000Z","_content":"## 类型\n+ 存储型\n恶意代码已经在服务器，是之前就被提交到服务器的。  \n当用户访问正常的页面链接时，返回的页面已经含有恶意代码了。\n+ 反射型\n正常的链接被修改后，发起了请求。后台把链接中的恶意信息放到了响应的页面中。\n+ 基于dom的\n页面的代码是正常的，但是执行过程中获取了外部信息，并展示到页面中导致发生问题。\n外部信息：url、window.sessionStorage、window.localStorage、window.name等","source":"_drafts/xss.md","raw":"---\ntitle: 跨站脚本攻击 \ndate: 2017-05-16 21:15:42\ntags:\n---\n## 类型\n+ 存储型\n恶意代码已经在服务器，是之前就被提交到服务器的。  \n当用户访问正常的页面链接时，返回的页面已经含有恶意代码了。\n+ 反射型\n正常的链接被修改后，发起了请求。后台把链接中的恶意信息放到了响应的页面中。\n+ 基于dom的\n页面的代码是正常的，但是执行过程中获取了外部信息，并展示到页面中导致发生问题。\n外部信息：url、window.sessionStorage、window.localStorage、window.name等","slug":"xss","published":0,"updated":"2017-09-22T02:19:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymsten3000x7nwf0aoaq18s","content":"<h2 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h2><ul>\n<li>存储型<br>恶意代码已经在服务器，是之前就被提交到服务器的。<br>当用户访问正常的页面链接时，返回的页面已经含有恶意代码了。</li>\n<li>反射型<br>正常的链接被修改后，发起了请求。后台把链接中的恶意信息放到了响应的页面中。</li>\n<li>基于dom的<br>页面的代码是正常的，但是执行过程中获取了外部信息，并展示到页面中导致发生问题。<br>外部信息：url、window.sessionStorage、window.localStorage、window.name等</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h2><ul>\n<li>存储型<br>恶意代码已经在服务器，是之前就被提交到服务器的。<br>当用户访问正常的页面链接时，返回的页面已经含有恶意代码了。</li>\n<li>反射型<br>正常的链接被修改后，发起了请求。后台把链接中的恶意信息放到了响应的页面中。</li>\n<li>基于dom的<br>页面的代码是正常的，但是执行过程中获取了外部信息，并展示到页面中导致发生问题。<br>外部信息：url、window.sessionStorage、window.localStorage、window.name等</li>\n</ul>\n"},{"title":"初探RxJS","date":"2019-07-28T09:27:35.000Z","_content":"# RxJS是什么\nRxJS是一个库，可以很方便地编写异步和基于事件的程序。  \n关注的重点在数据的产生和发送，是基于Push的。\n\n\n## Pull和Push\n在Pull系统，消费者决定什么时候接受来自生成者的数据。  \n在Push系统，生产者决定什么时候把数据发送给消费者。  \n\n举个通俗易懂的例子：  \n+ 组长8点前让我交了作业。(Pull)\n+ 组员8点前把作业交给了组长。(Push)    \n\n两种情况，都得到一样的结果，组长在8点前收到了作业，但过程是不一样的。是组长主动，还是组员主动的区别。\n\n# RxJS的使用\n看着例子可能更容易理解，上面是一般写法，下面是RxJS写法。\n\n+ 简单输出\n\n\n```javascript\n// 生产者部分\nfunction foo() {\n  return 'Hello';\n}\n// 消费者部分\nconst x = foo.call(); // 主动获取数据\nconsole.log(x);\n\n/**\n * output:\n * Hello\n * /\n```\n\n```javascript\nconst { Observable } = require('rxjs');\n// 生产者部分\nconst ob = new Observable((subscriber) => {\n  subscriber.next('Hello'); // 主动发送数据\n})\n// 消费者部分\nob.subscribe((x)=>{\n  console.log(x);\n})\n\n/**\n * output:\n * Hello\n * /\n\n```\n使用rxjs看起来复杂一点，因为功能比较简单   \n\n-----\n\n + 每隔1秒输出一次\n\n```javascript\n// 生产者部分\nfunction foo() {\n  return \"hello\";\n}\n// 消费者部分\nsetInterval(() => {\n  const x = foo.call();\n  console.log(x);\n}, 1000);\n```\n\n```javascript\nconst { Observable } = require('rxjs');\n// 生产者部分\nconst ob = new Observable((subscriber) => {\n  setInterval(() => {\n    subscriber.next(\"hello\");\n  }, 1000);\n})\n\n// 消费者部分\nob.subscribe((x) => {\n  console.log(x);\n});\n```\n消费者其实只要输出内容就可以了，不需要了解内容是如何产生，及何时到达的\n\n-----\n\n+ 同时进行每隔1秒输出一次  \n\n```javascript\n// 生产者部分\nfunction foo() {\n  return \"hello\";\n}\n// 消费者部分\nsetInterval(() => {\n  const x = foo.call();\n  console.log(x);\n}, 1000);\nsetInterval(() => {\n  const x = foo.call();\n  console.log(x);\n}, 1000);\n```\n\n```javascript\nconst { Observable } = require('rxjs');\n// 生产者部分\nconst ob = new Observable((subscriber) => {\n  setInterval(() => {\n    subscriber.next(\"hello\");\n  }, 1000);\n})\n\n// 消费者部分\nob.subscribe((x) => {\n  console.log(x);\n});\nob.subscribe((x) => {\n  console.log(x);\n});\n\n```\n使用RxJS看起来更简单一点，职责也清晰很多。\n\n# 总结\n\n刚接触RxJS，给我的印象是，当原始数据的产生和处理比较复杂时，使用RxJS可能更方便。  \n感觉它是Promise和事件订阅的结合体。\n","source":"_posts/rxjs-start.md","raw":"---\ntitle: 初探RxJS\ndate: 2019-07-28 17:27:35\ntags:\n---\n# RxJS是什么\nRxJS是一个库，可以很方便地编写异步和基于事件的程序。  \n关注的重点在数据的产生和发送，是基于Push的。\n\n\n## Pull和Push\n在Pull系统，消费者决定什么时候接受来自生成者的数据。  \n在Push系统，生产者决定什么时候把数据发送给消费者。  \n\n举个通俗易懂的例子：  \n+ 组长8点前让我交了作业。(Pull)\n+ 组员8点前把作业交给了组长。(Push)    \n\n两种情况，都得到一样的结果，组长在8点前收到了作业，但过程是不一样的。是组长主动，还是组员主动的区别。\n\n# RxJS的使用\n看着例子可能更容易理解，上面是一般写法，下面是RxJS写法。\n\n+ 简单输出\n\n\n```javascript\n// 生产者部分\nfunction foo() {\n  return 'Hello';\n}\n// 消费者部分\nconst x = foo.call(); // 主动获取数据\nconsole.log(x);\n\n/**\n * output:\n * Hello\n * /\n```\n\n```javascript\nconst { Observable } = require('rxjs');\n// 生产者部分\nconst ob = new Observable((subscriber) => {\n  subscriber.next('Hello'); // 主动发送数据\n})\n// 消费者部分\nob.subscribe((x)=>{\n  console.log(x);\n})\n\n/**\n * output:\n * Hello\n * /\n\n```\n使用rxjs看起来复杂一点，因为功能比较简单   \n\n-----\n\n + 每隔1秒输出一次\n\n```javascript\n// 生产者部分\nfunction foo() {\n  return \"hello\";\n}\n// 消费者部分\nsetInterval(() => {\n  const x = foo.call();\n  console.log(x);\n}, 1000);\n```\n\n```javascript\nconst { Observable } = require('rxjs');\n// 生产者部分\nconst ob = new Observable((subscriber) => {\n  setInterval(() => {\n    subscriber.next(\"hello\");\n  }, 1000);\n})\n\n// 消费者部分\nob.subscribe((x) => {\n  console.log(x);\n});\n```\n消费者其实只要输出内容就可以了，不需要了解内容是如何产生，及何时到达的\n\n-----\n\n+ 同时进行每隔1秒输出一次  \n\n```javascript\n// 生产者部分\nfunction foo() {\n  return \"hello\";\n}\n// 消费者部分\nsetInterval(() => {\n  const x = foo.call();\n  console.log(x);\n}, 1000);\nsetInterval(() => {\n  const x = foo.call();\n  console.log(x);\n}, 1000);\n```\n\n```javascript\nconst { Observable } = require('rxjs');\n// 生产者部分\nconst ob = new Observable((subscriber) => {\n  setInterval(() => {\n    subscriber.next(\"hello\");\n  }, 1000);\n})\n\n// 消费者部分\nob.subscribe((x) => {\n  console.log(x);\n});\nob.subscribe((x) => {\n  console.log(x);\n});\n\n```\n使用RxJS看起来更简单一点，职责也清晰很多。\n\n# 总结\n\n刚接触RxJS，给我的印象是，当原始数据的产生和处理比较复杂时，使用RxJS可能更方便。  \n感觉它是Promise和事件订阅的结合体。\n","slug":"rxjs-start","published":1,"updated":"2019-07-28T12:42:39.000Z","_id":"cjymsten4000y7nwflarvh7bm","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"RxJS是什么\"><a href=\"#RxJS是什么\" class=\"headerlink\" title=\"RxJS是什么\"></a>RxJS是什么</h1><p>RxJS是一个库，可以很方便地编写异步和基于事件的程序。<br>关注的重点在数据的产生和发送，是基于Push的。</p>\n<h2 id=\"Pull和Push\"><a href=\"#Pull和Push\" class=\"headerlink\" title=\"Pull和Push\"></a>Pull和Push</h2><p>在Pull系统，消费者决定什么时候接受来自生成者的数据。<br>在Push系统，生产者决定什么时候把数据发送给消费者。  </p>\n<p>举个通俗易懂的例子：  </p>\n<ul>\n<li>组长8点前让我交了作业。(Pull)</li>\n<li>组员8点前把作业交给了组长。(Push)    </li>\n</ul>\n<p>两种情况，都得到一样的结果，组长在8点前收到了作业，但过程是不一样的。是组长主动，还是组员主动的区别。</p>\n<h1 id=\"RxJS的使用\"><a href=\"#RxJS的使用\" class=\"headerlink\" title=\"RxJS的使用\"></a>RxJS的使用</h1><p>看着例子可能更容易理解，上面是一般写法，下面是RxJS写法。</p>\n<ul>\n<li>简单输出</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 生产者部分</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'Hello'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 消费者部分</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> x = foo.call(); <span class=\"comment\">// 主动获取数据</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * output:</span></span><br><span class=\"line\"><span class=\"comment\"> * Hello</span></span><br><span class=\"line\"><span class=\"comment\"> * /</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; Observable &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'rxjs'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 生产者部分</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ob = <span class=\"keyword\">new</span> Observable(<span class=\"function\">(<span class=\"params\">subscriber</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  subscriber.next(<span class=\"string\">'Hello'</span>); <span class=\"comment\">// 主动发送数据</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 消费者部分</span></span><br><span class=\"line\">ob.subscribe(<span class=\"function\">(<span class=\"params\">x</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * output:</span></span><br><span class=\"line\"><span class=\"comment\"> * Hello</span></span><br><span class=\"line\"><span class=\"comment\"> * /</span></span><br></pre></td></tr></table></figure>\n<p>使用rxjs看起来复杂一点，因为功能比较简单   </p>\n<hr>\n<ul>\n<li>每隔1秒输出一次</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 生产者部分</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 消费者部分</span></span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> x = foo.call();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; Observable &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'rxjs'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 生产者部分</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ob = <span class=\"keyword\">new</span> Observable(<span class=\"function\">(<span class=\"params\">subscriber</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    subscriber.next(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 消费者部分</span></span><br><span class=\"line\">ob.subscribe(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>消费者其实只要输出内容就可以了，不需要了解内容是如何产生，及何时到达的</p>\n<hr>\n<ul>\n<li>同时进行每隔1秒输出一次  </li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 生产者部分</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 消费者部分</span></span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> x = foo.call();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> x = foo.call();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; Observable &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'rxjs'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 生产者部分</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ob = <span class=\"keyword\">new</span> Observable(<span class=\"function\">(<span class=\"params\">subscriber</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    subscriber.next(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 消费者部分</span></span><br><span class=\"line\">ob.subscribe(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">ob.subscribe(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>使用RxJS看起来更简单一点，职责也清晰很多。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>刚接触RxJS，给我的印象是，当原始数据的产生和处理比较复杂时，使用RxJS可能更方便。<br>感觉它是Promise和事件订阅的结合体。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"RxJS是什么\"><a href=\"#RxJS是什么\" class=\"headerlink\" title=\"RxJS是什么\"></a>RxJS是什么</h1><p>RxJS是一个库，可以很方便地编写异步和基于事件的程序。<br>关注的重点在数据的产生和发送，是基于Push的。</p>\n<h2 id=\"Pull和Push\"><a href=\"#Pull和Push\" class=\"headerlink\" title=\"Pull和Push\"></a>Pull和Push</h2><p>在Pull系统，消费者决定什么时候接受来自生成者的数据。<br>在Push系统，生产者决定什么时候把数据发送给消费者。  </p>\n<p>举个通俗易懂的例子：  </p>\n<ul>\n<li>组长8点前让我交了作业。(Pull)</li>\n<li>组员8点前把作业交给了组长。(Push)    </li>\n</ul>\n<p>两种情况，都得到一样的结果，组长在8点前收到了作业，但过程是不一样的。是组长主动，还是组员主动的区别。</p>\n<h1 id=\"RxJS的使用\"><a href=\"#RxJS的使用\" class=\"headerlink\" title=\"RxJS的使用\"></a>RxJS的使用</h1><p>看着例子可能更容易理解，上面是一般写法，下面是RxJS写法。</p>\n<ul>\n<li>简单输出</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 生产者部分</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'Hello'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 消费者部分</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> x = foo.call(); <span class=\"comment\">// 主动获取数据</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * output:</span></span><br><span class=\"line\"><span class=\"comment\"> * Hello</span></span><br><span class=\"line\"><span class=\"comment\"> * /</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; Observable &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'rxjs'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 生产者部分</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ob = <span class=\"keyword\">new</span> Observable(<span class=\"function\">(<span class=\"params\">subscriber</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  subscriber.next(<span class=\"string\">'Hello'</span>); <span class=\"comment\">// 主动发送数据</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 消费者部分</span></span><br><span class=\"line\">ob.subscribe(<span class=\"function\">(<span class=\"params\">x</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * output:</span></span><br><span class=\"line\"><span class=\"comment\"> * Hello</span></span><br><span class=\"line\"><span class=\"comment\"> * /</span></span><br></pre></td></tr></table></figure>\n<p>使用rxjs看起来复杂一点，因为功能比较简单   </p>\n<hr>\n<ul>\n<li>每隔1秒输出一次</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 生产者部分</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 消费者部分</span></span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> x = foo.call();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; Observable &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'rxjs'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 生产者部分</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ob = <span class=\"keyword\">new</span> Observable(<span class=\"function\">(<span class=\"params\">subscriber</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    subscriber.next(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 消费者部分</span></span><br><span class=\"line\">ob.subscribe(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>消费者其实只要输出内容就可以了，不需要了解内容是如何产生，及何时到达的</p>\n<hr>\n<ul>\n<li>同时进行每隔1秒输出一次  </li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 生产者部分</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 消费者部分</span></span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> x = foo.call();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> x = foo.call();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; Observable &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'rxjs'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 生产者部分</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ob = <span class=\"keyword\">new</span> Observable(<span class=\"function\">(<span class=\"params\">subscriber</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    subscriber.next(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 消费者部分</span></span><br><span class=\"line\">ob.subscribe(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">ob.subscribe(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>使用RxJS看起来更简单一点，职责也清晰很多。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>刚接触RxJS，给我的印象是，当原始数据的产生和处理比较复杂时，使用RxJS可能更方便。<br>感觉它是Promise和事件订阅的结合体。</p>\n"},{"title":"用log4js发送邮件","date":"2018-02-25T15:52:38.000Z","_content":"\nlog4js-node是node上的日志输出工具，有很多方便好用的功能，发送邮件是其中一项。\n\n## 安装\nnpm install log4js\n\n\n## 简单介绍\n1.x and 2.x在API\b上有所区别，这里针对的是2.x\n\n### 配置 - log4js.configure(object || string)\n\bobject包含配置信息；string可以是配置文件的路径  \n配置中主要有两个比较重要的属性：categories和appenders  \n\n+ appenders  \n定义是了日志的输出形式，可以是stdout（标准输出流）、file（文件）、smtp（邮件\u001b）等\n\n+ categories  \n类别或者说是分组。可以定义类别\b名称，每个\b类别下指定有哪些appenders。在进行\b日志输出时，是可以选择类别的。则日志会以该类别下的各个appenders对应的形式输出。  \ncategories中还可以指定level，\b低于该level的日志是不会发送到appenders的\n\n+ 日志级别level  \nALL < TRACE < DEBUG < INFO < WARN < ERROR < FATAL < MARK < OFF\n\n### 日志记录器 - log4js.getLogger([category])\n指定了类别，\b\b获得一个日志记录器。日志记录器的日志会按照该类别的设置进行输出。要输出日志，调用各级别的方法\b即可。\n```\nvar logger=log4js.getLogger()  //不指定类别，默认是defualt\b类别\nlogger.debug('hello')\nlogger.info('hello')\nlogger.warn('hello')\nlogger.error('hello')\n```\n\n## 邮件发送\n由xxxx@163.com发送一封邮件给xxxx@qq.com，邮件中含有附件。\n\n```\nvar log4js = require('log4js')\nlog4js.configure({\n  appenders: {\n    file: {\n      type: 'file',\n      filename: 'test-log.log'\n    },\n    email: {\n      type: \"smtp\",\n      recipients: \"xxxx@qq.com\", //可以多个，\b用,隔开\n      subject: \"test-log\",//邮件标题\n      sender: \"xxxx@163.com\",//发送者\n      attachment: { //如果不需要附件删掉这个即可\n        enable: true,\n        filename: \"test-log.log\", //附件文件名\n        message: \"附件\" //附件名称\n      },\n      transport: {\n        plugin: \"smtp\",\n        options: {\n          host: \"smtp.163.com\",//\b不同邮件服务\b商的主机名是不同的。登录\b对应邮箱，在POP3/SMTP/IMAP设置中查看。\n          port: 465,\n          secure: true, // true for 465, false for other ports\n          auth: {\n            user: \"xxxx@163.com\",//发送\b者邮箱\n            pass: \"xxxx\" //\b邮箱密码\b或者是授权码\n          }\n        }\n      },\n      html: false,//内容是html还是纯文本形式\n      sendInterval: 0 //秒。每个多少秒后，把收集到的日志信息发送出去\n    }\n  },\n  categories: {\n    default: {\n      appenders: ['file', 'email'],\n      level: 'debug'\n    }\n  }\n})\nvar logger = log4js.getLogger()\nlogger.debug(\"test email width log4js\")\n\n```\n\n\n\n\n\n\n\n\n\n","source":"_posts/log4js-email.md","raw":"---\ntitle: 用log4js发送邮件\ndate: 2018-02-25 23:52:38\ntags:\n---\n\nlog4js-node是node上的日志输出工具，有很多方便好用的功能，发送邮件是其中一项。\n\n## 安装\nnpm install log4js\n\n\n## 简单介绍\n1.x and 2.x在API\b上有所区别，这里针对的是2.x\n\n### 配置 - log4js.configure(object || string)\n\bobject包含配置信息；string可以是配置文件的路径  \n配置中主要有两个比较重要的属性：categories和appenders  \n\n+ appenders  \n定义是了日志的输出形式，可以是stdout（标准输出流）、file（文件）、smtp（邮件\u001b）等\n\n+ categories  \n类别或者说是分组。可以定义类别\b名称，每个\b类别下指定有哪些appenders。在进行\b日志输出时，是可以选择类别的。则日志会以该类别下的各个appenders对应的形式输出。  \ncategories中还可以指定level，\b低于该level的日志是不会发送到appenders的\n\n+ 日志级别level  \nALL < TRACE < DEBUG < INFO < WARN < ERROR < FATAL < MARK < OFF\n\n### 日志记录器 - log4js.getLogger([category])\n指定了类别，\b\b获得一个日志记录器。日志记录器的日志会按照该类别的设置进行输出。要输出日志，调用各级别的方法\b即可。\n```\nvar logger=log4js.getLogger()  //不指定类别，默认是defualt\b类别\nlogger.debug('hello')\nlogger.info('hello')\nlogger.warn('hello')\nlogger.error('hello')\n```\n\n## 邮件发送\n由xxxx@163.com发送一封邮件给xxxx@qq.com，邮件中含有附件。\n\n```\nvar log4js = require('log4js')\nlog4js.configure({\n  appenders: {\n    file: {\n      type: 'file',\n      filename: 'test-log.log'\n    },\n    email: {\n      type: \"smtp\",\n      recipients: \"xxxx@qq.com\", //可以多个，\b用,隔开\n      subject: \"test-log\",//邮件标题\n      sender: \"xxxx@163.com\",//发送者\n      attachment: { //如果不需要附件删掉这个即可\n        enable: true,\n        filename: \"test-log.log\", //附件文件名\n        message: \"附件\" //附件名称\n      },\n      transport: {\n        plugin: \"smtp\",\n        options: {\n          host: \"smtp.163.com\",//\b不同邮件服务\b商的主机名是不同的。登录\b对应邮箱，在POP3/SMTP/IMAP设置中查看。\n          port: 465,\n          secure: true, // true for 465, false for other ports\n          auth: {\n            user: \"xxxx@163.com\",//发送\b者邮箱\n            pass: \"xxxx\" //\b邮箱密码\b或者是授权码\n          }\n        }\n      },\n      html: false,//内容是html还是纯文本形式\n      sendInterval: 0 //秒。每个多少秒后，把收集到的日志信息发送出去\n    }\n  },\n  categories: {\n    default: {\n      appenders: ['file', 'email'],\n      level: 'debug'\n    }\n  }\n})\nvar logger = log4js.getLogger()\nlogger.debug(\"test email width log4js\")\n\n```\n\n\n\n\n\n\n\n\n\n","slug":"log4js-email","published":1,"updated":"2018-02-25T15:52:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymsten4000z7nwfq8tp8vrt","content":"<p>log4js-node是node上的日志输出工具，有很多方便好用的功能，发送邮件是其中一项。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>npm install log4js</p>\n<h2 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍\"></a>简单介绍</h2><p>1.x and 2.x在API\b上有所区别，这里针对的是2.x</p>\n<h3 id=\"配置-log4js-configure-object-string\"><a href=\"#配置-log4js-configure-object-string\" class=\"headerlink\" title=\"配置 - log4js.configure(object || string)\"></a>配置 - log4js.configure(object || string)</h3><p>\bobject包含配置信息；string可以是配置文件的路径<br>配置中主要有两个比较重要的属性：categories和appenders  </p>\n<ul>\n<li><p>appenders<br>定义是了日志的输出形式，可以是stdout（标准输出流）、file（文件）、smtp（邮件\u001b）等</p>\n</li>\n<li><p>categories<br>类别或者说是分组。可以定义类别\b名称，每个\b类别下指定有哪些appenders。在进行\b日志输出时，是可以选择类别的。则日志会以该类别下的各个appenders对应的形式输出。<br>categories中还可以指定level，\b低于该level的日志是不会发送到appenders的</p>\n</li>\n<li><p>日志级别level<br>ALL &lt; TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL &lt; MARK &lt; OFF</p>\n</li>\n</ul>\n<h3 id=\"日志记录器-log4js-getLogger-category\"><a href=\"#日志记录器-log4js-getLogger-category\" class=\"headerlink\" title=\"日志记录器 - log4js.getLogger([category])\"></a>日志记录器 - log4js.getLogger([category])</h3><p>指定了类别，\b\b获得一个日志记录器。日志记录器的日志会按照该类别的设置进行输出。要输出日志，调用各级别的方法\b即可。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var logger=log4js.getLogger()  //不指定类别，默认是defualt\b类别</span><br><span class=\"line\">logger.debug(&apos;hello&apos;)</span><br><span class=\"line\">logger.info(&apos;hello&apos;)</span><br><span class=\"line\">logger.warn(&apos;hello&apos;)</span><br><span class=\"line\">logger.error(&apos;hello&apos;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"邮件发送\"><a href=\"#邮件发送\" class=\"headerlink\" title=\"邮件发送\"></a>邮件发送</h2><p>由<a href=\"mailto:xxxx@163.com\" target=\"_blank\" rel=\"noopener\">xxxx@163.com</a>发送一封邮件给<a href=\"mailto:xxxx@qq.com\" target=\"_blank\" rel=\"noopener\">xxxx@qq.com</a>，邮件中含有附件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var log4js = require(&apos;log4js&apos;)</span><br><span class=\"line\">log4js.configure(&#123;</span><br><span class=\"line\">  appenders: &#123;</span><br><span class=\"line\">    file: &#123;</span><br><span class=\"line\">      type: &apos;file&apos;,</span><br><span class=\"line\">      filename: &apos;test-log.log&apos;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    email: &#123;</span><br><span class=\"line\">      type: &quot;smtp&quot;,</span><br><span class=\"line\">      recipients: &quot;xxxx@qq.com&quot;, //可以多个，\b用,隔开</span><br><span class=\"line\">      subject: &quot;test-log&quot;,//邮件标题</span><br><span class=\"line\">      sender: &quot;xxxx@163.com&quot;,//发送者</span><br><span class=\"line\">      attachment: &#123; //如果不需要附件删掉这个即可</span><br><span class=\"line\">        enable: true,</span><br><span class=\"line\">        filename: &quot;test-log.log&quot;, //附件文件名</span><br><span class=\"line\">        message: &quot;附件&quot; //附件名称</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      transport: &#123;</span><br><span class=\"line\">        plugin: &quot;smtp&quot;,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          host: &quot;smtp.163.com&quot;,//\b不同邮件服务\b商的主机名是不同的。登录\b对应邮箱，在POP3/SMTP/IMAP设置中查看。</span><br><span class=\"line\">          port: 465,</span><br><span class=\"line\">          secure: true, // true for 465, false for other ports</span><br><span class=\"line\">          auth: &#123;</span><br><span class=\"line\">            user: &quot;xxxx@163.com&quot;,//发送\b者邮箱</span><br><span class=\"line\">            pass: &quot;xxxx&quot; //\b邮箱密码\b或者是授权码</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      html: false,//内容是html还是纯文本形式</span><br><span class=\"line\">      sendInterval: 0 //秒。每个多少秒后，把收集到的日志信息发送出去</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  categories: &#123;</span><br><span class=\"line\">    default: &#123;</span><br><span class=\"line\">      appenders: [&apos;file&apos;, &apos;email&apos;],</span><br><span class=\"line\">      level: &apos;debug&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">var logger = log4js.getLogger()</span><br><span class=\"line\">logger.debug(&quot;test email width log4js&quot;)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>log4js-node是node上的日志输出工具，有很多方便好用的功能，发送邮件是其中一项。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>npm install log4js</p>\n<h2 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍\"></a>简单介绍</h2><p>1.x and 2.x在API\b上有所区别，这里针对的是2.x</p>\n<h3 id=\"配置-log4js-configure-object-string\"><a href=\"#配置-log4js-configure-object-string\" class=\"headerlink\" title=\"配置 - log4js.configure(object || string)\"></a>配置 - log4js.configure(object || string)</h3><p>\bobject包含配置信息；string可以是配置文件的路径<br>配置中主要有两个比较重要的属性：categories和appenders  </p>\n<ul>\n<li><p>appenders<br>定义是了日志的输出形式，可以是stdout（标准输出流）、file（文件）、smtp（邮件\u001b）等</p>\n</li>\n<li><p>categories<br>类别或者说是分组。可以定义类别\b名称，每个\b类别下指定有哪些appenders。在进行\b日志输出时，是可以选择类别的。则日志会以该类别下的各个appenders对应的形式输出。<br>categories中还可以指定level，\b低于该level的日志是不会发送到appenders的</p>\n</li>\n<li><p>日志级别level<br>ALL &lt; TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL &lt; MARK &lt; OFF</p>\n</li>\n</ul>\n<h3 id=\"日志记录器-log4js-getLogger-category\"><a href=\"#日志记录器-log4js-getLogger-category\" class=\"headerlink\" title=\"日志记录器 - log4js.getLogger([category])\"></a>日志记录器 - log4js.getLogger([category])</h3><p>指定了类别，\b\b获得一个日志记录器。日志记录器的日志会按照该类别的设置进行输出。要输出日志，调用各级别的方法\b即可。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var logger=log4js.getLogger()  //不指定类别，默认是defualt\b类别</span><br><span class=\"line\">logger.debug(&apos;hello&apos;)</span><br><span class=\"line\">logger.info(&apos;hello&apos;)</span><br><span class=\"line\">logger.warn(&apos;hello&apos;)</span><br><span class=\"line\">logger.error(&apos;hello&apos;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"邮件发送\"><a href=\"#邮件发送\" class=\"headerlink\" title=\"邮件发送\"></a>邮件发送</h2><p>由<a href=\"mailto:xxxx@163.com\" target=\"_blank\" rel=\"noopener\">xxxx@163.com</a>发送一封邮件给<a href=\"mailto:xxxx@qq.com\" target=\"_blank\" rel=\"noopener\">xxxx@qq.com</a>，邮件中含有附件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var log4js = require(&apos;log4js&apos;)</span><br><span class=\"line\">log4js.configure(&#123;</span><br><span class=\"line\">  appenders: &#123;</span><br><span class=\"line\">    file: &#123;</span><br><span class=\"line\">      type: &apos;file&apos;,</span><br><span class=\"line\">      filename: &apos;test-log.log&apos;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    email: &#123;</span><br><span class=\"line\">      type: &quot;smtp&quot;,</span><br><span class=\"line\">      recipients: &quot;xxxx@qq.com&quot;, //可以多个，\b用,隔开</span><br><span class=\"line\">      subject: &quot;test-log&quot;,//邮件标题</span><br><span class=\"line\">      sender: &quot;xxxx@163.com&quot;,//发送者</span><br><span class=\"line\">      attachment: &#123; //如果不需要附件删掉这个即可</span><br><span class=\"line\">        enable: true,</span><br><span class=\"line\">        filename: &quot;test-log.log&quot;, //附件文件名</span><br><span class=\"line\">        message: &quot;附件&quot; //附件名称</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      transport: &#123;</span><br><span class=\"line\">        plugin: &quot;smtp&quot;,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          host: &quot;smtp.163.com&quot;,//\b不同邮件服务\b商的主机名是不同的。登录\b对应邮箱，在POP3/SMTP/IMAP设置中查看。</span><br><span class=\"line\">          port: 465,</span><br><span class=\"line\">          secure: true, // true for 465, false for other ports</span><br><span class=\"line\">          auth: &#123;</span><br><span class=\"line\">            user: &quot;xxxx@163.com&quot;,//发送\b者邮箱</span><br><span class=\"line\">            pass: &quot;xxxx&quot; //\b邮箱密码\b或者是授权码</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      html: false,//内容是html还是纯文本形式</span><br><span class=\"line\">      sendInterval: 0 //秒。每个多少秒后，把收集到的日志信息发送出去</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  categories: &#123;</span><br><span class=\"line\">    default: &#123;</span><br><span class=\"line\">      appenders: [&apos;file&apos;, &apos;email&apos;],</span><br><span class=\"line\">      level: &apos;debug&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">var logger = log4js.getLogger()</span><br><span class=\"line\">logger.debug(&quot;test email width log4js&quot;)</span><br></pre></td></tr></table></figure>\n"},{"title":"Vuex的state是如何具有响应式的","date":"2019-07-21T12:32:48.000Z","_content":"## 前言\nVuex是Vue的状态管理方案，可以让各组件共享状态数据，降低了相互之间通信的复杂度。  \n当更新Vuex的state数据时，发现引用到state数据的组件页面也会同时更新。可见state数据也是响应式的，其作用效果和Vue组件的data数据一致。   \n     \n究竟是如何实现的呢，直接撸源码看看它的秘密。源码都来源于[3.1.1版本](https://github.com/vuejs/vuex/tree/ffc7d00314a371c09d288bc5123793031d182cd2)。\n\n## 研究\n下面是Vuex的一个简单使用例子\n\n```javascript\nvar store = new Vuex.Store({\n  state:{\n    count:0\n  }\n});\nvar app = new Vue({\n  el:'#app',\n  store:store,\n  template: '<div>{{$store.state.count}}</div>'\n});\napp.$mount();\n\n```\n当发现执行下面的代码，页面内容从0变成了1，从头到尾仅仅只改变了count的值而已，就好像count字段直接定义在组件的data数据里一样，具有响应式。\n```javascript\nstore.state.count = store.state.count +1;\n```\n-------------   \n\n来看看Store的构造方法，在[/src/store.js](https://github.com/vuejs/vuex/blob/ffc7d00314a371c09d288bc5123793031d182cd2/src/store.js)中，由于比较长，挑了重点来看。经过一系列的处理（不需要深究），把得到的state传入resetStoreVM方法。\n```javascript\nconstructor (options = {}) {\n    // 省略一堆\n    this._modules = new ModuleCollection(options)\n    // 省略一堆\n    const state = this._modules.root.state\n\n    // init root module.\n    // this also recursively registers all sub-modules\n    // and collects all module getters inside this._wrappedGetters\n    installModule(this, state, [], this._modules.root)\n\n    // initialize the store vm, which is responsible for the reactivity\n    // (also registers _wrappedGetters as computed properties)\n    resetStoreVM(this, state)\n\n    // 省略一堆\n}\n\n```\n\n来看看resetStoreVM的实现\n```javascript\nfunction resetStoreVM (store, state, hot) {\n  // 省略一堆\n  store._vm = new Vue({\n    data: {\n      $$state: state\n    },\n    computed\n  })\n  // 省略一堆\n}\n\n```\n\n原来state的数据其实就是Vue实例的data数据。这个Vue实例并不关注页面渲染，是为了让state的数据都是响应式的。当其他Vue实例的页面模板对state的数据进行直接或者间接引用时，一样参与依赖收集过程。当state的数据变化时，通过Watcher的作用触发该页面更新。（依赖收集或者Watcher等概念内容，这里不做扩展，可以研究下Vue的响应式原理）\n\n\n## 模拟Vuex\nVuex代码比较复杂，考虑的情况比较多，不能一下子直观简单的理解state数据的响应式。所以这里实现了个简单版的Vuex.\n```javascript\nfunction Store(options) {\n  var vm = new Vue({\n    data: {\n      $$state: options.state || {}\n    },\n  });\n  Object.defineProperty(this, 'state', {\n    get:function() {\n      return vm._data.$$state\n    }\n  })\n}\n// 把store转为内部的$store\nVue.mixin({\n  beforeCreate: function () {\n    this.$store = this.$options.store;\n  }\n})\n\n```\n下面是使用的例子\n```javascript\nvar store = new Store({\n  state: {\n    count: 0\n  },\n});\nvar app = new Vue({\n  el: '#app',\n  store: store,\n  template: '<div>{{$store.state.count}}</div>'\n});\napp.$mount();\n\n```\n\n当执行 ```store.state.count = store.state.count +1;``` ，页面内容从0变成了1。\n\n\n\n\n\n\n\n","source":"_posts/vuex-responsive.md","raw":"---\ntitle: Vuex的state是如何具有响应式的\ndate: 2019-07-21 20:32:48\ntags:\n---\n## 前言\nVuex是Vue的状态管理方案，可以让各组件共享状态数据，降低了相互之间通信的复杂度。  \n当更新Vuex的state数据时，发现引用到state数据的组件页面也会同时更新。可见state数据也是响应式的，其作用效果和Vue组件的data数据一致。   \n     \n究竟是如何实现的呢，直接撸源码看看它的秘密。源码都来源于[3.1.1版本](https://github.com/vuejs/vuex/tree/ffc7d00314a371c09d288bc5123793031d182cd2)。\n\n## 研究\n下面是Vuex的一个简单使用例子\n\n```javascript\nvar store = new Vuex.Store({\n  state:{\n    count:0\n  }\n});\nvar app = new Vue({\n  el:'#app',\n  store:store,\n  template: '<div>{{$store.state.count}}</div>'\n});\napp.$mount();\n\n```\n当发现执行下面的代码，页面内容从0变成了1，从头到尾仅仅只改变了count的值而已，就好像count字段直接定义在组件的data数据里一样，具有响应式。\n```javascript\nstore.state.count = store.state.count +1;\n```\n-------------   \n\n来看看Store的构造方法，在[/src/store.js](https://github.com/vuejs/vuex/blob/ffc7d00314a371c09d288bc5123793031d182cd2/src/store.js)中，由于比较长，挑了重点来看。经过一系列的处理（不需要深究），把得到的state传入resetStoreVM方法。\n```javascript\nconstructor (options = {}) {\n    // 省略一堆\n    this._modules = new ModuleCollection(options)\n    // 省略一堆\n    const state = this._modules.root.state\n\n    // init root module.\n    // this also recursively registers all sub-modules\n    // and collects all module getters inside this._wrappedGetters\n    installModule(this, state, [], this._modules.root)\n\n    // initialize the store vm, which is responsible for the reactivity\n    // (also registers _wrappedGetters as computed properties)\n    resetStoreVM(this, state)\n\n    // 省略一堆\n}\n\n```\n\n来看看resetStoreVM的实现\n```javascript\nfunction resetStoreVM (store, state, hot) {\n  // 省略一堆\n  store._vm = new Vue({\n    data: {\n      $$state: state\n    },\n    computed\n  })\n  // 省略一堆\n}\n\n```\n\n原来state的数据其实就是Vue实例的data数据。这个Vue实例并不关注页面渲染，是为了让state的数据都是响应式的。当其他Vue实例的页面模板对state的数据进行直接或者间接引用时，一样参与依赖收集过程。当state的数据变化时，通过Watcher的作用触发该页面更新。（依赖收集或者Watcher等概念内容，这里不做扩展，可以研究下Vue的响应式原理）\n\n\n## 模拟Vuex\nVuex代码比较复杂，考虑的情况比较多，不能一下子直观简单的理解state数据的响应式。所以这里实现了个简单版的Vuex.\n```javascript\nfunction Store(options) {\n  var vm = new Vue({\n    data: {\n      $$state: options.state || {}\n    },\n  });\n  Object.defineProperty(this, 'state', {\n    get:function() {\n      return vm._data.$$state\n    }\n  })\n}\n// 把store转为内部的$store\nVue.mixin({\n  beforeCreate: function () {\n    this.$store = this.$options.store;\n  }\n})\n\n```\n下面是使用的例子\n```javascript\nvar store = new Store({\n  state: {\n    count: 0\n  },\n});\nvar app = new Vue({\n  el: '#app',\n  store: store,\n  template: '<div>{{$store.state.count}}</div>'\n});\napp.$mount();\n\n```\n\n当执行 ```store.state.count = store.state.count +1;``` ，页面内容从0变成了1。\n\n\n\n\n\n\n\n","slug":"vuex-responsive","published":1,"updated":"2019-07-21T14:48:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymsten500107nwfepo4q4ky","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Vuex是Vue的状态管理方案，可以让各组件共享状态数据，降低了相互之间通信的复杂度。<br>当更新Vuex的state数据时，发现引用到state数据的组件页面也会同时更新。可见state数据也是响应式的，其作用效果和Vue组件的data数据一致。   </p>\n<p>究竟是如何实现的呢，直接撸源码看看它的秘密。源码都来源于<a href=\"https://github.com/vuejs/vuex/tree/ffc7d00314a371c09d288bc5123793031d182cd2\" target=\"_blank\" rel=\"noopener\">3.1.1版本</a>。</p>\n<h2 id=\"研究\"><a href=\"#研究\" class=\"headerlink\" title=\"研究\"></a>研究</h2><p>下面是Vuex的一个简单使用例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state:&#123;</span><br><span class=\"line\">    count:<span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el:<span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  store:store,</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;div&gt;&#123;&#123;$store.state.count&#125;&#125;&lt;/div&gt;'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.$mount();</span><br></pre></td></tr></table></figure>\n<p>当发现执行下面的代码，页面内容从0变成了1，从头到尾仅仅只改变了count的值而已，就好像count字段直接定义在组件的data数据里一样，具有响应式。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.state.count = store.state.count +<span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>来看看Store的构造方法，在<a href=\"https://github.com/vuejs/vuex/blob/ffc7d00314a371c09d288bc5123793031d182cd2/src/store.js\" target=\"_blank\" rel=\"noopener\">/src/store.js</a>中，由于比较长，挑了重点来看。经过一系列的处理（不需要深究），把得到的state传入resetStoreVM方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span> (options = &#123;&#125;) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 省略一堆</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._modules = <span class=\"keyword\">new</span> ModuleCollection(options)</span><br><span class=\"line\">    <span class=\"comment\">// 省略一堆</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> state = <span class=\"keyword\">this</span>._modules.root.state</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// init root module.</span></span><br><span class=\"line\">    <span class=\"comment\">// this also recursively registers all sub-modules</span></span><br><span class=\"line\">    <span class=\"comment\">// and collects all module getters inside this._wrappedGetters</span></span><br><span class=\"line\">    installModule(<span class=\"keyword\">this</span>, state, [], <span class=\"keyword\">this</span>._modules.root)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// initialize the store vm, which is responsible for the reactivity</span></span><br><span class=\"line\">    <span class=\"comment\">// (also registers _wrappedGetters as computed properties)</span></span><br><span class=\"line\">    resetStoreVM(<span class=\"keyword\">this</span>, state)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 省略一堆</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>来看看resetStoreVM的实现<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resetStoreVM</span> (<span class=\"params\">store, state, hot</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 省略一堆</span></span><br><span class=\"line\">  store._vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      $$state: state</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    computed</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// 省略一堆</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>原来state的数据其实就是Vue实例的data数据。这个Vue实例并不关注页面渲染，是为了让state的数据都是响应式的。当其他Vue实例的页面模板对state的数据进行直接或者间接引用时，一样参与依赖收集过程。当state的数据变化时，通过Watcher的作用触发该页面更新。（依赖收集或者Watcher等概念内容，这里不做扩展，可以研究下Vue的响应式原理）</p>\n<h2 id=\"模拟Vuex\"><a href=\"#模拟Vuex\" class=\"headerlink\" title=\"模拟Vuex\"></a>模拟Vuex</h2><p>Vuex代码比较复杂，考虑的情况比较多，不能一下子直观简单的理解state数据的响应式。所以这里实现了个简单版的Vuex.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Store</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      $$state: options.state || &#123;&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(<span class=\"keyword\">this</span>, <span class=\"string\">'state'</span>, &#123;</span><br><span class=\"line\">    get:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> vm._data.$$state</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 把store转为内部的$store</span></span><br><span class=\"line\">Vue.mixin(&#123;</span><br><span class=\"line\">  beforeCreate: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$store = <span class=\"keyword\">this</span>.$options.store;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>下面是使用的例子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  store: store,</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;div&gt;&#123;&#123;$store.state.count&#125;&#125;&lt;/div&gt;'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.$mount();</span><br></pre></td></tr></table></figure></p>\n<p>当执行 <code>store.state.count = store.state.count +1;</code> ，页面内容从0变成了1。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Vuex是Vue的状态管理方案，可以让各组件共享状态数据，降低了相互之间通信的复杂度。<br>当更新Vuex的state数据时，发现引用到state数据的组件页面也会同时更新。可见state数据也是响应式的，其作用效果和Vue组件的data数据一致。   </p>\n<p>究竟是如何实现的呢，直接撸源码看看它的秘密。源码都来源于<a href=\"https://github.com/vuejs/vuex/tree/ffc7d00314a371c09d288bc5123793031d182cd2\" target=\"_blank\" rel=\"noopener\">3.1.1版本</a>。</p>\n<h2 id=\"研究\"><a href=\"#研究\" class=\"headerlink\" title=\"研究\"></a>研究</h2><p>下面是Vuex的一个简单使用例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state:&#123;</span><br><span class=\"line\">    count:<span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el:<span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  store:store,</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;div&gt;&#123;&#123;$store.state.count&#125;&#125;&lt;/div&gt;'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.$mount();</span><br></pre></td></tr></table></figure>\n<p>当发现执行下面的代码，页面内容从0变成了1，从头到尾仅仅只改变了count的值而已，就好像count字段直接定义在组件的data数据里一样，具有响应式。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.state.count = store.state.count +<span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>来看看Store的构造方法，在<a href=\"https://github.com/vuejs/vuex/blob/ffc7d00314a371c09d288bc5123793031d182cd2/src/store.js\" target=\"_blank\" rel=\"noopener\">/src/store.js</a>中，由于比较长，挑了重点来看。经过一系列的处理（不需要深究），把得到的state传入resetStoreVM方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span> (options = &#123;&#125;) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 省略一堆</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._modules = <span class=\"keyword\">new</span> ModuleCollection(options)</span><br><span class=\"line\">    <span class=\"comment\">// 省略一堆</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> state = <span class=\"keyword\">this</span>._modules.root.state</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// init root module.</span></span><br><span class=\"line\">    <span class=\"comment\">// this also recursively registers all sub-modules</span></span><br><span class=\"line\">    <span class=\"comment\">// and collects all module getters inside this._wrappedGetters</span></span><br><span class=\"line\">    installModule(<span class=\"keyword\">this</span>, state, [], <span class=\"keyword\">this</span>._modules.root)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// initialize the store vm, which is responsible for the reactivity</span></span><br><span class=\"line\">    <span class=\"comment\">// (also registers _wrappedGetters as computed properties)</span></span><br><span class=\"line\">    resetStoreVM(<span class=\"keyword\">this</span>, state)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 省略一堆</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>来看看resetStoreVM的实现<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resetStoreVM</span> (<span class=\"params\">store, state, hot</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 省略一堆</span></span><br><span class=\"line\">  store._vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      $$state: state</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    computed</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// 省略一堆</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>原来state的数据其实就是Vue实例的data数据。这个Vue实例并不关注页面渲染，是为了让state的数据都是响应式的。当其他Vue实例的页面模板对state的数据进行直接或者间接引用时，一样参与依赖收集过程。当state的数据变化时，通过Watcher的作用触发该页面更新。（依赖收集或者Watcher等概念内容，这里不做扩展，可以研究下Vue的响应式原理）</p>\n<h2 id=\"模拟Vuex\"><a href=\"#模拟Vuex\" class=\"headerlink\" title=\"模拟Vuex\"></a>模拟Vuex</h2><p>Vuex代码比较复杂，考虑的情况比较多，不能一下子直观简单的理解state数据的响应式。所以这里实现了个简单版的Vuex.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Store</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      $$state: options.state || &#123;&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(<span class=\"keyword\">this</span>, <span class=\"string\">'state'</span>, &#123;</span><br><span class=\"line\">    get:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> vm._data.$$state</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 把store转为内部的$store</span></span><br><span class=\"line\">Vue.mixin(&#123;</span><br><span class=\"line\">  beforeCreate: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$store = <span class=\"keyword\">this</span>.$options.store;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>下面是使用的例子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  store: store,</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;div&gt;&#123;&#123;$store.state.count&#125;&#125;&lt;/div&gt;'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.$mount();</span><br></pre></td></tr></table></figure></p>\n<p>当执行 <code>store.state.count = store.state.count +1;</code> ，页面内容从0变成了1。</p>\n"},{"title":"异步操作","date":"2017-09-20T14:29:29.000Z","_content":"\n\n## 异步处理的方式\n\n- 最早是使用回调，但如果有多个，并且串行的话，就会嵌套了，在代码阅读和理解上增加了难度。\n\n- 后来有了Promise，解决了这个问题。但是编写起来时，还是没办法做到与同步代码一样。(ES6)\n\n- 接着新增了generator函数，但是需要自己处理流程管理。（ES6）\n\n- 最后新增了async函数，解决了上面流程管理的问题。(ES7)\n\n## 准备\n\n主流浏览器还只是支持ES5，直接使用上面的语法是不行的。Babel是一款javascript的编译器，可以把高版本语法写的javascript代码转变为低版本的代码，然后可以运行在尚不支持高版本javascript的环境中。[Babel官网](https://babeljs.io/)\n\n例如：\n\n```JavaScript\n[1,2,3].map(n => n + 1);\n```\n\n\n转为\n\n\n```JavaScript\n[1,2,3].map(function(n) {\n    return n + 1;\n});\n```\n\n\n#### 使用Babel\n\n任意目录下，执行下面操作。（默认已经安装好npm工具）\n\n- 目录下新建package.json文件\n\n```Bash\n$ npm init\n```\n\n- 安装用于编译文件的Babel内置命令行工具[详细](http://babeljs.io/docs/usage/cli/)\n\n```Bash\n$ npm install --save-dev  babel-cli\n```\n\n- 安装ES2015 preset\n\n```Bash\n$ npm install --save-dev babel-preset-es2015  \n```\n\n- 新建.babelrc文件，并编辑\n\n```Bash\n$ vi .babelrc  \n```\n\n\n```Bash\n{\n  \"presets\":[\"es2015\"]\n}\n```\n\n\n- 安装Babel插件  [generator](http://babeljs.io/docs/plugins/transform-regenerator/) [async](http://babeljs.io/docs/plugins/syntax-async-functions/)\n\n```Bash\nnpm install babel-plugin-transform-regenerator\n```\n\n```Bash\nnpm install babel-plugin-syntax-async-functions\n```\n\n在.baelrc中设置插件\n\n\n```JSON\n{\n  \"presets\":[\"es2015\"],\n  \"plugins\": [\"syntax-async-functions\",\"transform-regenerator\"]\n\n}\n```\n\n\n- 编译代码 [详细可见](https://babeljs.io/docs/usage/cli/)\n\n```Bash\n$ babel script.js --watch --out-file script-compiled.js\n```\n\n--watch 或者-w 会监控代码自动编译，如果不需要，去掉即可\n\n--out-file或者-o 设置输出的文件\n\n- 在浏览器运行编译后的代码   [详细](http://babeljs.io/docs/usage/polyfill/)\n\n编译后的代码不一定可以执行，可能会依赖别的环境，即babel-polyfill。\n\n在babel-polyfill模块中的dist目录下找到polyfill.js，在html中先引入该脚本。\n\n## 实例\n\n### 传统回调\n\n下面代码是请求书籍信息，然后显示计数。\n\n可以看到嵌套了两个回调，如果嵌套多了，写起来复杂，还难懂。\n\n\n```JavaScript\nfunction fetchBook(success,error){\n    $.ajax({\n        url:'/say/data/book.json',\n        success:function(data, status, xhr){\n            success&&success(data);\n        },\n        error:function(xhr, errorType, error){\n            error&&error();\n        }\n    });\n}\n\nfunction counter(complete){\n    setTimeout(function(){\n        complete&&complete(10);\n    },3000);\n}\n//嵌套回调\nfetchBook(function(data){\n    console.log('获取的数据:'+JSON.stringify(data));\n    counter(function(num){\n        console.log('获取的数值:'+num);\n    });\n});\n```\n\n\n### 使用Promise\n几种状态：  \n\n- 已完成（resolved，又称fulfilled） - 与 promise 有关的操作成功\n- 已拒绝（rejected） - 与 promise 有关的操作失败\n- 待定（pending） - 尚未执行或拒绝\n- 已解决 - 已执行或拒绝  -->这个不清楚是否也属于一种状态，是否是finally\n\n下面代码的功能和上面一样，但是改成了Promise的形式，没有了嵌套回调，简洁了很多。\n\n请求网络数据时也可以使用更简洁的fetch。\n\n```JavaScript\nfunction fetchBook() {\n\n    return new Promise(function(resolve,reject){\n        $.ajax({\n            url:'/say/data/book.json',\n            success:function(data, status, xhr){\n                resolve(data);\n            },\n            error:function(xhr, errorType, error){\n                reject(error);\n            }\n        });\n    });\n    //return fetch('/say/data/book.json').then((response)=>response.json());\n}\nfunction counter(){\n\n    return new Promise(function(resolve,reject){\n        setTimeout(function(){\n            resolve(10);\n        },3000);\n    });\n}\n\nfetchBook().then(function(data){\n    console.log('获取的数据:'+JSON.stringify(data));\n    return counter();\n}).then(function(num){\n    console.log('获取的数值:'+num);\n});\n```\n\n\n### 使用generator函数\n\n可以看到generator函数内部就像是写同步代码一样，没有了回调的嵌套，也没有了Promise一个个的then。\n\n可是需要我们自己处理流程管理，即控制generator函数内部逻辑的执行。\n\n那是否可以写一个通用的流程管理呢？其实是可以的。\n\n当执行next方法时，获取到执行异步处理的返回值。如果这个返回值格式固定，就可以使用通用的逻辑处理下一步的操作了。\n\n就像下面代码中，返回值都是promise，如果要控制执行generator函数的下一步，就可以在promise.then方法中调用next方法。采用递归的方式，可以不断执行next方法，直到generator函数结束。\n\n\n```JavaScript\nfunction fetchBook() {\n    return fetch('/say/data/book.json').then((response)=>response.json());\n}\n\nfunction counter(){\n\n    return new Promise(function(resolve,reject){\n        setTimeout(function(){\n            resolve(10);\n        },3000);\n    });\n}\n\nfunction * gen(){\n    console.log('开始获取书籍信息');\n    var data=yield fetchBook();\n    console.log('获取的数据:' + JSON.stringify(data));\n    var num=yield counter();\n    console.log('获取的数值:' + num);\n}\n\n//流程处理\nvar g=gen();\nvar result=g.next();\nresult.value.then(function(res){\n    var result2=g.next(res);\n    result2.value.then(function(res2){\n        g.next(res2);\n    });\n});\n\n/*\n//基于promise的简单的通用流程管理\nfunction executeGen(g){\n    nextGen(g.next());\n\n    function nextGen(genResult){\n        if(genResult.done){\n            return;\n        }\n        genResult.value.then(function(data){\n            var result=g.next(data);\n            nextGen(result)\n        });\n    }\n}\nexecuteGen(gen());*/\n```\n\n\n### 使用async函数\n\n如你所见，没有了流程管理，更加简洁。\n\n\n```JavaScript\nfunction fetchBook() {\n    return fetch('/say/data/book.json').then((response)=>response.json());\n}\n\nfunction counter(){\n\n    return new Promise(function(resolve,reject){\n        setTimeout(function(){\n            resolve(10);\n        },3000);\n    });\n}\n\nasync function doWork(){\n    console.log('开始获取书籍信息');\n    var data=await fetchBook();\n    console.log('获取的数据:' + JSON.stringify(data));\n    var num=await counter();\n    console.log('获取的数值:' + num);\n}\ndoWork();\n```\n","source":"_posts/async.md","raw":"---\ntitle: 异步操作\ndate: 2017-09-20 22:29:29\ntags: 异步\n---\n\n\n## 异步处理的方式\n\n- 最早是使用回调，但如果有多个，并且串行的话，就会嵌套了，在代码阅读和理解上增加了难度。\n\n- 后来有了Promise，解决了这个问题。但是编写起来时，还是没办法做到与同步代码一样。(ES6)\n\n- 接着新增了generator函数，但是需要自己处理流程管理。（ES6）\n\n- 最后新增了async函数，解决了上面流程管理的问题。(ES7)\n\n## 准备\n\n主流浏览器还只是支持ES5，直接使用上面的语法是不行的。Babel是一款javascript的编译器，可以把高版本语法写的javascript代码转变为低版本的代码，然后可以运行在尚不支持高版本javascript的环境中。[Babel官网](https://babeljs.io/)\n\n例如：\n\n```JavaScript\n[1,2,3].map(n => n + 1);\n```\n\n\n转为\n\n\n```JavaScript\n[1,2,3].map(function(n) {\n    return n + 1;\n});\n```\n\n\n#### 使用Babel\n\n任意目录下，执行下面操作。（默认已经安装好npm工具）\n\n- 目录下新建package.json文件\n\n```Bash\n$ npm init\n```\n\n- 安装用于编译文件的Babel内置命令行工具[详细](http://babeljs.io/docs/usage/cli/)\n\n```Bash\n$ npm install --save-dev  babel-cli\n```\n\n- 安装ES2015 preset\n\n```Bash\n$ npm install --save-dev babel-preset-es2015  \n```\n\n- 新建.babelrc文件，并编辑\n\n```Bash\n$ vi .babelrc  \n```\n\n\n```Bash\n{\n  \"presets\":[\"es2015\"]\n}\n```\n\n\n- 安装Babel插件  [generator](http://babeljs.io/docs/plugins/transform-regenerator/) [async](http://babeljs.io/docs/plugins/syntax-async-functions/)\n\n```Bash\nnpm install babel-plugin-transform-regenerator\n```\n\n```Bash\nnpm install babel-plugin-syntax-async-functions\n```\n\n在.baelrc中设置插件\n\n\n```JSON\n{\n  \"presets\":[\"es2015\"],\n  \"plugins\": [\"syntax-async-functions\",\"transform-regenerator\"]\n\n}\n```\n\n\n- 编译代码 [详细可见](https://babeljs.io/docs/usage/cli/)\n\n```Bash\n$ babel script.js --watch --out-file script-compiled.js\n```\n\n--watch 或者-w 会监控代码自动编译，如果不需要，去掉即可\n\n--out-file或者-o 设置输出的文件\n\n- 在浏览器运行编译后的代码   [详细](http://babeljs.io/docs/usage/polyfill/)\n\n编译后的代码不一定可以执行，可能会依赖别的环境，即babel-polyfill。\n\n在babel-polyfill模块中的dist目录下找到polyfill.js，在html中先引入该脚本。\n\n## 实例\n\n### 传统回调\n\n下面代码是请求书籍信息，然后显示计数。\n\n可以看到嵌套了两个回调，如果嵌套多了，写起来复杂，还难懂。\n\n\n```JavaScript\nfunction fetchBook(success,error){\n    $.ajax({\n        url:'/say/data/book.json',\n        success:function(data, status, xhr){\n            success&&success(data);\n        },\n        error:function(xhr, errorType, error){\n            error&&error();\n        }\n    });\n}\n\nfunction counter(complete){\n    setTimeout(function(){\n        complete&&complete(10);\n    },3000);\n}\n//嵌套回调\nfetchBook(function(data){\n    console.log('获取的数据:'+JSON.stringify(data));\n    counter(function(num){\n        console.log('获取的数值:'+num);\n    });\n});\n```\n\n\n### 使用Promise\n几种状态：  \n\n- 已完成（resolved，又称fulfilled） - 与 promise 有关的操作成功\n- 已拒绝（rejected） - 与 promise 有关的操作失败\n- 待定（pending） - 尚未执行或拒绝\n- 已解决 - 已执行或拒绝  -->这个不清楚是否也属于一种状态，是否是finally\n\n下面代码的功能和上面一样，但是改成了Promise的形式，没有了嵌套回调，简洁了很多。\n\n请求网络数据时也可以使用更简洁的fetch。\n\n```JavaScript\nfunction fetchBook() {\n\n    return new Promise(function(resolve,reject){\n        $.ajax({\n            url:'/say/data/book.json',\n            success:function(data, status, xhr){\n                resolve(data);\n            },\n            error:function(xhr, errorType, error){\n                reject(error);\n            }\n        });\n    });\n    //return fetch('/say/data/book.json').then((response)=>response.json());\n}\nfunction counter(){\n\n    return new Promise(function(resolve,reject){\n        setTimeout(function(){\n            resolve(10);\n        },3000);\n    });\n}\n\nfetchBook().then(function(data){\n    console.log('获取的数据:'+JSON.stringify(data));\n    return counter();\n}).then(function(num){\n    console.log('获取的数值:'+num);\n});\n```\n\n\n### 使用generator函数\n\n可以看到generator函数内部就像是写同步代码一样，没有了回调的嵌套，也没有了Promise一个个的then。\n\n可是需要我们自己处理流程管理，即控制generator函数内部逻辑的执行。\n\n那是否可以写一个通用的流程管理呢？其实是可以的。\n\n当执行next方法时，获取到执行异步处理的返回值。如果这个返回值格式固定，就可以使用通用的逻辑处理下一步的操作了。\n\n就像下面代码中，返回值都是promise，如果要控制执行generator函数的下一步，就可以在promise.then方法中调用next方法。采用递归的方式，可以不断执行next方法，直到generator函数结束。\n\n\n```JavaScript\nfunction fetchBook() {\n    return fetch('/say/data/book.json').then((response)=>response.json());\n}\n\nfunction counter(){\n\n    return new Promise(function(resolve,reject){\n        setTimeout(function(){\n            resolve(10);\n        },3000);\n    });\n}\n\nfunction * gen(){\n    console.log('开始获取书籍信息');\n    var data=yield fetchBook();\n    console.log('获取的数据:' + JSON.stringify(data));\n    var num=yield counter();\n    console.log('获取的数值:' + num);\n}\n\n//流程处理\nvar g=gen();\nvar result=g.next();\nresult.value.then(function(res){\n    var result2=g.next(res);\n    result2.value.then(function(res2){\n        g.next(res2);\n    });\n});\n\n/*\n//基于promise的简单的通用流程管理\nfunction executeGen(g){\n    nextGen(g.next());\n\n    function nextGen(genResult){\n        if(genResult.done){\n            return;\n        }\n        genResult.value.then(function(data){\n            var result=g.next(data);\n            nextGen(result)\n        });\n    }\n}\nexecuteGen(gen());*/\n```\n\n\n### 使用async函数\n\n如你所见，没有了流程管理，更加简洁。\n\n\n```JavaScript\nfunction fetchBook() {\n    return fetch('/say/data/book.json').then((response)=>response.json());\n}\n\nfunction counter(){\n\n    return new Promise(function(resolve,reject){\n        setTimeout(function(){\n            resolve(10);\n        },3000);\n    });\n}\n\nasync function doWork(){\n    console.log('开始获取书籍信息');\n    var data=await fetchBook();\n    console.log('获取的数据:' + JSON.stringify(data));\n    var num=await counter();\n    console.log('获取的数值:' + num);\n}\ndoWork();\n```\n","slug":"async","published":1,"updated":"2018-01-14T10:50:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymsten600117nwf5xo4qgo0","content":"<h2 id=\"异步处理的方式\"><a href=\"#异步处理的方式\" class=\"headerlink\" title=\"异步处理的方式\"></a>异步处理的方式</h2><ul>\n<li><p>最早是使用回调，但如果有多个，并且串行的话，就会嵌套了，在代码阅读和理解上增加了难度。</p>\n</li>\n<li><p>后来有了Promise，解决了这个问题。但是编写起来时，还是没办法做到与同步代码一样。(ES6)</p>\n</li>\n<li><p>接着新增了generator函数，但是需要自己处理流程管理。（ES6）</p>\n</li>\n<li><p>最后新增了async函数，解决了上面流程管理的问题。(ES7)</p>\n</li>\n</ul>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>主流浏览器还只是支持ES5，直接使用上面的语法是不行的。Babel是一款javascript的编译器，可以把高版本语法写的javascript代码转变为低版本的代码，然后可以运行在尚不支持高版本javascript的环境中。<a href=\"https://babeljs.io/\" target=\"_blank\" rel=\"noopener\">Babel官网</a></p>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n + <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>转为</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用Babel\"><a href=\"#使用Babel\" class=\"headerlink\" title=\"使用Babel\"></a>使用Babel</h4><p>任意目录下，执行下面操作。（默认已经安装好npm工具）</p>\n<ul>\n<li>目录下新建package.json文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm init</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装用于编译文件的Babel内置命令行工具<a href=\"http://babeljs.io/docs/usage/cli/\" target=\"_blank\" rel=\"noopener\">详细</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev  babel-cli</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装ES2015 preset</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev babel-preset-es2015</span><br></pre></td></tr></table></figure>\n<ul>\n<li>新建.babelrc文件，并编辑</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vi .babelrc</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"presets\"</span>:[<span class=\"string\">\"es2015\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装Babel插件  <a href=\"http://babeljs.io/docs/plugins/transform-regenerator/\" target=\"_blank\" rel=\"noopener\">generator</a> <a href=\"http://babeljs.io/docs/plugins/syntax-async-functions/\" target=\"_blank\" rel=\"noopener\">async</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install babel-plugin-transform-regenerator</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install babel-plugin-syntax-async-functions</span><br></pre></td></tr></table></figure>\n<p>在.baelrc中设置插件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>:[<span class=\"string\">\"es2015\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: [<span class=\"string\">\"syntax-async-functions\"</span>,<span class=\"string\">\"transform-regenerator\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>编译代码 <a href=\"https://babeljs.io/docs/usage/cli/\" target=\"_blank\" rel=\"noopener\">详细可见</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ babel script.js --watch --out-file script-compiled.js</span><br></pre></td></tr></table></figure>\n<p>–watch 或者-w 会监控代码自动编译，如果不需要，去掉即可</p>\n<p>–out-file或者-o 设置输出的文件</p>\n<ul>\n<li>在浏览器运行编译后的代码   <a href=\"http://babeljs.io/docs/usage/polyfill/\" target=\"_blank\" rel=\"noopener\">详细</a></li>\n</ul>\n<p>编译后的代码不一定可以执行，可能会依赖别的环境，即babel-polyfill。</p>\n<p>在babel-polyfill模块中的dist目录下找到polyfill.js，在html中先引入该脚本。</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><h3 id=\"传统回调\"><a href=\"#传统回调\" class=\"headerlink\" title=\"传统回调\"></a>传统回调</h3><p>下面代码是请求书籍信息，然后显示计数。</p>\n<p>可以看到嵌套了两个回调，如果嵌套多了，写起来复杂，还难懂。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchBook</span>(<span class=\"params\">success,error</span>)</span>&#123;</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        url:<span class=\"string\">'/say/data/book.json'</span>,</span><br><span class=\"line\">        success:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data, status, xhr</span>)</span>&#123;</span><br><span class=\"line\">            success&amp;&amp;success(data);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        error:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">xhr, errorType, error</span>)</span>&#123;</span><br><span class=\"line\">            error&amp;&amp;error();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">counter</span>(<span class=\"params\">complete</span>)</span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        complete&amp;&amp;complete(<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;,<span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//嵌套回调</span></span><br><span class=\"line\">fetchBook(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'获取的数据:'</span>+<span class=\"built_in\">JSON</span>.stringify(data));</span><br><span class=\"line\">    counter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'获取的数值:'</span>+num);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用Promise\"><a href=\"#使用Promise\" class=\"headerlink\" title=\"使用Promise\"></a>使用Promise</h3><p>几种状态：  </p>\n<ul>\n<li>已完成（resolved，又称fulfilled） - 与 promise 有关的操作成功</li>\n<li>已拒绝（rejected） - 与 promise 有关的操作失败</li>\n<li>待定（pending） - 尚未执行或拒绝</li>\n<li>已解决 - 已执行或拒绝  –&gt;这个不清楚是否也属于一种状态，是否是finally</li>\n</ul>\n<p>下面代码的功能和上面一样，但是改成了Promise的形式，没有了嵌套回调，简洁了很多。</p>\n<p>请求网络数据时也可以使用更简洁的fetch。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchBook</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</span><br><span class=\"line\">        $.ajax(&#123;</span><br><span class=\"line\">            url:<span class=\"string\">'/say/data/book.json'</span>,</span><br><span class=\"line\">            success:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data, status, xhr</span>)</span>&#123;</span><br><span class=\"line\">                resolve(data);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            error:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">xhr, errorType, error</span>)</span>&#123;</span><br><span class=\"line\">                reject(error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">//return fetch('/say/data/book.json').then((response)=&gt;response.json());</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">counter</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            resolve(<span class=\"number\">10</span>);</span><br><span class=\"line\">        &#125;,<span class=\"number\">3000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fetchBook().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'获取的数据:'</span>+<span class=\"built_in\">JSON</span>.stringify(data));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> counter();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'获取的数值:'</span>+num);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用generator函数\"><a href=\"#使用generator函数\" class=\"headerlink\" title=\"使用generator函数\"></a>使用generator函数</h3><p>可以看到generator函数内部就像是写同步代码一样，没有了回调的嵌套，也没有了Promise一个个的then。</p>\n<p>可是需要我们自己处理流程管理，即控制generator函数内部逻辑的执行。</p>\n<p>那是否可以写一个通用的流程管理呢？其实是可以的。</p>\n<p>当执行next方法时，获取到执行异步处理的返回值。如果这个返回值格式固定，就可以使用通用的逻辑处理下一步的操作了。</p>\n<p>就像下面代码中，返回值都是promise，如果要控制执行generator函数的下一步，就可以在promise.then方法中调用next方法。采用递归的方式，可以不断执行next方法，直到generator函数结束。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchBook</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fetch(<span class=\"string\">'/say/data/book.json'</span>).then(<span class=\"function\">(<span class=\"params\">response</span>)=&gt;</span>response.json());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">counter</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            resolve(<span class=\"number\">10</span>);</span><br><span class=\"line\">        &#125;,<span class=\"number\">3000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> * <span class=\"title\">gen</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'开始获取书籍信息'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data=<span class=\"keyword\">yield</span> fetchBook();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'获取的数据:'</span> + <span class=\"built_in\">JSON</span>.stringify(data));</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num=<span class=\"keyword\">yield</span> counter();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'获取的数值:'</span> + num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//流程处理</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> g=gen();</span><br><span class=\"line\"><span class=\"keyword\">var</span> result=g.next();</span><br><span class=\"line\">result.value.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result2=g.next(res);</span><br><span class=\"line\">    result2.value.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res2</span>)</span>&#123;</span><br><span class=\"line\">        g.next(res2);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">//基于promise的简单的通用流程管理</span></span><br><span class=\"line\"><span class=\"comment\">function executeGen(g)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    nextGen(g.next());</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    function nextGen(genResult)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        if(genResult.done)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            return;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        genResult.value.then(function(data)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            var result=g.next(data);</span></span><br><span class=\"line\"><span class=\"comment\">            nextGen(result)</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">executeGen(gen());*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用async函数\"><a href=\"#使用async函数\" class=\"headerlink\" title=\"使用async函数\"></a>使用async函数</h3><p>如你所见，没有了流程管理，更加简洁。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchBook</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fetch(<span class=\"string\">'/say/data/book.json'</span>).then(<span class=\"function\">(<span class=\"params\">response</span>)=&gt;</span>response.json());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">counter</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            resolve(<span class=\"number\">10</span>);</span><br><span class=\"line\">        &#125;,<span class=\"number\">3000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doWork</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'开始获取书籍信息'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data=<span class=\"keyword\">await</span> fetchBook();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'获取的数据:'</span> + <span class=\"built_in\">JSON</span>.stringify(data));</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num=<span class=\"keyword\">await</span> counter();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'获取的数值:'</span> + num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">doWork();</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"异步处理的方式\"><a href=\"#异步处理的方式\" class=\"headerlink\" title=\"异步处理的方式\"></a>异步处理的方式</h2><ul>\n<li><p>最早是使用回调，但如果有多个，并且串行的话，就会嵌套了，在代码阅读和理解上增加了难度。</p>\n</li>\n<li><p>后来有了Promise，解决了这个问题。但是编写起来时，还是没办法做到与同步代码一样。(ES6)</p>\n</li>\n<li><p>接着新增了generator函数，但是需要自己处理流程管理。（ES6）</p>\n</li>\n<li><p>最后新增了async函数，解决了上面流程管理的问题。(ES7)</p>\n</li>\n</ul>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>主流浏览器还只是支持ES5，直接使用上面的语法是不行的。Babel是一款javascript的编译器，可以把高版本语法写的javascript代码转变为低版本的代码，然后可以运行在尚不支持高版本javascript的环境中。<a href=\"https://babeljs.io/\" target=\"_blank\" rel=\"noopener\">Babel官网</a></p>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n + <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>转为</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用Babel\"><a href=\"#使用Babel\" class=\"headerlink\" title=\"使用Babel\"></a>使用Babel</h4><p>任意目录下，执行下面操作。（默认已经安装好npm工具）</p>\n<ul>\n<li>目录下新建package.json文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm init</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装用于编译文件的Babel内置命令行工具<a href=\"http://babeljs.io/docs/usage/cli/\" target=\"_blank\" rel=\"noopener\">详细</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev  babel-cli</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装ES2015 preset</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev babel-preset-es2015</span><br></pre></td></tr></table></figure>\n<ul>\n<li>新建.babelrc文件，并编辑</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vi .babelrc</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"presets\"</span>:[<span class=\"string\">\"es2015\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装Babel插件  <a href=\"http://babeljs.io/docs/plugins/transform-regenerator/\" target=\"_blank\" rel=\"noopener\">generator</a> <a href=\"http://babeljs.io/docs/plugins/syntax-async-functions/\" target=\"_blank\" rel=\"noopener\">async</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install babel-plugin-transform-regenerator</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install babel-plugin-syntax-async-functions</span><br></pre></td></tr></table></figure>\n<p>在.baelrc中设置插件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>:[<span class=\"string\">\"es2015\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: [<span class=\"string\">\"syntax-async-functions\"</span>,<span class=\"string\">\"transform-regenerator\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>编译代码 <a href=\"https://babeljs.io/docs/usage/cli/\" target=\"_blank\" rel=\"noopener\">详细可见</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ babel script.js --watch --out-file script-compiled.js</span><br></pre></td></tr></table></figure>\n<p>–watch 或者-w 会监控代码自动编译，如果不需要，去掉即可</p>\n<p>–out-file或者-o 设置输出的文件</p>\n<ul>\n<li>在浏览器运行编译后的代码   <a href=\"http://babeljs.io/docs/usage/polyfill/\" target=\"_blank\" rel=\"noopener\">详细</a></li>\n</ul>\n<p>编译后的代码不一定可以执行，可能会依赖别的环境，即babel-polyfill。</p>\n<p>在babel-polyfill模块中的dist目录下找到polyfill.js，在html中先引入该脚本。</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><h3 id=\"传统回调\"><a href=\"#传统回调\" class=\"headerlink\" title=\"传统回调\"></a>传统回调</h3><p>下面代码是请求书籍信息，然后显示计数。</p>\n<p>可以看到嵌套了两个回调，如果嵌套多了，写起来复杂，还难懂。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchBook</span>(<span class=\"params\">success,error</span>)</span>&#123;</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        url:<span class=\"string\">'/say/data/book.json'</span>,</span><br><span class=\"line\">        success:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data, status, xhr</span>)</span>&#123;</span><br><span class=\"line\">            success&amp;&amp;success(data);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        error:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">xhr, errorType, error</span>)</span>&#123;</span><br><span class=\"line\">            error&amp;&amp;error();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">counter</span>(<span class=\"params\">complete</span>)</span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        complete&amp;&amp;complete(<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;,<span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//嵌套回调</span></span><br><span class=\"line\">fetchBook(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'获取的数据:'</span>+<span class=\"built_in\">JSON</span>.stringify(data));</span><br><span class=\"line\">    counter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'获取的数值:'</span>+num);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用Promise\"><a href=\"#使用Promise\" class=\"headerlink\" title=\"使用Promise\"></a>使用Promise</h3><p>几种状态：  </p>\n<ul>\n<li>已完成（resolved，又称fulfilled） - 与 promise 有关的操作成功</li>\n<li>已拒绝（rejected） - 与 promise 有关的操作失败</li>\n<li>待定（pending） - 尚未执行或拒绝</li>\n<li>已解决 - 已执行或拒绝  –&gt;这个不清楚是否也属于一种状态，是否是finally</li>\n</ul>\n<p>下面代码的功能和上面一样，但是改成了Promise的形式，没有了嵌套回调，简洁了很多。</p>\n<p>请求网络数据时也可以使用更简洁的fetch。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchBook</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</span><br><span class=\"line\">        $.ajax(&#123;</span><br><span class=\"line\">            url:<span class=\"string\">'/say/data/book.json'</span>,</span><br><span class=\"line\">            success:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data, status, xhr</span>)</span>&#123;</span><br><span class=\"line\">                resolve(data);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            error:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">xhr, errorType, error</span>)</span>&#123;</span><br><span class=\"line\">                reject(error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">//return fetch('/say/data/book.json').then((response)=&gt;response.json());</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">counter</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            resolve(<span class=\"number\">10</span>);</span><br><span class=\"line\">        &#125;,<span class=\"number\">3000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fetchBook().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'获取的数据:'</span>+<span class=\"built_in\">JSON</span>.stringify(data));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> counter();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'获取的数值:'</span>+num);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用generator函数\"><a href=\"#使用generator函数\" class=\"headerlink\" title=\"使用generator函数\"></a>使用generator函数</h3><p>可以看到generator函数内部就像是写同步代码一样，没有了回调的嵌套，也没有了Promise一个个的then。</p>\n<p>可是需要我们自己处理流程管理，即控制generator函数内部逻辑的执行。</p>\n<p>那是否可以写一个通用的流程管理呢？其实是可以的。</p>\n<p>当执行next方法时，获取到执行异步处理的返回值。如果这个返回值格式固定，就可以使用通用的逻辑处理下一步的操作了。</p>\n<p>就像下面代码中，返回值都是promise，如果要控制执行generator函数的下一步，就可以在promise.then方法中调用next方法。采用递归的方式，可以不断执行next方法，直到generator函数结束。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchBook</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fetch(<span class=\"string\">'/say/data/book.json'</span>).then(<span class=\"function\">(<span class=\"params\">response</span>)=&gt;</span>response.json());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">counter</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            resolve(<span class=\"number\">10</span>);</span><br><span class=\"line\">        &#125;,<span class=\"number\">3000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> * <span class=\"title\">gen</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'开始获取书籍信息'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data=<span class=\"keyword\">yield</span> fetchBook();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'获取的数据:'</span> + <span class=\"built_in\">JSON</span>.stringify(data));</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num=<span class=\"keyword\">yield</span> counter();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'获取的数值:'</span> + num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//流程处理</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> g=gen();</span><br><span class=\"line\"><span class=\"keyword\">var</span> result=g.next();</span><br><span class=\"line\">result.value.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result2=g.next(res);</span><br><span class=\"line\">    result2.value.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res2</span>)</span>&#123;</span><br><span class=\"line\">        g.next(res2);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">//基于promise的简单的通用流程管理</span></span><br><span class=\"line\"><span class=\"comment\">function executeGen(g)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    nextGen(g.next());</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    function nextGen(genResult)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        if(genResult.done)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            return;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        genResult.value.then(function(data)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            var result=g.next(data);</span></span><br><span class=\"line\"><span class=\"comment\">            nextGen(result)</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">executeGen(gen());*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用async函数\"><a href=\"#使用async函数\" class=\"headerlink\" title=\"使用async函数\"></a>使用async函数</h3><p>如你所见，没有了流程管理，更加简洁。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchBook</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fetch(<span class=\"string\">'/say/data/book.json'</span>).then(<span class=\"function\">(<span class=\"params\">response</span>)=&gt;</span>response.json());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">counter</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            resolve(<span class=\"number\">10</span>);</span><br><span class=\"line\">        &#125;,<span class=\"number\">3000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doWork</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'开始获取书籍信息'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data=<span class=\"keyword\">await</span> fetchBook();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'获取的数据:'</span> + <span class=\"built_in\">JSON</span>.stringify(data));</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num=<span class=\"keyword\">await</span> counter();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'获取的数值:'</span> + num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">doWork();</span><br></pre></td></tr></table></figure>\n"},{"title":"ssh授权","date":"2017-05-10T15:57:14.000Z","_content":"\n\n## 说明\n经常通过ssh访问远程主机需要输入密码之类的，比较繁琐。其实可以让远程主机授权给你当前电脑，并且授权\b没有设置密码。下次再连接时，可以直接登录。\n\n## 生成RSA密钥\n+ 使用`ssh-keygen`命令\n```bash\nssh-keygen -t rsa\n```\n+ 使用默认的存放目录，所以回车即可。\n```\nGenerating public/private rsa key pair.\nEnter file in which to save the key (~/.ssh/id_rsa):\n```\n\n+ 不\b设置密码直接回车。\b\b如果设置了密码，每次进行授权时，都要\b输入。\n```\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\n```\n+ 密钥生成\n  在~/.ssh/目录中会有id_rsa（私钥）、id_rsa.pub（公钥）\n\n## 在远程主机设置\b公钥信息 \n### 方案一\n+ 使用`ssh-copy-id`命令\n```\nssh-copy-id -i ~/.ssh/id_rsa.pub username@hostname.com\n```\n> 还没有使用ssh授权，所以会被要求输入远程\b主机的密码\n\n### 方案二\n+ 把id_rsa.pub上传到远程主机\n```\n scp .ssh/id_rsa.pub username@hostname.com:~\n```\n> scp命令也是基于ssh的。还没有使用ssh授权，所以会被要求输入远程\b主机的密码\n+ \b连接远程主机\n```\nssh username@hostname.com\n```\n> \b同样被要求输入远程主机的密码\n+ 把id_rsa.pub的内容添加到\b用户\b根目录的.ssh/authorized_keys文件中\n```\ncd ~\ncat id_rsa.pub >> .ssh/authorized_keys\n```\n\n参考来源：  \n+ [How to Use RSA Key for SSH Authentication](http://news.softpedia.com/news/How-to-Use-RSA-Key-for-SSH-Authentication-38599.shtml)\n+ [远程主机设置\b公钥信息](https://testerhome.com/topics/8328)\n\n","source":"_posts/ssh-authorize.md","raw":"---\ntitle: ssh授权\ndate: 2017-05-10 23:57:14\ntags:\n---\n\n\n## 说明\n经常通过ssh访问远程主机需要输入密码之类的，比较繁琐。其实可以让远程主机授权给你当前电脑，并且授权\b没有设置密码。下次再连接时，可以直接登录。\n\n## 生成RSA密钥\n+ 使用`ssh-keygen`命令\n```bash\nssh-keygen -t rsa\n```\n+ 使用默认的存放目录，所以回车即可。\n```\nGenerating public/private rsa key pair.\nEnter file in which to save the key (~/.ssh/id_rsa):\n```\n\n+ 不\b设置密码直接回车。\b\b如果设置了密码，每次进行授权时，都要\b输入。\n```\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\n```\n+ 密钥生成\n  在~/.ssh/目录中会有id_rsa（私钥）、id_rsa.pub（公钥）\n\n## 在远程主机设置\b公钥信息 \n### 方案一\n+ 使用`ssh-copy-id`命令\n```\nssh-copy-id -i ~/.ssh/id_rsa.pub username@hostname.com\n```\n> 还没有使用ssh授权，所以会被要求输入远程\b主机的密码\n\n### 方案二\n+ 把id_rsa.pub上传到远程主机\n```\n scp .ssh/id_rsa.pub username@hostname.com:~\n```\n> scp命令也是基于ssh的。还没有使用ssh授权，所以会被要求输入远程\b主机的密码\n+ \b连接远程主机\n```\nssh username@hostname.com\n```\n> \b同样被要求输入远程主机的密码\n+ 把id_rsa.pub的内容添加到\b用户\b根目录的.ssh/authorized_keys文件中\n```\ncd ~\ncat id_rsa.pub >> .ssh/authorized_keys\n```\n\n参考来源：  \n+ [How to Use RSA Key for SSH Authentication](http://news.softpedia.com/news/How-to-Use-RSA-Key-for-SSH-Authentication-38599.shtml)\n+ [远程主机设置\b公钥信息](https://testerhome.com/topics/8328)\n\n","slug":"ssh-authorize","published":1,"updated":"2018-01-14T10:50:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymsten700127nwf9fe9px11","content":"<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>经常通过ssh访问远程主机需要输入密码之类的，比较繁琐。其实可以让远程主机授权给你当前电脑，并且授权\b没有设置密码。下次再连接时，可以直接登录。</p>\n<h2 id=\"生成RSA密钥\"><a href=\"#生成RSA密钥\" class=\"headerlink\" title=\"生成RSA密钥\"></a>生成RSA密钥</h2><ul>\n<li><p>使用<code>ssh-keygen</code>命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用默认的存放目录，所以回车即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file in which to save the key (~/.ssh/id_rsa):</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不\b设置密码直接回车。\b\b如果设置了密码，每次进行授权时，都要\b输入。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter passphrase (empty for no passphrase):</span><br><span class=\"line\">Enter same passphrase again:</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>密钥生成<br>在~/.ssh/目录中会有id_rsa（私钥）、id_rsa.pub（公钥）</p>\n</li>\n</ul>\n<h2 id=\"在远程主机设置公钥信息\"><a href=\"#在远程主机设置公钥信息\" class=\"headerlink\" title=\"在远程主机设置\b公钥信息\"></a>在远程主机设置\b公钥信息</h2><h3 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h3><ul>\n<li>使用<code>ssh-copy-id</code>命令<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id -i ~/.ssh/id_rsa.pub username@hostname.com</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>还没有使用ssh授权，所以会被要求输入远程\b主机的密码</p>\n</blockquote>\n<h3 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h3><ul>\n<li>把id_rsa.pub上传到远程主机<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp .ssh/id_rsa.pub username@hostname.com:~</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>scp命令也是基于ssh的。还没有使用ssh授权，所以会被要求输入远程\b主机的密码</p>\n<ul>\n<li>\b连接远程主机<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh username@hostname.com</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>\b同样被要求输入远程主机的密码</p>\n<ul>\n<li>把id_rsa.pub的内容添加到\b用户\b根目录的.ssh/authorized_keys文件中<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~</span><br><span class=\"line\">cat id_rsa.pub &gt;&gt; .ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>参考来源：  </p>\n<ul>\n<li><a href=\"http://news.softpedia.com/news/How-to-Use-RSA-Key-for-SSH-Authentication-38599.shtml\" target=\"_blank\" rel=\"noopener\">How to Use RSA Key for SSH Authentication</a></li>\n<li><a href=\"https://testerhome.com/topics/8328\" target=\"_blank\" rel=\"noopener\">远程主机设置\b公钥信息</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>经常通过ssh访问远程主机需要输入密码之类的，比较繁琐。其实可以让远程主机授权给你当前电脑，并且授权\b没有设置密码。下次再连接时，可以直接登录。</p>\n<h2 id=\"生成RSA密钥\"><a href=\"#生成RSA密钥\" class=\"headerlink\" title=\"生成RSA密钥\"></a>生成RSA密钥</h2><ul>\n<li><p>使用<code>ssh-keygen</code>命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用默认的存放目录，所以回车即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file in which to save the key (~/.ssh/id_rsa):</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不\b设置密码直接回车。\b\b如果设置了密码，每次进行授权时，都要\b输入。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter passphrase (empty for no passphrase):</span><br><span class=\"line\">Enter same passphrase again:</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>密钥生成<br>在~/.ssh/目录中会有id_rsa（私钥）、id_rsa.pub（公钥）</p>\n</li>\n</ul>\n<h2 id=\"在远程主机设置公钥信息\"><a href=\"#在远程主机设置公钥信息\" class=\"headerlink\" title=\"在远程主机设置\b公钥信息\"></a>在远程主机设置\b公钥信息</h2><h3 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h3><ul>\n<li>使用<code>ssh-copy-id</code>命令<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id -i ~/.ssh/id_rsa.pub username@hostname.com</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>还没有使用ssh授权，所以会被要求输入远程\b主机的密码</p>\n</blockquote>\n<h3 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h3><ul>\n<li>把id_rsa.pub上传到远程主机<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp .ssh/id_rsa.pub username@hostname.com:~</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>scp命令也是基于ssh的。还没有使用ssh授权，所以会被要求输入远程\b主机的密码</p>\n<ul>\n<li>\b连接远程主机<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh username@hostname.com</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>\b同样被要求输入远程主机的密码</p>\n<ul>\n<li>把id_rsa.pub的内容添加到\b用户\b根目录的.ssh/authorized_keys文件中<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~</span><br><span class=\"line\">cat id_rsa.pub &gt;&gt; .ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>参考来源：  </p>\n<ul>\n<li><a href=\"http://news.softpedia.com/news/How-to-Use-RSA-Key-for-SSH-Authentication-38599.shtml\" target=\"_blank\" rel=\"noopener\">How to Use RSA Key for SSH Authentication</a></li>\n<li><a href=\"https://testerhome.com/topics/8328\" target=\"_blank\" rel=\"noopener\">远程主机设置\b公钥信息</a></li>\n</ul>\n"},{"title":"webpack-loader","date":"2017-09-15T15:37:54.000Z","_content":"\n## 介绍\nwebpack的loader是用来处理各种资源，并把资源转为javaScript模块。  \n这个过程就像流水线，原材料(资源)经过一道道工序(loader),最后得到产品（javaScript模块）。\n\n## loader的处理过程\n同一种资源也可能被多个loader处理，它们是串行的，前一个loader处理完就交给下一个loader。   \n对于每个loader都会经过两个过程pitch和normal(自己取的名字)，如下：   \n![loader处理过程](/images/webpack-loader-order.png)\n\n+ 先经历pitch过程，从上往下（从后置loader到前置loader），调用loader的pitch方法，资源并没有被处理。\n+ 如果某个loader的pitch方法，有返回值，则它下面的loader不再被调用。直接从这个loader起进入normal过程，并且把返回值当前新资源（原来的资源丢弃）。\n+ normal的过程，从下往上资源被一个个loader处理，最后得到最终的JavaScript模块。\n\n## loader\b\b分类\n+ 配置中定义的loader一般都是`普遍loader`\n+ 配置中enforce字段的值可为post和pre，分别对应`后置loader`和`前置loader`\n+ 在代码中指定使用的loader为`行内loader`\n\n> 配置中同类型(\b普遍、前置或者后置)的loader在normal过程执行顺序，是根据在rules数组中的位置确定的，越\b靠后越先执行。\n\b行内loader\b\b则是从右往左\b执行。例如require('style-loader!css-loader!global.css')，先执行css-loader，再执行style-loader\n\n还会存在被\b忽略的情况:  \n+ 所有普通loader可以通过在请求中加上 ! 前缀来忽略（覆盖）。\n+ 所有普通和前置loader可以通过在请求中加上 -! 前缀来忽略（覆盖）。\n+ 所有普通，后置和前置loader可以通过在请求中加上 !! 前缀来忽略（覆盖）。\n\n>官方建议：应该使用行内 loader 和 ! 前缀，因为它们是非标准的。它们可在由 loader 生成的代码中使用。 \n\n\n## 最后\n具体使用和理解可以见后续笔记。","source":"_posts/webpack-loader.md","raw":"---\ntitle: webpack-loader\ndate: 2017-09-15 23:37:54\ntags:  \n  - webpack\n  - loader\n---\n\n## 介绍\nwebpack的loader是用来处理各种资源，并把资源转为javaScript模块。  \n这个过程就像流水线，原材料(资源)经过一道道工序(loader),最后得到产品（javaScript模块）。\n\n## loader的处理过程\n同一种资源也可能被多个loader处理，它们是串行的，前一个loader处理完就交给下一个loader。   \n对于每个loader都会经过两个过程pitch和normal(自己取的名字)，如下：   \n![loader处理过程](/images/webpack-loader-order.png)\n\n+ 先经历pitch过程，从上往下（从后置loader到前置loader），调用loader的pitch方法，资源并没有被处理。\n+ 如果某个loader的pitch方法，有返回值，则它下面的loader不再被调用。直接从这个loader起进入normal过程，并且把返回值当前新资源（原来的资源丢弃）。\n+ normal的过程，从下往上资源被一个个loader处理，最后得到最终的JavaScript模块。\n\n## loader\b\b分类\n+ 配置中定义的loader一般都是`普遍loader`\n+ 配置中enforce字段的值可为post和pre，分别对应`后置loader`和`前置loader`\n+ 在代码中指定使用的loader为`行内loader`\n\n> 配置中同类型(\b普遍、前置或者后置)的loader在normal过程执行顺序，是根据在rules数组中的位置确定的，越\b靠后越先执行。\n\b行内loader\b\b则是从右往左\b执行。例如require('style-loader!css-loader!global.css')，先执行css-loader，再执行style-loader\n\n还会存在被\b忽略的情况:  \n+ 所有普通loader可以通过在请求中加上 ! 前缀来忽略（覆盖）。\n+ 所有普通和前置loader可以通过在请求中加上 -! 前缀来忽略（覆盖）。\n+ 所有普通，后置和前置loader可以通过在请求中加上 !! 前缀来忽略（覆盖）。\n\n>官方建议：应该使用行内 loader 和 ! 前缀，因为它们是非标准的。它们可在由 loader 生成的代码中使用。 \n\n\n## 最后\n具体使用和理解可以见后续笔记。","slug":"webpack-loader","published":1,"updated":"2018-01-14T10:50:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymsten700137nwfz2a5xr8r","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>webpack的loader是用来处理各种资源，并把资源转为javaScript模块。<br>这个过程就像流水线，原材料(资源)经过一道道工序(loader),最后得到产品（javaScript模块）。</p>\n<h2 id=\"loader的处理过程\"><a href=\"#loader的处理过程\" class=\"headerlink\" title=\"loader的处理过程\"></a>loader的处理过程</h2><p>同一种资源也可能被多个loader处理，它们是串行的，前一个loader处理完就交给下一个loader。<br>对于每个loader都会经过两个过程pitch和normal(自己取的名字)，如下：<br><img src=\"/images/webpack-loader-order.png\" alt=\"loader处理过程\"></p>\n<ul>\n<li>先经历pitch过程，从上往下（从后置loader到前置loader），调用loader的pitch方法，资源并没有被处理。</li>\n<li>如果某个loader的pitch方法，有返回值，则它下面的loader不再被调用。直接从这个loader起进入normal过程，并且把返回值当前新资源（原来的资源丢弃）。</li>\n<li>normal的过程，从下往上资源被一个个loader处理，最后得到最终的JavaScript模块。</li>\n</ul>\n<h2 id=\"loader分类\"><a href=\"#loader分类\" class=\"headerlink\" title=\"loader\b\b分类\"></a>loader\b\b分类</h2><ul>\n<li>配置中定义的loader一般都是<code>普遍loader</code></li>\n<li>配置中enforce字段的值可为post和pre，分别对应<code>后置loader</code>和<code>前置loader</code></li>\n<li>在代码中指定使用的loader为<code>行内loader</code></li>\n</ul>\n<blockquote>\n<p>配置中同类型(\b普遍、前置或者后置)的loader在normal过程执行顺序，是根据在rules数组中的位置确定的，越\b靠后越先执行。<br>\b行内loader\b\b则是从右往左\b执行。例如require(‘style-loader!css-loader!global.css’)，先执行css-loader，再执行style-loader</p>\n</blockquote>\n<p>还会存在被\b忽略的情况:  </p>\n<ul>\n<li>所有普通loader可以通过在请求中加上 ! 前缀来忽略（覆盖）。</li>\n<li>所有普通和前置loader可以通过在请求中加上 -! 前缀来忽略（覆盖）。</li>\n<li>所有普通，后置和前置loader可以通过在请求中加上 !! 前缀来忽略（覆盖）。</li>\n</ul>\n<blockquote>\n<p>官方建议：应该使用行内 loader 和 ! 前缀，因为它们是非标准的。它们可在由 loader 生成的代码中使用。 </p>\n</blockquote>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>具体使用和理解可以见后续笔记。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>webpack的loader是用来处理各种资源，并把资源转为javaScript模块。<br>这个过程就像流水线，原材料(资源)经过一道道工序(loader),最后得到产品（javaScript模块）。</p>\n<h2 id=\"loader的处理过程\"><a href=\"#loader的处理过程\" class=\"headerlink\" title=\"loader的处理过程\"></a>loader的处理过程</h2><p>同一种资源也可能被多个loader处理，它们是串行的，前一个loader处理完就交给下一个loader。<br>对于每个loader都会经过两个过程pitch和normal(自己取的名字)，如下：<br><img src=\"/images/webpack-loader-order.png\" alt=\"loader处理过程\"></p>\n<ul>\n<li>先经历pitch过程，从上往下（从后置loader到前置loader），调用loader的pitch方法，资源并没有被处理。</li>\n<li>如果某个loader的pitch方法，有返回值，则它下面的loader不再被调用。直接从这个loader起进入normal过程，并且把返回值当前新资源（原来的资源丢弃）。</li>\n<li>normal的过程，从下往上资源被一个个loader处理，最后得到最终的JavaScript模块。</li>\n</ul>\n<h2 id=\"loader分类\"><a href=\"#loader分类\" class=\"headerlink\" title=\"loader\b\b分类\"></a>loader\b\b分类</h2><ul>\n<li>配置中定义的loader一般都是<code>普遍loader</code></li>\n<li>配置中enforce字段的值可为post和pre，分别对应<code>后置loader</code>和<code>前置loader</code></li>\n<li>在代码中指定使用的loader为<code>行内loader</code></li>\n</ul>\n<blockquote>\n<p>配置中同类型(\b普遍、前置或者后置)的loader在normal过程执行顺序，是根据在rules数组中的位置确定的，越\b靠后越先执行。<br>\b行内loader\b\b则是从右往左\b执行。例如require(‘style-loader!css-loader!global.css’)，先执行css-loader，再执行style-loader</p>\n</blockquote>\n<p>还会存在被\b忽略的情况:  </p>\n<ul>\n<li>所有普通loader可以通过在请求中加上 ! 前缀来忽略（覆盖）。</li>\n<li>所有普通和前置loader可以通过在请求中加上 -! 前缀来忽略（覆盖）。</li>\n<li>所有普通，后置和前置loader可以通过在请求中加上 !! 前缀来忽略（覆盖）。</li>\n</ul>\n<blockquote>\n<p>官方建议：应该使用行内 loader 和 ! 前缀，因为它们是非标准的。它们可在由 loader 生成的代码中使用。 </p>\n</blockquote>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>具体使用和理解可以见后续笔记。</p>\n"},{"title":"0922","date":"2018-09-22T10:00:00.000Z","_content":"\n## 23a2bde88917cd3f043beca4f5da3b37b0f9de29\n重构了下\n\n## 62b75d49838744f8b865064256c5f0f8df51616e\n处理内嵌的scope，逻辑结果如下\n\n```\nvar data ={ items:[{name:\"2\"}],name:\"1\"}\n\n<div v-each=\"item:items\">\n  <span v-text=\"item.name\"></span>\n  <span v-text=\"name\"></span>\n</div>\n\n```\n得到\n```\n<div>\n  <span>2</span>\n  <span>1</span>\n</div>\n\n```\nv-each=\"item:items\"的arg为item。则prefixRE = new RegExp('^' + this.arg + '.')\nv-text=\"item.name\"的key为item.name,这个key匹配prefixRE,则该指令属于改成seed。否则指令属于上层seed.","source":"_drafts/vue-source/0922.md","raw":"---\ntitle: 0922\ndate: 2018-09-22 18:00:00\ntags:\n---\n\n## 23a2bde88917cd3f043beca4f5da3b37b0f9de29\n重构了下\n\n## 62b75d49838744f8b865064256c5f0f8df51616e\n处理内嵌的scope，逻辑结果如下\n\n```\nvar data ={ items:[{name:\"2\"}],name:\"1\"}\n\n<div v-each=\"item:items\">\n  <span v-text=\"item.name\"></span>\n  <span v-text=\"name\"></span>\n</div>\n\n```\n得到\n```\n<div>\n  <span>2</span>\n  <span>1</span>\n</div>\n\n```\nv-each=\"item:items\"的arg为item。则prefixRE = new RegExp('^' + this.arg + '.')\nv-text=\"item.name\"的key为item.name,这个key匹配prefixRE,则该指令属于改成seed。否则指令属于上层seed.","slug":"vue-source/0922","published":0,"updated":"2018-09-22T15:03:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymstent001c7nwf47al6c9t","content":"<h2 id=\"23a2bde88917cd3f043beca4f5da3b37b0f9de29\"><a href=\"#23a2bde88917cd3f043beca4f5da3b37b0f9de29\" class=\"headerlink\" title=\"23a2bde88917cd3f043beca4f5da3b37b0f9de29\"></a>23a2bde88917cd3f043beca4f5da3b37b0f9de29</h2><p>重构了下</p>\n<h2 id=\"62b75d49838744f8b865064256c5f0f8df51616e\"><a href=\"#62b75d49838744f8b865064256c5f0f8df51616e\" class=\"headerlink\" title=\"62b75d49838744f8b865064256c5f0f8df51616e\"></a>62b75d49838744f8b865064256c5f0f8df51616e</h2><p>处理内嵌的scope，逻辑结果如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var data =&#123; items:[&#123;name:&quot;2&quot;&#125;],name:&quot;1&quot;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div v-each=&quot;item:items&quot;&gt;</span><br><span class=\"line\">  &lt;span v-text=&quot;item.name&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\">  &lt;span v-text=&quot;name&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>得到<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;span&gt;2&lt;/span&gt;</span><br><span class=\"line\">  &lt;span&gt;1&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>v-each=”item:items”的arg为item。则prefixRE = new RegExp(‘^’ + this.arg + ‘.’)<br>v-text=”item.name”的key为item.name,这个key匹配prefixRE,则该指令属于改成seed。否则指令属于上层seed.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"23a2bde88917cd3f043beca4f5da3b37b0f9de29\"><a href=\"#23a2bde88917cd3f043beca4f5da3b37b0f9de29\" class=\"headerlink\" title=\"23a2bde88917cd3f043beca4f5da3b37b0f9de29\"></a>23a2bde88917cd3f043beca4f5da3b37b0f9de29</h2><p>重构了下</p>\n<h2 id=\"62b75d49838744f8b865064256c5f0f8df51616e\"><a href=\"#62b75d49838744f8b865064256c5f0f8df51616e\" class=\"headerlink\" title=\"62b75d49838744f8b865064256c5f0f8df51616e\"></a>62b75d49838744f8b865064256c5f0f8df51616e</h2><p>处理内嵌的scope，逻辑结果如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var data =&#123; items:[&#123;name:&quot;2&quot;&#125;],name:&quot;1&quot;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div v-each=&quot;item:items&quot;&gt;</span><br><span class=\"line\">  &lt;span v-text=&quot;item.name&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\">  &lt;span v-text=&quot;name&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>得到<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;span&gt;2&lt;/span&gt;</span><br><span class=\"line\">  &lt;span&gt;1&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>v-each=”item:items”的arg为item。则prefixRE = new RegExp(‘^’ + this.arg + ‘.’)<br>v-text=”item.name”的key为item.name,这个key匹配prefixRE,则该指令属于改成seed。否则指令属于上层seed.</p>\n"},{"title":"0825","date":"2018-08-25T15:00:00.000Z","_content":"\n## 31498397366dc036911690e06670a1b0d1746654\n本来是通过root.querySelectorAll(config.selector)得到需要解析的nodes\n改成了从根节点开始，遍历整棵树，找到匹配的节点。注意遇到sd-block字段为true的node是不做处理的。\n    \n处理each指令时，会执行指令的bind方法。该方法会对当前的el，设置sd-block字段为true。同时把该el从整个节点树移除。\n当该指令的对应是数据（数组）被赋值时，首次会由根据数组生成很多新的节点，即this.el.cloneNode(true)，给每个节点构造一个Seed，存储到each指令的childSeeds中。\n\n\n\n\n\n\n\n","source":"_drafts/vue-source/0825.md","raw":"---\ntitle: 0825\ndate: 2018-08-25 23:00:00\ntags:\n---\n\n## 31498397366dc036911690e06670a1b0d1746654\n本来是通过root.querySelectorAll(config.selector)得到需要解析的nodes\n改成了从根节点开始，遍历整棵树，找到匹配的节点。注意遇到sd-block字段为true的node是不做处理的。\n    \n处理each指令时，会执行指令的bind方法。该方法会对当前的el，设置sd-block字段为true。同时把该el从整个节点树移除。\n当该指令的对应是数据（数组）被赋值时，首次会由根据数组生成很多新的节点，即this.el.cloneNode(true)，给每个节点构造一个Seed，存储到each指令的childSeeds中。\n\n\n\n\n\n\n\n","slug":"vue-source/0825","published":0,"updated":"2018-08-27T02:25:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymstenu001e7nwf2dilmxl5","content":"<h2 id=\"31498397366dc036911690e06670a1b0d1746654\"><a href=\"#31498397366dc036911690e06670a1b0d1746654\" class=\"headerlink\" title=\"31498397366dc036911690e06670a1b0d1746654\"></a>31498397366dc036911690e06670a1b0d1746654</h2><p>本来是通过root.querySelectorAll(config.selector)得到需要解析的nodes<br>改成了从根节点开始，遍历整棵树，找到匹配的节点。注意遇到sd-block字段为true的node是不做处理的。</p>\n<p>处理each指令时，会执行指令的bind方法。该方法会对当前的el，设置sd-block字段为true。同时把该el从整个节点树移除。<br>当该指令的对应是数据（数组）被赋值时，首次会由根据数组生成很多新的节点，即this.el.cloneNode(true)，给每个节点构造一个Seed，存储到each指令的childSeeds中。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"31498397366dc036911690e06670a1b0d1746654\"><a href=\"#31498397366dc036911690e06670a1b0d1746654\" class=\"headerlink\" title=\"31498397366dc036911690e06670a1b0d1746654\"></a>31498397366dc036911690e06670a1b0d1746654</h2><p>本来是通过root.querySelectorAll(config.selector)得到需要解析的nodes<br>改成了从根节点开始，遍历整棵树，找到匹配的节点。注意遇到sd-block字段为true的node是不做处理的。</p>\n<p>处理each指令时，会执行指令的bind方法。该方法会对当前的el，设置sd-block字段为true。同时把该el从整个节点树移除。<br>当该指令的对应是数据（数组）被赋值时，首次会由根据数组生成很多新的节点，即this.el.cloneNode(true)，给每个节点构造一个Seed，存储到each指令的childSeeds中。</p>\n"},{"title":"0822","date":"2018-08-22T15:00:00.000Z","_content":"\n## ec394395569ea81e50209b9e241e789cfacde588\n小改动\n\n## cf1732bea21dcc1637d587d295d534535a92d2b7\n重构了下，把指令directives单独出来一个文件。不用Direction\n\n","source":"_drafts/vue-source/0822.md","raw":"---\ntitle: 0822\ndate: 2018-08-22 23:00:00\ntags:\n---\n\n## ec394395569ea81e50209b9e241e789cfacde588\n小改动\n\n## cf1732bea21dcc1637d587d295d534535a92d2b7\n重构了下，把指令directives单独出来一个文件。不用Direction\n\n","slug":"vue-source/0822","published":0,"updated":"2018-08-23T02:26:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymstenv001g7nwfwcnwdjj0","content":"<h2 id=\"ec394395569ea81e50209b9e241e789cfacde588\"><a href=\"#ec394395569ea81e50209b9e241e789cfacde588\" class=\"headerlink\" title=\"ec394395569ea81e50209b9e241e789cfacde588\"></a>ec394395569ea81e50209b9e241e789cfacde588</h2><p>小改动</p>\n<h2 id=\"cf1732bea21dcc1637d587d295d534535a92d2b7\"><a href=\"#cf1732bea21dcc1637d587d295d534535a92d2b7\" class=\"headerlink\" title=\"cf1732bea21dcc1637d587d295d534535a92d2b7\"></a>cf1732bea21dcc1637d587d295d534535a92d2b7</h2><p>重构了下，把指令directives单独出来一个文件。不用Direction</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"ec394395569ea81e50209b9e241e789cfacde588\"><a href=\"#ec394395569ea81e50209b9e241e789cfacde588\" class=\"headerlink\" title=\"ec394395569ea81e50209b9e241e789cfacde588\"></a>ec394395569ea81e50209b9e241e789cfacde588</h2><p>小改动</p>\n<h2 id=\"cf1732bea21dcc1637d587d295d534535a92d2b7\"><a href=\"#cf1732bea21dcc1637d587d295d534535a92d2b7\" class=\"headerlink\" title=\"cf1732bea21dcc1637d587d295d534535a92d2b7\"></a>cf1732bea21dcc1637d587d295d534535a92d2b7</h2><p>重构了下，把指令directives单独出来一个文件。不用Direction</p>\n"},{"_content":"\n## tag\nhttps://github.com/vuejs/vue/tags?after=v0.8.0","source":"_drafts/vue-source/README.md","raw":"\n## tag\nhttps://github.com/vuejs/vue/tags?after=v0.8.0","slug":"vue-source/README","published":0,"date":"2018-09-22T11:41:14.000Z","updated":"2018-09-22T11:41:23.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymstenw001i7nwf8h2kccsa","content":"<h2 id=\"tag\"><a href=\"#tag\" class=\"headerlink\" title=\"tag\"></a>tag</h2><p><a href=\"https://github.com/vuejs/vue/tags?after=v0.8.0\" target=\"_blank\" rel=\"noopener\">https://github.com/vuejs/vue/tags?after=v0.8.0</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"tag\"><a href=\"#tag\" class=\"headerlink\" title=\"tag\"></a>tag</h2><p><a href=\"https://github.com/vuejs/vue/tags?after=v0.8.0\" target=\"_blank\" rel=\"noopener\">https://github.com/vuejs/vue/tags?after=v0.8.0</a></p>\n"},{"title":"根目录","date":"2018-10-28T13:13:58.000Z","_content":"\n\n\n","source":"_drafts/vue-1.0.28/root.md","raw":"---\ntitle: 根目录\ndate: 2018-10-28 21:13:58\ntags:\n---\n\n\n\n","slug":"vue-1.0.28/root","published":0,"updated":"2018-10-28T05:20:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymstenw001k7nwff41ro8up","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"1007","date":"2018-10-07T10:00:00.000Z","_content":"\n## 14d0cefe6b65e03786eb9811fb39c741d8cd802e\n调整setter的初始化。\n不再给每个字段进行赋值，而是再进行绑定时，调用指令的update方法。\n\n```\n// Seed.prototype._bind方法中\nif (binding.value) {\n    directive.update(binding.value)\n}\n```\n\n","source":"_drafts/vue-source/1007.md","raw":"---\ntitle: 1007\ndate: 2018-10-07 18:00:00\ntags:\n---\n\n## 14d0cefe6b65e03786eb9811fb39c741d8cd802e\n调整setter的初始化。\n不再给每个字段进行赋值，而是再进行绑定时，调用指令的update方法。\n\n```\n// Seed.prototype._bind方法中\nif (binding.value) {\n    directive.update(binding.value)\n}\n```\n\n","slug":"vue-source/1007","published":0,"updated":"2018-10-07T10:21:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymstenx001m7nwf49kmbz6y","content":"<h2 id=\"14d0cefe6b65e03786eb9811fb39c741d8cd802e\"><a href=\"#14d0cefe6b65e03786eb9811fb39c741d8cd802e\" class=\"headerlink\" title=\"14d0cefe6b65e03786eb9811fb39c741d8cd802e\"></a>14d0cefe6b65e03786eb9811fb39c741d8cd802e</h2><p>调整setter的初始化。<br>不再给每个字段进行赋值，而是再进行绑定时，调用指令的update方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Seed.prototype._bind方法中</span><br><span class=\"line\">if (binding.value) &#123;</span><br><span class=\"line\">    directive.update(binding.value)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"14d0cefe6b65e03786eb9811fb39c741d8cd802e\"><a href=\"#14d0cefe6b65e03786eb9811fb39c741d8cd802e\" class=\"headerlink\" title=\"14d0cefe6b65e03786eb9811fb39c741d8cd802e\"></a>14d0cefe6b65e03786eb9811fb39c741d8cd802e</h2><p>调整setter的初始化。<br>不再给每个字段进行赋值，而是再进行绑定时，调用指令的update方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Seed.prototype._bind方法中</span><br><span class=\"line\">if (binding.value) &#123;</span><br><span class=\"line\">    directive.update(binding.value)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"0823","date":"2018-08-22T15:00:00.000Z","_content":"\n## 154861f71d4886251e0057c74f07c786f5262081\n完善each指令，定义了mutate方法，但没实现\n\n## 79760c09d50caca7ca27cd85991eb2c6e9ba3231\n把main.js中代码拆出了几个文件，同时对外提供了directive、filter、config、plant等方法。\n\n数据中如果有数组类型的字段，会重写它的几个方法，内部继续会执行原生方法，但额外会执行其他代码\nmutatorMethods = [\n    'pop',\n    'push',\n    'reverse',\n    'shift',\n    'unshift',\n    'splice',\n    'sort'\n]\n\n## 5ce3b82b91a134f57dd1dffe8553cec369a56c70\n稍微重构了下，库对外导出的值改成Seed方法。\n\n\n\n\n\n\n\n","source":"_drafts/vue-source/0823.md","raw":"---\ntitle: 0823\ndate: 2018-08-22 23:00:00\ntags:\n---\n\n## 154861f71d4886251e0057c74f07c786f5262081\n完善each指令，定义了mutate方法，但没实现\n\n## 79760c09d50caca7ca27cd85991eb2c6e9ba3231\n把main.js中代码拆出了几个文件，同时对外提供了directive、filter、config、plant等方法。\n\n数据中如果有数组类型的字段，会重写它的几个方法，内部继续会执行原生方法，但额外会执行其他代码\nmutatorMethods = [\n    'pop',\n    'push',\n    'reverse',\n    'shift',\n    'unshift',\n    'splice',\n    'sort'\n]\n\n## 5ce3b82b91a134f57dd1dffe8553cec369a56c70\n稍微重构了下，库对外导出的值改成Seed方法。\n\n\n\n\n\n\n\n","slug":"vue-source/0823","published":0,"updated":"2018-08-27T02:25:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymsteny001o7nwfz2ccz0hc","content":"<h2 id=\"154861f71d4886251e0057c74f07c786f5262081\"><a href=\"#154861f71d4886251e0057c74f07c786f5262081\" class=\"headerlink\" title=\"154861f71d4886251e0057c74f07c786f5262081\"></a>154861f71d4886251e0057c74f07c786f5262081</h2><p>完善each指令，定义了mutate方法，但没实现</p>\n<h2 id=\"79760c09d50caca7ca27cd85991eb2c6e9ba3231\"><a href=\"#79760c09d50caca7ca27cd85991eb2c6e9ba3231\" class=\"headerlink\" title=\"79760c09d50caca7ca27cd85991eb2c6e9ba3231\"></a>79760c09d50caca7ca27cd85991eb2c6e9ba3231</h2><p>把main.js中代码拆出了几个文件，同时对外提供了directive、filter、config、plant等方法。</p>\n<p>数据中如果有数组类型的字段，会重写它的几个方法，内部继续会执行原生方法，但额外会执行其他代码<br>mutatorMethods = [<br>    ‘pop’,<br>    ‘push’,<br>    ‘reverse’,<br>    ‘shift’,<br>    ‘unshift’,<br>    ‘splice’,<br>    ‘sort’<br>]</p>\n<h2 id=\"5ce3b82b91a134f57dd1dffe8553cec369a56c70\"><a href=\"#5ce3b82b91a134f57dd1dffe8553cec369a56c70\" class=\"headerlink\" title=\"5ce3b82b91a134f57dd1dffe8553cec369a56c70\"></a>5ce3b82b91a134f57dd1dffe8553cec369a56c70</h2><p>稍微重构了下，库对外导出的值改成Seed方法。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"154861f71d4886251e0057c74f07c786f5262081\"><a href=\"#154861f71d4886251e0057c74f07c786f5262081\" class=\"headerlink\" title=\"154861f71d4886251e0057c74f07c786f5262081\"></a>154861f71d4886251e0057c74f07c786f5262081</h2><p>完善each指令，定义了mutate方法，但没实现</p>\n<h2 id=\"79760c09d50caca7ca27cd85991eb2c6e9ba3231\"><a href=\"#79760c09d50caca7ca27cd85991eb2c6e9ba3231\" class=\"headerlink\" title=\"79760c09d50caca7ca27cd85991eb2c6e9ba3231\"></a>79760c09d50caca7ca27cd85991eb2c6e9ba3231</h2><p>把main.js中代码拆出了几个文件，同时对外提供了directive、filter、config、plant等方法。</p>\n<p>数据中如果有数组类型的字段，会重写它的几个方法，内部继续会执行原生方法，但额外会执行其他代码<br>mutatorMethods = [<br>    ‘pop’,<br>    ‘push’,<br>    ‘reverse’,<br>    ‘shift’,<br>    ‘unshift’,<br>    ‘splice’,<br>    ‘sort’<br>]</p>\n<h2 id=\"5ce3b82b91a134f57dd1dffe8553cec369a56c70\"><a href=\"#5ce3b82b91a134f57dd1dffe8553cec369a56c70\" class=\"headerlink\" title=\"5ce3b82b91a134f57dd1dffe8553cec369a56c70\"></a>5ce3b82b91a134f57dd1dffe8553cec369a56c70</h2><p>稍微重构了下，库对外导出的值改成Seed方法。</p>\n"},{"title":"水平放置多块有间隙的内容","date":"2017-11-19T12:29:29.000Z","_content":"\n## 要求\n\n在布局中经常会遇到要在一行内放置多块内容，内容块之间有间隙，内容和行边缘没有间隙；均分且填充满父容器。如下图：\n\n![行内容](/images/css-skill.png)\n\n## 常规实现\n每块内容设置固定宽度，给块设置margin作为间隙,第一块或者最后一块的margin为0。  \n每块的内容宽度需要计算得出：  \n父容器内容的总宽度W,一行放置的块数n,每块之间的间隙距离m，则每块内容宽度w=(W-(n-1)*m)/n\n\n缺点：父容器宽度必须已知且固定不变。还要计算每块内容宽度。\n\n```html\n<style>\n*{\n  box-sizing: border-box;\n}\n.content-list {\n  list-style-type: none;\n  background-color: yellow;\n  padding:0;\n  width: 630px;\n}\n.content-list:after{\n  content: \" \";\n  display: table;\n  clear: both;\n}\n.content-item{\n  float: left;\n  width: 200px;\n  height: 200px;\n  background-color: red;\n  margin-left: 15px;\n}\n.content-item:first-child{\n  margin-left:0; \n}\n</style>\n\n<ul class=\"content-list\">\n  <li class=\"content-item\"></li>\n  <li class=\"content-item\"></li>\n  <li class=\"content-item\"></li>\n</ul>\n```\n![常规实现](/images/css-skill3.png)\n\n## 百分比的实现\n均分往往想到用百分比，但块之间要有间隙，可以在块内部使用padding。则内容之间就能出现间隙了，但可以在设置padding时遇到了阻碍。  \n因为行边缘的块只有一侧才挨着另外的块，所以这个padding不能统一设置成一样的。每块的padding都要通过计算得到。看下图:\n\n![padding计算](/images/css-skill2.jpeg)  \n\n优点：父容器宽度可以不固定\n缺点：每块的padding大小不同，需要计算\n\n```html\n<style>\n*{\n   box-sizing: border-box;\n}\n.content-list {\n  list-style-type: none;\n  background-color: yellow;\n  padding:0;\n  width: 630px;\n}\n.content-list:after{\n  content: \" \";\n  display: table;\n  clear: both;\n}\n.content-item{\n  float: left;\n  width: 33.333%;\n  height: 200px;\n  background-color: gray;\n} \n.content-item-inner{\n  background-color: red;\n  width: 100%;\n  height: 100%;\n}\n</style>\n\n<ul class=\"content-list\">\n  <li class=\"content-item\" style=\"padding-right:10px\">\n    <div class=\"content-item-inner\"></div>\n  </li>\n  <li class=\"content-item\" style=\"padding-left:5px;padding-right:5px;\">\n    <div class=\"content-item-inner\"></div>\n  </li>\n  <li class=\"content-item\" style=\"padding-left:10px;\">\n    <div class=\"content-item-inner\"></div>\n  </li>\n</ul>\n\n```\n\n![百分比实现](/images/css-skill4.png)\n\n## 更好的实现\n上面百分比的实现不够好，padding的计算不太方便。如果每块的padding都相同，这样就方便很多了。这是由于两侧的块在行边缘处没有padding导致的，如果有padding，就会让行两侧边缘和块内容有间隙了，但要求填充一行。\n但如果父容器增加宽度，这个宽度是两侧间隙之和。这样即使两侧有间隙也没问题了。（bootstrap就是这样做的）\n\n```html\n<style>\n* {\n  box-sizing: border-box;\n}\n\n.content-list {\n  list-style-type: none;\n  background-color: yellow;\n  padding: 0;\n  width: 630px;\n  margin-left: -7.5px;\n  margin-right: -7.5px;\n}\n\n.content-list:after {\n  content: \" \";\n  display: table;\n  clear: both;\n}\n.content-item{\n  float: left;\n  width: 33.333%;\n  height: 200px;\n  padding:0 7.5px;\n  background-color: gray;\n} \n.content-item-inner{\n  background-color: red;\n  width: 100%;\n  height: 100%;\n}\n</style>\n<ul class=\"content-list\">\n  <li class=\"content-item\">\n    <div class=\"content-item-inner\"></div>\n  </li>\n  <li class=\"content-item\">\n    <div class=\"content-item-inner\"></div>\n  </li>\n  <li class=\"content-item\">\n    <div class=\"content-item-inner\"></div>\n  </li>\n</ul>\n\n```\n\n![更好的实现](/images/css-skill5.png)\n\n> 行两侧边缘的空隙事实上是在原容器宽度基础上增加的，所以两侧的块都设置paddng就刚好抵消了。为了让人看不出两侧的空隙，颜色一般设置和背景颜色一样。","source":"_posts/css/skill.md","raw":"---\ntitle: 水平放置多块有间隙的内容\ndate: 2017-11-19 20:29:29\ntags:  \n  - css\n  - 布局\n---\n\n## 要求\n\n在布局中经常会遇到要在一行内放置多块内容，内容块之间有间隙，内容和行边缘没有间隙；均分且填充满父容器。如下图：\n\n![行内容](/images/css-skill.png)\n\n## 常规实现\n每块内容设置固定宽度，给块设置margin作为间隙,第一块或者最后一块的margin为0。  \n每块的内容宽度需要计算得出：  \n父容器内容的总宽度W,一行放置的块数n,每块之间的间隙距离m，则每块内容宽度w=(W-(n-1)*m)/n\n\n缺点：父容器宽度必须已知且固定不变。还要计算每块内容宽度。\n\n```html\n<style>\n*{\n  box-sizing: border-box;\n}\n.content-list {\n  list-style-type: none;\n  background-color: yellow;\n  padding:0;\n  width: 630px;\n}\n.content-list:after{\n  content: \" \";\n  display: table;\n  clear: both;\n}\n.content-item{\n  float: left;\n  width: 200px;\n  height: 200px;\n  background-color: red;\n  margin-left: 15px;\n}\n.content-item:first-child{\n  margin-left:0; \n}\n</style>\n\n<ul class=\"content-list\">\n  <li class=\"content-item\"></li>\n  <li class=\"content-item\"></li>\n  <li class=\"content-item\"></li>\n</ul>\n```\n![常规实现](/images/css-skill3.png)\n\n## 百分比的实现\n均分往往想到用百分比，但块之间要有间隙，可以在块内部使用padding。则内容之间就能出现间隙了，但可以在设置padding时遇到了阻碍。  \n因为行边缘的块只有一侧才挨着另外的块，所以这个padding不能统一设置成一样的。每块的padding都要通过计算得到。看下图:\n\n![padding计算](/images/css-skill2.jpeg)  \n\n优点：父容器宽度可以不固定\n缺点：每块的padding大小不同，需要计算\n\n```html\n<style>\n*{\n   box-sizing: border-box;\n}\n.content-list {\n  list-style-type: none;\n  background-color: yellow;\n  padding:0;\n  width: 630px;\n}\n.content-list:after{\n  content: \" \";\n  display: table;\n  clear: both;\n}\n.content-item{\n  float: left;\n  width: 33.333%;\n  height: 200px;\n  background-color: gray;\n} \n.content-item-inner{\n  background-color: red;\n  width: 100%;\n  height: 100%;\n}\n</style>\n\n<ul class=\"content-list\">\n  <li class=\"content-item\" style=\"padding-right:10px\">\n    <div class=\"content-item-inner\"></div>\n  </li>\n  <li class=\"content-item\" style=\"padding-left:5px;padding-right:5px;\">\n    <div class=\"content-item-inner\"></div>\n  </li>\n  <li class=\"content-item\" style=\"padding-left:10px;\">\n    <div class=\"content-item-inner\"></div>\n  </li>\n</ul>\n\n```\n\n![百分比实现](/images/css-skill4.png)\n\n## 更好的实现\n上面百分比的实现不够好，padding的计算不太方便。如果每块的padding都相同，这样就方便很多了。这是由于两侧的块在行边缘处没有padding导致的，如果有padding，就会让行两侧边缘和块内容有间隙了，但要求填充一行。\n但如果父容器增加宽度，这个宽度是两侧间隙之和。这样即使两侧有间隙也没问题了。（bootstrap就是这样做的）\n\n```html\n<style>\n* {\n  box-sizing: border-box;\n}\n\n.content-list {\n  list-style-type: none;\n  background-color: yellow;\n  padding: 0;\n  width: 630px;\n  margin-left: -7.5px;\n  margin-right: -7.5px;\n}\n\n.content-list:after {\n  content: \" \";\n  display: table;\n  clear: both;\n}\n.content-item{\n  float: left;\n  width: 33.333%;\n  height: 200px;\n  padding:0 7.5px;\n  background-color: gray;\n} \n.content-item-inner{\n  background-color: red;\n  width: 100%;\n  height: 100%;\n}\n</style>\n<ul class=\"content-list\">\n  <li class=\"content-item\">\n    <div class=\"content-item-inner\"></div>\n  </li>\n  <li class=\"content-item\">\n    <div class=\"content-item-inner\"></div>\n  </li>\n  <li class=\"content-item\">\n    <div class=\"content-item-inner\"></div>\n  </li>\n</ul>\n\n```\n\n![更好的实现](/images/css-skill5.png)\n\n> 行两侧边缘的空隙事实上是在原容器宽度基础上增加的，所以两侧的块都设置paddng就刚好抵消了。为了让人看不出两侧的空隙，颜色一般设置和背景颜色一样。","slug":"css/skill","published":1,"updated":"2018-01-14T10:50:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjymsteny001q7nwfw4cyyig0","content":"<h2 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h2><p>在布局中经常会遇到要在一行内放置多块内容，内容块之间有间隙，内容和行边缘没有间隙；均分且填充满父容器。如下图：</p>\n<p><img src=\"/images/css-skill.png\" alt=\"行内容\"></p>\n<h2 id=\"常规实现\"><a href=\"#常规实现\" class=\"headerlink\" title=\"常规实现\"></a>常规实现</h2><p>每块内容设置固定宽度，给块设置margin作为间隙,第一块或者最后一块的margin为0。<br>每块的内容宽度需要计算得出：<br>父容器内容的总宽度W,一行放置的块数n,每块之间的间隙距离m，则每块内容宽度w=(W-(n-1)*m)/n</p>\n<p>缺点：父容器宽度必须已知且固定不变。还要计算每块内容宽度。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">*&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  box-sizing: border-box;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">.content-list &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  list-style-type: none;</span></span><br><span class=\"line\"><span class=\"undefined\">  background-color: yellow;</span></span><br><span class=\"line\"><span class=\"undefined\">  padding:0;</span></span><br><span class=\"line\"><span class=\"undefined\">  width: 630px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">.content-list:after&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  content: \" \";</span></span><br><span class=\"line\"><span class=\"undefined\">  display: table;</span></span><br><span class=\"line\"><span class=\"undefined\">  clear: both;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">.content-item&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">  width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">  height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">  background-color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">  margin-left: 15px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">.content-item:first-child&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  margin-left:0; </span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-list\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/css-skill3.png\" alt=\"常规实现\"></p>\n<h2 id=\"百分比的实现\"><a href=\"#百分比的实现\" class=\"headerlink\" title=\"百分比的实现\"></a>百分比的实现</h2><p>均分往往想到用百分比，但块之间要有间隙，可以在块内部使用padding。则内容之间就能出现间隙了，但可以在设置padding时遇到了阻碍。<br>因为行边缘的块只有一侧才挨着另外的块，所以这个padding不能统一设置成一样的。每块的padding都要通过计算得到。看下图:</p>\n<p><img src=\"/images/css-skill2.jpeg\" alt=\"padding计算\">  </p>\n<p>优点：父容器宽度可以不固定<br>缺点：每块的padding大小不同，需要计算</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">*&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">   box-sizing: border-box;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">.content-list &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  list-style-type: none;</span></span><br><span class=\"line\"><span class=\"undefined\">  background-color: yellow;</span></span><br><span class=\"line\"><span class=\"undefined\">  padding:0;</span></span><br><span class=\"line\"><span class=\"undefined\">  width: 630px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">.content-list:after&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  content: \" \";</span></span><br><span class=\"line\"><span class=\"undefined\">  display: table;</span></span><br><span class=\"line\"><span class=\"undefined\">  clear: both;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">.content-item&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">  width: 33.333%;</span></span><br><span class=\"line\"><span class=\"undefined\">  height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">  background-color: gray;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125; </span></span><br><span class=\"line\"><span class=\"undefined\">.content-item-inner&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  background-color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">  width: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">  height: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-list\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-item\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"padding-right:10px\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-item-inner\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-item\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"padding-left:5px;padding-right:5px;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-item-inner\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-item\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"padding-left:10px;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-item-inner\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/css-skill4.png\" alt=\"百分比实现\"></p>\n<h2 id=\"更好的实现\"><a href=\"#更好的实现\" class=\"headerlink\" title=\"更好的实现\"></a>更好的实现</h2><p>上面百分比的实现不够好，padding的计算不太方便。如果每块的padding都相同，这样就方便很多了。这是由于两侧的块在行边缘处没有padding导致的，如果有padding，就会让行两侧边缘和块内容有间隙了，但要求填充一行。<br>但如果父容器增加宽度，这个宽度是两侧间隙之和。这样即使两侧有间隙也没问题了。（bootstrap就是这样做的）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">* &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  box-sizing: border-box;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.content-list &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  list-style-type: none;</span></span><br><span class=\"line\"><span class=\"undefined\">  background-color: yellow;</span></span><br><span class=\"line\"><span class=\"undefined\">  padding: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">  width: 630px;</span></span><br><span class=\"line\"><span class=\"undefined\">  margin-left: -7.5px;</span></span><br><span class=\"line\"><span class=\"undefined\">  margin-right: -7.5px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.content-list:after &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  content: \" \";</span></span><br><span class=\"line\"><span class=\"undefined\">  display: table;</span></span><br><span class=\"line\"><span class=\"undefined\">  clear: both;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">.content-item&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">  width: 33.333%;</span></span><br><span class=\"line\"><span class=\"undefined\">  height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">  padding:0 7.5px;</span></span><br><span class=\"line\"><span class=\"undefined\">  background-color: gray;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125; </span></span><br><span class=\"line\"><span class=\"undefined\">.content-item-inner&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  background-color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">  width: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">  height: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-list\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-item\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-item-inner\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-item\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-item-inner\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-item\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-item-inner\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/css-skill5.png\" alt=\"更好的实现\"></p>\n<blockquote>\n<p>行两侧边缘的空隙事实上是在原容器宽度基础上增加的，所以两侧的块都设置paddng就刚好抵消了。为了让人看不出两侧的空隙，颜色一般设置和背景颜色一样。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h2><p>在布局中经常会遇到要在一行内放置多块内容，内容块之间有间隙，内容和行边缘没有间隙；均分且填充满父容器。如下图：</p>\n<p><img src=\"/images/css-skill.png\" alt=\"行内容\"></p>\n<h2 id=\"常规实现\"><a href=\"#常规实现\" class=\"headerlink\" title=\"常规实现\"></a>常规实现</h2><p>每块内容设置固定宽度，给块设置margin作为间隙,第一块或者最后一块的margin为0。<br>每块的内容宽度需要计算得出：<br>父容器内容的总宽度W,一行放置的块数n,每块之间的间隙距离m，则每块内容宽度w=(W-(n-1)*m)/n</p>\n<p>缺点：父容器宽度必须已知且固定不变。还要计算每块内容宽度。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">*&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  box-sizing: border-box;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">.content-list &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  list-style-type: none;</span></span><br><span class=\"line\"><span class=\"undefined\">  background-color: yellow;</span></span><br><span class=\"line\"><span class=\"undefined\">  padding:0;</span></span><br><span class=\"line\"><span class=\"undefined\">  width: 630px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">.content-list:after&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  content: \" \";</span></span><br><span class=\"line\"><span class=\"undefined\">  display: table;</span></span><br><span class=\"line\"><span class=\"undefined\">  clear: both;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">.content-item&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">  width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">  height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">  background-color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">  margin-left: 15px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">.content-item:first-child&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  margin-left:0; </span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-list\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/css-skill3.png\" alt=\"常规实现\"></p>\n<h2 id=\"百分比的实现\"><a href=\"#百分比的实现\" class=\"headerlink\" title=\"百分比的实现\"></a>百分比的实现</h2><p>均分往往想到用百分比，但块之间要有间隙，可以在块内部使用padding。则内容之间就能出现间隙了，但可以在设置padding时遇到了阻碍。<br>因为行边缘的块只有一侧才挨着另外的块，所以这个padding不能统一设置成一样的。每块的padding都要通过计算得到。看下图:</p>\n<p><img src=\"/images/css-skill2.jpeg\" alt=\"padding计算\">  </p>\n<p>优点：父容器宽度可以不固定<br>缺点：每块的padding大小不同，需要计算</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">*&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">   box-sizing: border-box;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">.content-list &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  list-style-type: none;</span></span><br><span class=\"line\"><span class=\"undefined\">  background-color: yellow;</span></span><br><span class=\"line\"><span class=\"undefined\">  padding:0;</span></span><br><span class=\"line\"><span class=\"undefined\">  width: 630px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">.content-list:after&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  content: \" \";</span></span><br><span class=\"line\"><span class=\"undefined\">  display: table;</span></span><br><span class=\"line\"><span class=\"undefined\">  clear: both;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">.content-item&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">  width: 33.333%;</span></span><br><span class=\"line\"><span class=\"undefined\">  height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">  background-color: gray;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125; </span></span><br><span class=\"line\"><span class=\"undefined\">.content-item-inner&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  background-color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">  width: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">  height: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-list\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-item\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"padding-right:10px\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-item-inner\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-item\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"padding-left:5px;padding-right:5px;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-item-inner\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-item\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"padding-left:10px;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-item-inner\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/css-skill4.png\" alt=\"百分比实现\"></p>\n<h2 id=\"更好的实现\"><a href=\"#更好的实现\" class=\"headerlink\" title=\"更好的实现\"></a>更好的实现</h2><p>上面百分比的实现不够好，padding的计算不太方便。如果每块的padding都相同，这样就方便很多了。这是由于两侧的块在行边缘处没有padding导致的，如果有padding，就会让行两侧边缘和块内容有间隙了，但要求填充一行。<br>但如果父容器增加宽度，这个宽度是两侧间隙之和。这样即使两侧有间隙也没问题了。（bootstrap就是这样做的）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">* &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  box-sizing: border-box;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.content-list &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  list-style-type: none;</span></span><br><span class=\"line\"><span class=\"undefined\">  background-color: yellow;</span></span><br><span class=\"line\"><span class=\"undefined\">  padding: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">  width: 630px;</span></span><br><span class=\"line\"><span class=\"undefined\">  margin-left: -7.5px;</span></span><br><span class=\"line\"><span class=\"undefined\">  margin-right: -7.5px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.content-list:after &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  content: \" \";</span></span><br><span class=\"line\"><span class=\"undefined\">  display: table;</span></span><br><span class=\"line\"><span class=\"undefined\">  clear: both;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">.content-item&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">  width: 33.333%;</span></span><br><span class=\"line\"><span class=\"undefined\">  height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">  padding:0 7.5px;</span></span><br><span class=\"line\"><span class=\"undefined\">  background-color: gray;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125; </span></span><br><span class=\"line\"><span class=\"undefined\">.content-item-inner&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  background-color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">  width: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">  height: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-list\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-item\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-item-inner\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-item\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-item-inner\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-item\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-item-inner\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/css-skill5.png\" alt=\"更好的实现\"></p>\n<blockquote>\n<p>行两侧边缘的空隙事实上是在原容器宽度基础上增加的，所以两侧的块都设置paddng就刚好抵消了。为了让人看不出两侧的空隙，颜色一般设置和背景颜色一样。</p>\n</blockquote>\n"},{"title":"Vue的watch执行顺序","date":"2019-08-18T12:26:48.000Z","_content":"## 问题\n最近遇到了和watch相关的问题，执行顺序却不符合预期。  \n先后改变了name2和name1的值，但触发watch的顺序却是先name1后name2。  \n\n代码逻辑如下：\n\n```html\n<template>\n  <div>\n    <button @click=\"onClick\">点击</button>\n  </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n      name1: \"name1\",\n      name2: \"name2\"\n    };\n  },\n  watch: {\n    name1(val) {\n      console.log(val);\n    },\n    name2(val) {\n      console.log(val);\n    }\n  },\n  methods: {\n    onClick() {\n      this.name2 = \"name2!\";\n      this.name1 = \"name1!\";\n    }\n  }\n};\n</script>\n\n\n```\n执行结果：\nname1!  \nname2!  \n\n## 响应式原理\n在Vue文档中没有找到执行顺序的介绍，所以最好的方式就是从源码中一探究竟。  \n先大概了解下Vue的响应式原理，请看[官方文档](https://cn.vuejs.org/v2/guide/reactivity.html#%E5%A6%82%E4%BD%95%E8%BF%BD%E8%B8%AA%E5%8F%98%E5%8C%96)提供的图\n![Vue的响应式原理](/images/vue-responsive.png)\n\n简要说明下：  \n把data的属性全部转为getter和setter。  \n当属性被引用时，触发getter。在getter中，每个属性都对应一个dep对象，dep对象会存储当前的watcher，同时当前的watcher也会存储dep(这就是所谓的依赖收集)。\n当属性被赋值时，触发setter。上面提到的dep就发挥作用了，它通知watcher执行。\n\n本文的重点就是通知watcher执行的过程发生了什么？   \n\n## 研究\n下面是setter的源码，经过调试，发现属性name2是先于name1触发了。    \ndep.notify()就是通知watcher执行，我们跟进去。  \n\n```javascript\n set: function reactiveSetter (newVal) {\n      const value = getter ? getter.call(obj) : val\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\n        customSetter()\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) return\n      if (setter) {\n        setter.call(obj, newVal)\n      } else {\n        val = newVal\n      }\n      childOb = !shallow && observe(newVal)\n      dep.notify()\n    }\n```\n\n------------------------------\n\n\n在dep的notify方法中，对subs按id从小到大排序，然后遍历执行它们的update方法。\nsubs存放着的就是watcher，在我们的例子中，name2的dep并不会有name1的watcher,所以这里的排序不影响例子的执行结果，重点看update方法。我们继续跟进去看。\n\n\n```javascript\n  addSub (sub: Watcher) {\n    this.subs.push(sub)\n  }\n\n  removeSub (sub: Watcher) {\n    remove(this.subs, sub)\n  }\n\n  depend () {\n    if (Dep.target) {\n      Dep.target.addDep(this)\n    }\n  }\n\n  notify () {\n    // stabilize the subscriber list first\n    const subs = this.subs.slice()\n    if (process.env.NODE_ENV !== 'production' && !config.async) {\n      // subs aren't sorted in scheduler if not running async\n      // we need to sort them now to make sure they fire in correct\n      // order\n      subs.sort((a, b) => a.id - b.id)\n    }\n    for (let i = 0, l = subs.length; i < l; i++) {\n      subs[i].update()\n    }\n  }\n}\n\n```\n------------------------------\n\n经过调试，执行了queueWatcher,所以lazy和sync这里不关注。 \nqueueWatcher的定义没有在watcher中，而是在/src/core/observer/scheduler.js文件。  \n当跟进scheduler.js中，发现了这里就有本文的答案，涉及到了队列更新。\n\n```javascript\n  /**\n   * Subscriber interface.\n   * Will be called when a dependency changes.\n   */\n  update () {\n    /* istanbul ignore else */\n    if (this.lazy) {\n      this.dirty = true\n    } else if (this.sync) {\n      this.run()\n    } else {\n      queueWatcher(this)\n    }\n  }\n```\n\n## 更新队列\n其实在Vue的官方文档也有提到，下面是截取的一段话：\n> 可能你还没有注意到，Vue 异步执行 DOM 更新。只要观察到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作上非常重要。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。\n\n**Vue将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。**这一句尤为重要。本文例子中，name2的watcher先被通知的，被队列缓冲了。在这个事件循环中name1的watcher接着也被缓冲了。估计是执行队列时，这两个watcher顺序发生了变化，导致例子运行结果不符合预期。带着疑问继续看代码。\n\n-------------------------------------\nwatcher会被添加到队列，执行flushSchedulerQueue方法会清理队列并执行里面的watcher。\n\n```javascript\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nexport function queueWatcher (watcher: Watcher) {\n  const id = watcher.id\n  if (has[id] == null) {\n    has[id] = true\n    if (!flushing) {\n      queue.push(watcher)\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      let i = queue.length - 1\n      while (i > index && queue[i].id > watcher.id) {\n        i--\n      }\n      queue.splice(i + 1, 0, watcher)\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true\n\n      if (process.env.NODE_ENV !== 'production' && !config.async) {\n        flushSchedulerQueue()\n        return\n      }\n      nextTick(flushSchedulerQueue)\n    }\n  }\n}\n```\n-------------------------------------\n\n从这个方法中找到了本文的答案，原来在执行watcher前需要按它们的id从小到大进行排序，再按顺序执行。  \n在调式中发现name1对应的watcher的id确实比name2的小，所以先执行了name1的watcher，虽然name2先被赋值，name2的watcher先被通知且放进更新队列中。\n\n\n```javascript\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  currentFlushTimestamp = getNow()\n  flushing = true\n  let watcher, id\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort((a, b) => a.id - b.id)\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index]\n    if (watcher.before) {\n      watcher.before()\n    }\n    id = watcher.id\n    has[id] = null\n    watcher.run()\n    // in dev build, check and stop circular updates.\n    if (process.env.NODE_ENV !== 'production' && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? `in watcher with expression \"${watcher.expression}\"`\n              : `in a component render function.`\n          ),\n          watcher.vm\n        )\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  const activatedQueue = activatedChildren.slice()\n  const updatedQueue = queue.slice()\n\n  resetSchedulerState()\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue)\n  callUpdatedHooks(updatedQueue)\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush')\n  }\n}\n```\n----------------------------------------------\n\n肯定大家都有疑问，name1的watcher的id为什么就小呢，我们从创建它们watcher的源码找到了答案。  \n遍历定义Vue组件时\b的watch对象，每个属性都对应生成一个watcher。生成watcher时，id是自增的(代码没放上来，有兴趣的可以自行探索)。  \n可见name1和name2对应的watcher的id就看遍历的顺序了。浏览器中遍历对象的顺序貌似也是值得探究的问题，这里不做讨论。  \n\n```javascript\nexport function initState (vm: Component) {\n  vm._watchers = []\n  const opts = vm.$options\n  if (opts.props) initProps(vm, opts.props)\n  if (opts.methods) initMethods(vm, opts.methods)\n  if (opts.data) {\n    initData(vm)\n  } else {\n    observe(vm._data = {}, true /* asRootData */)\n  }\n  if (opts.computed) initComputed(vm, opts.computed)\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch)\n  }\n}\n```\n\n```javascript\nfunction initWatch (vm: Component, watch: Object) {\n  for (const key in watch) {\n    const handler = watch[key]\n    if (Array.isArray(handler)) {\n      for (let i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i])\n      }\n    } else {\n      createWatcher(vm, key, handler)\n    }\n  }\n}\n```\n\n## 结论\n本文例子在chrome下执行，name1的watcher的id是比name2的小，所以name1的watcher先执行。  \n有兴趣的可以试试把watch中定义的两个watcher的顺序调换下，可验证本文所说的。\n\n","source":"_posts/vue-watch-order.md","raw":"---\ntitle: Vue的watch执行顺序\ndate: 2019-08-18 20:26:48\ntags:\n---\n## 问题\n最近遇到了和watch相关的问题，执行顺序却不符合预期。  \n先后改变了name2和name1的值，但触发watch的顺序却是先name1后name2。  \n\n代码逻辑如下：\n\n```html\n<template>\n  <div>\n    <button @click=\"onClick\">点击</button>\n  </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n      name1: \"name1\",\n      name2: \"name2\"\n    };\n  },\n  watch: {\n    name1(val) {\n      console.log(val);\n    },\n    name2(val) {\n      console.log(val);\n    }\n  },\n  methods: {\n    onClick() {\n      this.name2 = \"name2!\";\n      this.name1 = \"name1!\";\n    }\n  }\n};\n</script>\n\n\n```\n执行结果：\nname1!  \nname2!  \n\n## 响应式原理\n在Vue文档中没有找到执行顺序的介绍，所以最好的方式就是从源码中一探究竟。  \n先大概了解下Vue的响应式原理，请看[官方文档](https://cn.vuejs.org/v2/guide/reactivity.html#%E5%A6%82%E4%BD%95%E8%BF%BD%E8%B8%AA%E5%8F%98%E5%8C%96)提供的图\n![Vue的响应式原理](/images/vue-responsive.png)\n\n简要说明下：  \n把data的属性全部转为getter和setter。  \n当属性被引用时，触发getter。在getter中，每个属性都对应一个dep对象，dep对象会存储当前的watcher，同时当前的watcher也会存储dep(这就是所谓的依赖收集)。\n当属性被赋值时，触发setter。上面提到的dep就发挥作用了，它通知watcher执行。\n\n本文的重点就是通知watcher执行的过程发生了什么？   \n\n## 研究\n下面是setter的源码，经过调试，发现属性name2是先于name1触发了。    \ndep.notify()就是通知watcher执行，我们跟进去。  \n\n```javascript\n set: function reactiveSetter (newVal) {\n      const value = getter ? getter.call(obj) : val\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\n        customSetter()\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) return\n      if (setter) {\n        setter.call(obj, newVal)\n      } else {\n        val = newVal\n      }\n      childOb = !shallow && observe(newVal)\n      dep.notify()\n    }\n```\n\n------------------------------\n\n\n在dep的notify方法中，对subs按id从小到大排序，然后遍历执行它们的update方法。\nsubs存放着的就是watcher，在我们的例子中，name2的dep并不会有name1的watcher,所以这里的排序不影响例子的执行结果，重点看update方法。我们继续跟进去看。\n\n\n```javascript\n  addSub (sub: Watcher) {\n    this.subs.push(sub)\n  }\n\n  removeSub (sub: Watcher) {\n    remove(this.subs, sub)\n  }\n\n  depend () {\n    if (Dep.target) {\n      Dep.target.addDep(this)\n    }\n  }\n\n  notify () {\n    // stabilize the subscriber list first\n    const subs = this.subs.slice()\n    if (process.env.NODE_ENV !== 'production' && !config.async) {\n      // subs aren't sorted in scheduler if not running async\n      // we need to sort them now to make sure they fire in correct\n      // order\n      subs.sort((a, b) => a.id - b.id)\n    }\n    for (let i = 0, l = subs.length; i < l; i++) {\n      subs[i].update()\n    }\n  }\n}\n\n```\n------------------------------\n\n经过调试，执行了queueWatcher,所以lazy和sync这里不关注。 \nqueueWatcher的定义没有在watcher中，而是在/src/core/observer/scheduler.js文件。  \n当跟进scheduler.js中，发现了这里就有本文的答案，涉及到了队列更新。\n\n```javascript\n  /**\n   * Subscriber interface.\n   * Will be called when a dependency changes.\n   */\n  update () {\n    /* istanbul ignore else */\n    if (this.lazy) {\n      this.dirty = true\n    } else if (this.sync) {\n      this.run()\n    } else {\n      queueWatcher(this)\n    }\n  }\n```\n\n## 更新队列\n其实在Vue的官方文档也有提到，下面是截取的一段话：\n> 可能你还没有注意到，Vue 异步执行 DOM 更新。只要观察到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作上非常重要。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。\n\n**Vue将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。**这一句尤为重要。本文例子中，name2的watcher先被通知的，被队列缓冲了。在这个事件循环中name1的watcher接着也被缓冲了。估计是执行队列时，这两个watcher顺序发生了变化，导致例子运行结果不符合预期。带着疑问继续看代码。\n\n-------------------------------------\nwatcher会被添加到队列，执行flushSchedulerQueue方法会清理队列并执行里面的watcher。\n\n```javascript\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nexport function queueWatcher (watcher: Watcher) {\n  const id = watcher.id\n  if (has[id] == null) {\n    has[id] = true\n    if (!flushing) {\n      queue.push(watcher)\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      let i = queue.length - 1\n      while (i > index && queue[i].id > watcher.id) {\n        i--\n      }\n      queue.splice(i + 1, 0, watcher)\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true\n\n      if (process.env.NODE_ENV !== 'production' && !config.async) {\n        flushSchedulerQueue()\n        return\n      }\n      nextTick(flushSchedulerQueue)\n    }\n  }\n}\n```\n-------------------------------------\n\n从这个方法中找到了本文的答案，原来在执行watcher前需要按它们的id从小到大进行排序，再按顺序执行。  \n在调式中发现name1对应的watcher的id确实比name2的小，所以先执行了name1的watcher，虽然name2先被赋值，name2的watcher先被通知且放进更新队列中。\n\n\n```javascript\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  currentFlushTimestamp = getNow()\n  flushing = true\n  let watcher, id\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort((a, b) => a.id - b.id)\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index]\n    if (watcher.before) {\n      watcher.before()\n    }\n    id = watcher.id\n    has[id] = null\n    watcher.run()\n    // in dev build, check and stop circular updates.\n    if (process.env.NODE_ENV !== 'production' && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? `in watcher with expression \"${watcher.expression}\"`\n              : `in a component render function.`\n          ),\n          watcher.vm\n        )\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  const activatedQueue = activatedChildren.slice()\n  const updatedQueue = queue.slice()\n\n  resetSchedulerState()\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue)\n  callUpdatedHooks(updatedQueue)\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush')\n  }\n}\n```\n----------------------------------------------\n\n肯定大家都有疑问，name1的watcher的id为什么就小呢，我们从创建它们watcher的源码找到了答案。  \n遍历定义Vue组件时\b的watch对象，每个属性都对应生成一个watcher。生成watcher时，id是自增的(代码没放上来，有兴趣的可以自行探索)。  \n可见name1和name2对应的watcher的id就看遍历的顺序了。浏览器中遍历对象的顺序貌似也是值得探究的问题，这里不做讨论。  \n\n```javascript\nexport function initState (vm: Component) {\n  vm._watchers = []\n  const opts = vm.$options\n  if (opts.props) initProps(vm, opts.props)\n  if (opts.methods) initMethods(vm, opts.methods)\n  if (opts.data) {\n    initData(vm)\n  } else {\n    observe(vm._data = {}, true /* asRootData */)\n  }\n  if (opts.computed) initComputed(vm, opts.computed)\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch)\n  }\n}\n```\n\n```javascript\nfunction initWatch (vm: Component, watch: Object) {\n  for (const key in watch) {\n    const handler = watch[key]\n    if (Array.isArray(handler)) {\n      for (let i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i])\n      }\n    } else {\n      createWatcher(vm, key, handler)\n    }\n  }\n}\n```\n\n## 结论\n本文例子在chrome下执行，name1的watcher的id是比name2的小，所以name1的watcher先执行。  \n有兴趣的可以试试把watch中定义的两个watcher的顺序调换下，可验证本文所说的。\n\n","slug":"vue-watch-order","published":1,"updated":"2019-08-18T15:27:38.000Z","_id":"cjzgybcp50000cxwftwp33quv","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>最近遇到了和watch相关的问题，执行顺序却不符合预期。<br>先后改变了name2和name1的值，但触发watch的顺序却是先name1后name2。  </p>\n<p>代码逻辑如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"onClick\"</span>&gt;</span>点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">export default &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  data() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    return &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      name1: \"name1\",</span></span><br><span class=\"line\"><span class=\"undefined\">      name2: \"name2\"</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  watch: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    name1(val) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      console.log(val);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    name2(val) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      console.log(val);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    onClick() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      this.name2 = \"name2!\";</span></span><br><span class=\"line\"><span class=\"undefined\">      this.name1 = \"name1!\";</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>执行结果：<br>name1!<br>name2!  </p>\n<h2 id=\"响应式原理\"><a href=\"#响应式原理\" class=\"headerlink\" title=\"响应式原理\"></a>响应式原理</h2><p>在Vue文档中没有找到执行顺序的介绍，所以最好的方式就是从源码中一探究竟。<br>先大概了解下Vue的响应式原理，请看<a href=\"https://cn.vuejs.org/v2/guide/reactivity.html#%E5%A6%82%E4%BD%95%E8%BF%BD%E8%B8%AA%E5%8F%98%E5%8C%96\" target=\"_blank\" rel=\"noopener\">官方文档</a>提供的图<br><img src=\"/images/vue-responsive.png\" alt=\"Vue的响应式原理\"></p>\n<p>简要说明下：<br>把data的属性全部转为getter和setter。<br>当属性被引用时，触发getter。在getter中，每个属性都对应一个dep对象，dep对象会存储当前的watcher，同时当前的watcher也会存储dep(这就是所谓的依赖收集)。<br>当属性被赋值时，触发setter。上面提到的dep就发挥作用了，它通知watcher执行。</p>\n<p>本文的重点就是通知watcher执行的过程发生了什么？   </p>\n<h2 id=\"研究\"><a href=\"#研究\" class=\"headerlink\" title=\"研究\"></a>研究</h2><p>下面是setter的源码，经过调试，发现属性name2是先于name1触发了。<br>dep.notify()就是通知watcher执行，我们跟进去。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactiveSetter</span> (<span class=\"params\">newVal</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">const</span> value = getter ? getter.call(obj) : val</span><br><span class=\"line\">     <span class=\"comment\">/* eslint-disable no-self-compare */</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">/* eslint-enable no-self-compare */</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span> &amp;&amp; customSetter) &#123;</span><br><span class=\"line\">       customSetter()</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">// #7981: for accessor properties without setter</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (getter &amp;&amp; !setter) <span class=\"keyword\">return</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (setter) &#123;</span><br><span class=\"line\">       setter.call(obj, newVal)</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">       val = newVal</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     childOb = !shallow &amp;&amp; observe(newVal)</span><br><span class=\"line\">     dep.notify()</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>在dep的notify方法中，对subs按id从小到大排序，然后遍历执行它们的update方法。<br>subs存放着的就是watcher，在我们的例子中，name2的dep并不会有name1的watcher,所以这里的排序不影响例子的执行结果，重点看update方法。我们继续跟进去看。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  addSub (sub: Watcher) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subs.push(sub)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  removeSub (sub: Watcher) &#123;</span><br><span class=\"line\">    remove(<span class=\"keyword\">this</span>.subs, sub)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  depend () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">      Dep.target.addDep(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  notify () &#123;</span><br><span class=\"line\">    <span class=\"comment\">// stabilize the subscriber list first</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> subs = <span class=\"keyword\">this</span>.subs.slice()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span> &amp;&amp; !config.async) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// subs aren't sorted in scheduler if not running async</span></span><br><span class=\"line\">      <span class=\"comment\">// we need to sort them now to make sure they fire in correct</span></span><br><span class=\"line\">      <span class=\"comment\">// order</span></span><br><span class=\"line\">      subs.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a.id - b.id)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = subs.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">      subs[i].update()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>经过调试，执行了queueWatcher,所以lazy和sync这里不关注。<br>queueWatcher的定义没有在watcher中，而是在/src/core/observer/scheduler.js文件。<br>当跟进scheduler.js中，发现了这里就有本文的答案，涉及到了队列更新。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Subscriber interface.</span></span><br><span class=\"line\"><span class=\"comment\"> * Will be called when a dependency changes.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">update () &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore else */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.lazy) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dirty = <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.sync) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.run()</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    queueWatcher(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"更新队列\"><a href=\"#更新队列\" class=\"headerlink\" title=\"更新队列\"></a>更新队列</h2><p>其实在Vue的官方文档也有提到，下面是截取的一段话：</p>\n<blockquote>\n<p>可能你还没有注意到，Vue 异步执行 DOM 更新。只要观察到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作上非常重要。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。</p>\n</blockquote>\n<p><strong>Vue将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。</strong>这一句尤为重要。本文例子中，name2的watcher先被通知的，被队列缓冲了。在这个事件循环中name1的watcher接着也被缓冲了。估计是执行队列时，这两个watcher顺序发生了变化，导致例子运行结果不符合预期。带着疑问继续看代码。</p>\n<hr>\n<p>watcher会被添加到队列，执行flushSchedulerQueue方法会清理队列并执行里面的watcher。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Push a watcher into the watcher queue.</span></span><br><span class=\"line\"><span class=\"comment\"> * Jobs with duplicate IDs will be skipped unless it's</span></span><br><span class=\"line\"><span class=\"comment\"> * pushed when the queue is being flushed.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">queueWatcher</span> (<span class=\"params\">watcher: Watcher</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> id = watcher.id</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (has[id] == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    has[id] = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!flushing) &#123;</span><br><span class=\"line\">      queue.push(watcher)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// if already flushing, splice the watcher based on its id</span></span><br><span class=\"line\">      <span class=\"comment\">// if already past its id, it will be run next immediately.</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> i = queue.length - <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (i &gt; index &amp;&amp; queue[i].id &gt; watcher.id) &#123;</span><br><span class=\"line\">        i--</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      queue.splice(i + <span class=\"number\">1</span>, <span class=\"number\">0</span>, watcher)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// queue the flush</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!waiting) &#123;</span><br><span class=\"line\">      waiting = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span> &amp;&amp; !config.async) &#123;</span><br><span class=\"line\">        flushSchedulerQueue()</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      nextTick(flushSchedulerQueue)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>从这个方法中找到了本文的答案，原来在执行watcher前需要按它们的id从小到大进行排序，再按顺序执行。<br>在调式中发现name1对应的watcher的id确实比name2的小，所以先执行了name1的watcher，虽然name2先被赋值，name2的watcher先被通知且放进更新队列中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Flush both queues and run the watchers.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flushSchedulerQueue</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  currentFlushTimestamp = getNow()</span><br><span class=\"line\">  flushing = <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> watcher, id</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Sort queue before flush.</span></span><br><span class=\"line\">  <span class=\"comment\">// This ensures that:</span></span><br><span class=\"line\">  <span class=\"comment\">// 1. Components are updated from parent to child. (because parent is always</span></span><br><span class=\"line\">  <span class=\"comment\">//    created before the child)</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. A component's user watchers are run before its render watcher (because</span></span><br><span class=\"line\">  <span class=\"comment\">//    user watchers are created before the render watcher)</span></span><br><span class=\"line\">  <span class=\"comment\">// 3. If a component is destroyed during a parent component's watcher run,</span></span><br><span class=\"line\">  <span class=\"comment\">//    its watchers can be skipped.</span></span><br><span class=\"line\">  queue.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a.id - b.id)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// do not cache length because more watchers might be pushed</span></span><br><span class=\"line\">  <span class=\"comment\">// as we run existing watchers</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (index = <span class=\"number\">0</span>; index &lt; queue.length; index++) &#123;</span><br><span class=\"line\">    watcher = queue[index]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (watcher.before) &#123;</span><br><span class=\"line\">      watcher.before()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    id = watcher.id</span><br><span class=\"line\">    has[id] = <span class=\"literal\">null</span></span><br><span class=\"line\">    watcher.run()</span><br><span class=\"line\">    <span class=\"comment\">// in dev build, check and stop circular updates.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span> &amp;&amp; has[id] != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      circular[id] = (circular[id] || <span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (circular[id] &gt; MAX_UPDATE_COUNT) &#123;</span><br><span class=\"line\">        warn(</span><br><span class=\"line\">          <span class=\"string\">'You may have an infinite update loop '</span> + (</span><br><span class=\"line\">            watcher.user</span><br><span class=\"line\">              ? <span class=\"string\">`in watcher with expression \"<span class=\"subst\">$&#123;watcher.expression&#125;</span>\"`</span></span><br><span class=\"line\">              : <span class=\"string\">`in a component render function.`</span></span><br><span class=\"line\">          ),</span><br><span class=\"line\">          watcher.vm</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// keep copies of post queues before resetting state</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> activatedQueue = activatedChildren.slice()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> updatedQueue = queue.slice()</span><br><span class=\"line\"></span><br><span class=\"line\">  resetSchedulerState()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// call component updated and activated hooks</span></span><br><span class=\"line\">  callActivatedHooks(activatedQueue)</span><br><span class=\"line\">  callUpdatedHooks(updatedQueue)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// devtool hook</span></span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (devtools &amp;&amp; config.devtools) &#123;</span><br><span class=\"line\">    devtools.emit(<span class=\"string\">'flush'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>肯定大家都有疑问，name1的watcher的id为什么就小呢，我们从创建它们watcher的源码找到了答案。<br>遍历定义Vue组件时\b的watch对象，每个属性都对应生成一个watcher。生成watcher时，id是自增的(代码没放上来，有兴趣的可以自行探索)。<br>可见name1和name2对应的watcher的id就看遍历的顺序了。浏览器中遍历对象的顺序貌似也是值得探究的问题，这里不做讨论。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initState</span> (<span class=\"params\">vm: Component</span>) </span>&#123;</span><br><span class=\"line\">  vm._watchers = []</span><br><span class=\"line\">  <span class=\"keyword\">const</span> opts = vm.$options</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.props) initProps(vm, opts.props)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.methods) initMethods(vm, opts.methods)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.data) &#123;</span><br><span class=\"line\">    initData(vm)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    observe(vm._data = &#123;&#125;, <span class=\"literal\">true</span> <span class=\"comment\">/* asRootData */</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.computed) initComputed(vm, opts.computed)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.watch &amp;&amp; opts.watch !== nativeWatch) &#123;</span><br><span class=\"line\">    initWatch(vm, opts.watch)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initWatch</span> (<span class=\"params\">vm: Component, watch: Object</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> watch) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> handler = watch[key]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(handler)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; handler.length; i++) &#123;</span><br><span class=\"line\">        createWatcher(vm, key, handler[i])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      createWatcher(vm, key, handler)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>本文例子在chrome下执行，name1的watcher的id是比name2的小，所以name1的watcher先执行。<br>有兴趣的可以试试把watch中定义的两个watcher的顺序调换下，可验证本文所说的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>最近遇到了和watch相关的问题，执行顺序却不符合预期。<br>先后改变了name2和name1的值，但触发watch的顺序却是先name1后name2。  </p>\n<p>代码逻辑如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"onClick\"</span>&gt;</span>点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">export default &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  data() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    return &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      name1: \"name1\",</span></span><br><span class=\"line\"><span class=\"undefined\">      name2: \"name2\"</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  watch: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    name1(val) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      console.log(val);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    name2(val) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      console.log(val);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    onClick() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      this.name2 = \"name2!\";</span></span><br><span class=\"line\"><span class=\"undefined\">      this.name1 = \"name1!\";</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>执行结果：<br>name1!<br>name2!  </p>\n<h2 id=\"响应式原理\"><a href=\"#响应式原理\" class=\"headerlink\" title=\"响应式原理\"></a>响应式原理</h2><p>在Vue文档中没有找到执行顺序的介绍，所以最好的方式就是从源码中一探究竟。<br>先大概了解下Vue的响应式原理，请看<a href=\"https://cn.vuejs.org/v2/guide/reactivity.html#%E5%A6%82%E4%BD%95%E8%BF%BD%E8%B8%AA%E5%8F%98%E5%8C%96\" target=\"_blank\" rel=\"noopener\">官方文档</a>提供的图<br><img src=\"/images/vue-responsive.png\" alt=\"Vue的响应式原理\"></p>\n<p>简要说明下：<br>把data的属性全部转为getter和setter。<br>当属性被引用时，触发getter。在getter中，每个属性都对应一个dep对象，dep对象会存储当前的watcher，同时当前的watcher也会存储dep(这就是所谓的依赖收集)。<br>当属性被赋值时，触发setter。上面提到的dep就发挥作用了，它通知watcher执行。</p>\n<p>本文的重点就是通知watcher执行的过程发生了什么？   </p>\n<h2 id=\"研究\"><a href=\"#研究\" class=\"headerlink\" title=\"研究\"></a>研究</h2><p>下面是setter的源码，经过调试，发现属性name2是先于name1触发了。<br>dep.notify()就是通知watcher执行，我们跟进去。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactiveSetter</span> (<span class=\"params\">newVal</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">const</span> value = getter ? getter.call(obj) : val</span><br><span class=\"line\">     <span class=\"comment\">/* eslint-disable no-self-compare */</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">/* eslint-enable no-self-compare */</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span> &amp;&amp; customSetter) &#123;</span><br><span class=\"line\">       customSetter()</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">// #7981: for accessor properties without setter</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (getter &amp;&amp; !setter) <span class=\"keyword\">return</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (setter) &#123;</span><br><span class=\"line\">       setter.call(obj, newVal)</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">       val = newVal</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     childOb = !shallow &amp;&amp; observe(newVal)</span><br><span class=\"line\">     dep.notify()</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>在dep的notify方法中，对subs按id从小到大排序，然后遍历执行它们的update方法。<br>subs存放着的就是watcher，在我们的例子中，name2的dep并不会有name1的watcher,所以这里的排序不影响例子的执行结果，重点看update方法。我们继续跟进去看。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  addSub (sub: Watcher) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subs.push(sub)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  removeSub (sub: Watcher) &#123;</span><br><span class=\"line\">    remove(<span class=\"keyword\">this</span>.subs, sub)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  depend () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">      Dep.target.addDep(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  notify () &#123;</span><br><span class=\"line\">    <span class=\"comment\">// stabilize the subscriber list first</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> subs = <span class=\"keyword\">this</span>.subs.slice()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span> &amp;&amp; !config.async) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// subs aren't sorted in scheduler if not running async</span></span><br><span class=\"line\">      <span class=\"comment\">// we need to sort them now to make sure they fire in correct</span></span><br><span class=\"line\">      <span class=\"comment\">// order</span></span><br><span class=\"line\">      subs.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a.id - b.id)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = subs.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">      subs[i].update()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>经过调试，执行了queueWatcher,所以lazy和sync这里不关注。<br>queueWatcher的定义没有在watcher中，而是在/src/core/observer/scheduler.js文件。<br>当跟进scheduler.js中，发现了这里就有本文的答案，涉及到了队列更新。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Subscriber interface.</span></span><br><span class=\"line\"><span class=\"comment\"> * Will be called when a dependency changes.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">update () &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore else */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.lazy) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dirty = <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.sync) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.run()</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    queueWatcher(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"更新队列\"><a href=\"#更新队列\" class=\"headerlink\" title=\"更新队列\"></a>更新队列</h2><p>其实在Vue的官方文档也有提到，下面是截取的一段话：</p>\n<blockquote>\n<p>可能你还没有注意到，Vue 异步执行 DOM 更新。只要观察到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作上非常重要。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。</p>\n</blockquote>\n<p><strong>Vue将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。</strong>这一句尤为重要。本文例子中，name2的watcher先被通知的，被队列缓冲了。在这个事件循环中name1的watcher接着也被缓冲了。估计是执行队列时，这两个watcher顺序发生了变化，导致例子运行结果不符合预期。带着疑问继续看代码。</p>\n<hr>\n<p>watcher会被添加到队列，执行flushSchedulerQueue方法会清理队列并执行里面的watcher。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Push a watcher into the watcher queue.</span></span><br><span class=\"line\"><span class=\"comment\"> * Jobs with duplicate IDs will be skipped unless it's</span></span><br><span class=\"line\"><span class=\"comment\"> * pushed when the queue is being flushed.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">queueWatcher</span> (<span class=\"params\">watcher: Watcher</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> id = watcher.id</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (has[id] == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    has[id] = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!flushing) &#123;</span><br><span class=\"line\">      queue.push(watcher)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// if already flushing, splice the watcher based on its id</span></span><br><span class=\"line\">      <span class=\"comment\">// if already past its id, it will be run next immediately.</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> i = queue.length - <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (i &gt; index &amp;&amp; queue[i].id &gt; watcher.id) &#123;</span><br><span class=\"line\">        i--</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      queue.splice(i + <span class=\"number\">1</span>, <span class=\"number\">0</span>, watcher)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// queue the flush</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!waiting) &#123;</span><br><span class=\"line\">      waiting = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span> &amp;&amp; !config.async) &#123;</span><br><span class=\"line\">        flushSchedulerQueue()</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      nextTick(flushSchedulerQueue)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>从这个方法中找到了本文的答案，原来在执行watcher前需要按它们的id从小到大进行排序，再按顺序执行。<br>在调式中发现name1对应的watcher的id确实比name2的小，所以先执行了name1的watcher，虽然name2先被赋值，name2的watcher先被通知且放进更新队列中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Flush both queues and run the watchers.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flushSchedulerQueue</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  currentFlushTimestamp = getNow()</span><br><span class=\"line\">  flushing = <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> watcher, id</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Sort queue before flush.</span></span><br><span class=\"line\">  <span class=\"comment\">// This ensures that:</span></span><br><span class=\"line\">  <span class=\"comment\">// 1. Components are updated from parent to child. (because parent is always</span></span><br><span class=\"line\">  <span class=\"comment\">//    created before the child)</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. A component's user watchers are run before its render watcher (because</span></span><br><span class=\"line\">  <span class=\"comment\">//    user watchers are created before the render watcher)</span></span><br><span class=\"line\">  <span class=\"comment\">// 3. If a component is destroyed during a parent component's watcher run,</span></span><br><span class=\"line\">  <span class=\"comment\">//    its watchers can be skipped.</span></span><br><span class=\"line\">  queue.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a.id - b.id)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// do not cache length because more watchers might be pushed</span></span><br><span class=\"line\">  <span class=\"comment\">// as we run existing watchers</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (index = <span class=\"number\">0</span>; index &lt; queue.length; index++) &#123;</span><br><span class=\"line\">    watcher = queue[index]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (watcher.before) &#123;</span><br><span class=\"line\">      watcher.before()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    id = watcher.id</span><br><span class=\"line\">    has[id] = <span class=\"literal\">null</span></span><br><span class=\"line\">    watcher.run()</span><br><span class=\"line\">    <span class=\"comment\">// in dev build, check and stop circular updates.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span> &amp;&amp; has[id] != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      circular[id] = (circular[id] || <span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (circular[id] &gt; MAX_UPDATE_COUNT) &#123;</span><br><span class=\"line\">        warn(</span><br><span class=\"line\">          <span class=\"string\">'You may have an infinite update loop '</span> + (</span><br><span class=\"line\">            watcher.user</span><br><span class=\"line\">              ? <span class=\"string\">`in watcher with expression \"<span class=\"subst\">$&#123;watcher.expression&#125;</span>\"`</span></span><br><span class=\"line\">              : <span class=\"string\">`in a component render function.`</span></span><br><span class=\"line\">          ),</span><br><span class=\"line\">          watcher.vm</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// keep copies of post queues before resetting state</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> activatedQueue = activatedChildren.slice()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> updatedQueue = queue.slice()</span><br><span class=\"line\"></span><br><span class=\"line\">  resetSchedulerState()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// call component updated and activated hooks</span></span><br><span class=\"line\">  callActivatedHooks(activatedQueue)</span><br><span class=\"line\">  callUpdatedHooks(updatedQueue)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// devtool hook</span></span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (devtools &amp;&amp; config.devtools) &#123;</span><br><span class=\"line\">    devtools.emit(<span class=\"string\">'flush'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>肯定大家都有疑问，name1的watcher的id为什么就小呢，我们从创建它们watcher的源码找到了答案。<br>遍历定义Vue组件时\b的watch对象，每个属性都对应生成一个watcher。生成watcher时，id是自增的(代码没放上来，有兴趣的可以自行探索)。<br>可见name1和name2对应的watcher的id就看遍历的顺序了。浏览器中遍历对象的顺序貌似也是值得探究的问题，这里不做讨论。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initState</span> (<span class=\"params\">vm: Component</span>) </span>&#123;</span><br><span class=\"line\">  vm._watchers = []</span><br><span class=\"line\">  <span class=\"keyword\">const</span> opts = vm.$options</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.props) initProps(vm, opts.props)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.methods) initMethods(vm, opts.methods)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.data) &#123;</span><br><span class=\"line\">    initData(vm)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    observe(vm._data = &#123;&#125;, <span class=\"literal\">true</span> <span class=\"comment\">/* asRootData */</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.computed) initComputed(vm, opts.computed)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.watch &amp;&amp; opts.watch !== nativeWatch) &#123;</span><br><span class=\"line\">    initWatch(vm, opts.watch)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initWatch</span> (<span class=\"params\">vm: Component, watch: Object</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> watch) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> handler = watch[key]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(handler)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; handler.length; i++) &#123;</span><br><span class=\"line\">        createWatcher(vm, key, handler[i])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      createWatcher(vm, key, handler)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>本文例子在chrome下执行，name1的watcher的id是比name2的小，所以name1的watcher先执行。<br>有兴趣的可以试试把watch中定义的两个watcher的顺序调换下，可验证本文所说的。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjymstemb00007nwftyv74qhi","tag_id":"cjymsteng00147nwfrigut7gt","_id":"cjymstenu001d7nwflw2dzs7y"},{"post_id":"cjymstemf00017nwf299pt0x3","tag_id":"cjymstenk00157nwfz2s0ncl6","_id":"cjymstenv001f7nwffnl8qwpl"},{"post_id":"cjymstemv000k7nwfbkfxyqud","tag_id":"cjymstenk00167nwfs8nzata4","_id":"cjymstenv001h7nwfnybk3kiz"},{"post_id":"cjymstemy000p7nwf3uto5kec","tag_id":"cjymstenl00177nwfnrbmbcdy","_id":"cjymstenw001j7nwffd4hkl0y"},{"post_id":"cjymsten2000v7nwffn3uzsnl","tag_id":"cjymstenl00187nwfgb112mq5","_id":"cjymstenx001l7nwfgq61s80z"},{"post_id":"cjymsten600117nwf5xo4qgo0","tag_id":"cjymstenl00197nwf6j5qrc59","_id":"cjymsteny001n7nwfdq4nl1pe"},{"post_id":"cjymsten700137nwfz2a5xr8r","tag_id":"cjymstenl00187nwfgb112mq5","_id":"cjymsteny001p7nwf894f6c41"},{"post_id":"cjymsten700137nwfz2a5xr8r","tag_id":"cjymstenn001b7nwfueszsbzq","_id":"cjymstenz001r7nwfcr5enf8c"},{"post_id":"cjymsteny001q7nwfw4cyyig0","tag_id":"cjymsteo3001s7nwf4l1e7aok","_id":"cjymsteo6001u7nwfzssmuvvc"},{"post_id":"cjymsteny001q7nwfw4cyyig0","tag_id":"cjymsteo4001t7nwfourlrw1q","_id":"cjymsteo6001v7nwfekd52h9e"}],"Tag":[{"name":"HTTP权威指南","_id":"cjymsteng00147nwfrigut7gt"},{"name":"blockchain","_id":"cjymstenk00157nwfz2s0ncl6"},{"name":"同源策略","_id":"cjymstenk00167nwfs8nzata4"},{"name":"vue源码学习笔记","_id":"cjymstenl00177nwfnrbmbcdy"},{"name":"webpack","_id":"cjymstenl00187nwfgb112mq5"},{"name":"异步","_id":"cjymstenl00197nwf6j5qrc59"},{"name":"loader","_id":"cjymstenn001b7nwfueszsbzq"},{"name":"css","_id":"cjymsteo3001s7nwf4l1e7aok"},{"name":"布局","_id":"cjymsteo4001t7nwfourlrw1q"}]}}